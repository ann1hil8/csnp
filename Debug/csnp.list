
csnp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000780c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000940  080079a0  080079a0  000089a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082e0  080082e0  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080082e0  080082e0  000092e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082e8  080082e8  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082e8  080082e8  000092e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082ec  080082ec  000092ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080082f0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001288  200001d4  080084c4  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000145c  080084c4  0000a45c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e51d  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f7  00000000  00000000  00018721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  0001ab18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000906  00000000  00000000  0001b700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217d7  00000000  00000000  0001c006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6a5  00000000  00000000  0003d7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3b19  00000000  00000000  0004be82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f99b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040e8  00000000  00000000  0010f9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00113ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007984 	.word	0x08007984

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007984 	.word	0x08007984

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <CSNP_Start>:
 * Parameters:
 *
 * Returns:
 *   CSNP_OK on success, CSNP_ERROR on null pointer input or CAN initialization failure.
 */
CSNP_StatusTypeDef CSNP_Start() {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
    // Start the CAN peripheral
    if( HAL_CAN_Start(&hcan1) != HAL_OK){
 8000e9c:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <CSNP_Start+0x1c>)
 8000e9e:	f001 f902 	bl	80020a6 <HAL_CAN_Start>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <CSNP_Start+0x14>
        return CSNP_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <CSNP_Start+0x16>
    }
    return CSNP_OK;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000258 	.word	0x20000258

08000eb8 <CSNP_Tx_Init>:
 *   header: Pointer to the CAN_TxHeaderTypeDef structure containing the header information.
 *
 * Returns:
 *   CSNP_OK on success, CSNP_ERROR on null pointer input.
 */
CSNP_StatusTypeDef CSNP_Tx_Init(const CAN_TxHeaderTypeDef *header) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    if( header == NULL){
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <CSNP_Tx_Init+0x12>
        return CSNP_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e005      	b.n	8000ed6 <CSNP_Tx_Init+0x1e>
    }
    // Copy the entire header structure using memcpy
    memcpy(&CSNP_txHeader, header, sizeof(CAN_TxHeaderTypeDef));
 8000eca:	2218      	movs	r2, #24
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <CSNP_Tx_Init+0x28>)
 8000ed0:	f004 fe01 	bl	8005ad6 <memcpy>
    return CSNP_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200001f0 	.word	0x200001f0

08000ee4 <CSNP_Tx_Send>:
 *   mailbox: Pointer to a variable to store the mailbox used for transmission.
 *
 * Returns:
 *   CSNP_OK on success, CSNP_ERROR on failure.
 */
CSNP_StatusTypeDef CSNP_Tx_Send(CSNP_Tx_Frame *tx_frame, uint32_t *mailbox) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
    if( HAL_CAN_AddTxMessage(&hcan1, &tx_frame->header, tx_frame->data, mailbox) != HAL_OK){
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f103 0218 	add.w	r2, r3, #24
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	4809      	ldr	r0, [pc, #36]	@ (8000f20 <CSNP_Tx_Send+0x3c>)
 8000efa:	f001 f918 	bl	800212e <HAL_CAN_AddTxMessage>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <CSNP_Tx_Send+0x24>
        // handle error
        return CSNP_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e007      	b.n	8000f18 <CSNP_Tx_Send+0x34>
    }
    while( HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3){
 8000f08:	bf00      	nop
 8000f0a:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <CSNP_Tx_Send+0x3c>)
 8000f0c:	f001 f9df 	bl	80022ce <HAL_CAN_GetTxMailboxesFreeLevel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b03      	cmp	r3, #3
 8000f14:	d1f9      	bne.n	8000f0a <CSNP_Tx_Send+0x26>
    }
    return CSNP_OK;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000258 	.word	0x20000258

08000f24 <CSNP_Rx_Start_Msg_Pending>:
 *   filterConfig: Pointer to the CAN filter configuration structure.
 *
 * Returns:
 *   CSNP_OK on success, CSNP_ERROR on null pointer input or CAN configuration failure.
 */
CSNP_StatusTypeDef CSNP_Rx_Start_Msg_Pending(CAN_FilterTypeDef *filterConfig) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    if( filterConfig == NULL){
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <CSNP_Rx_Start_Msg_Pending+0x12>
        return CSNP_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e017      	b.n	8000f66 <CSNP_Rx_Start_Msg_Pending+0x42>
    }
    if( HAL_CAN_ConfigFilter(&hcan1, filterConfig) != HAL_OK
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	480d      	ldr	r0, [pc, #52]	@ (8000f70 <CSNP_Rx_Start_Msg_Pending+0x4c>)
 8000f3a:	f000 ffea 	bl	8001f12 <HAL_CAN_ConfigFilter>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d10d      	bne.n	8000f60 <CSNP_Rx_Start_Msg_Pending+0x3c>
            || HAL_CAN_ActivateNotification(&hcan1,
                    filterConfig->FilterFIFOAssignment ? CAN_IT_RX_FIFO1_MSG_PENDING : CAN_IT_RX_FIFO0_MSG_PENDING)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
            || HAL_CAN_ActivateNotification(&hcan1,
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <CSNP_Rx_Start_Msg_Pending+0x2c>
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	e000      	b.n	8000f52 <CSNP_Rx_Start_Msg_Pending+0x2e>
 8000f50:	2302      	movs	r3, #2
 8000f52:	4619      	mov	r1, r3
 8000f54:	4806      	ldr	r0, [pc, #24]	@ (8000f70 <CSNP_Rx_Start_Msg_Pending+0x4c>)
 8000f56:	f001 fb11 	bl	800257c <HAL_CAN_ActivateNotification>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <CSNP_Rx_Start_Msg_Pending+0x40>
                    != HAL_OK){
        return CSNP_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e000      	b.n	8000f66 <CSNP_Rx_Start_Msg_Pending+0x42>
    }
    return CSNP_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000258 	.word	0x20000258

08000f74 <CSNP_Rx_Wait>:
 *   payloadLength: Pointer to store the length of the received payload.
 *
 * Returns:
 *   true if a message is received and matches the node ID, false otherwise.
 */
bool CSNP_Rx_Wait(CSNP_Rx_Parsed *parsed, uint32_t FilterFIFO, uint32_t nodeId, uint32_t *payloadLength) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	603b      	str	r3, [r7, #0]
    while( !(FilterFIFO ? CSNP_RxFifo1MsgReceived : CSNP_RxFifo0MsgReceived)){
 8000f82:	bf00      	nop
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <CSNP_Rx_Wait+0x24>
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <CSNP_Rx_Wait+0x84>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f083 0301 	eor.w	r3, r3, #1
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	e005      	b.n	8000fa4 <CSNP_Rx_Wait+0x30>
 8000f98:	4b18      	ldr	r3, [pc, #96]	@ (8000ffc <CSNP_Rx_Wait+0x88>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	f083 0301 	eor.w	r3, r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1ed      	bne.n	8000f84 <CSNP_Rx_Wait+0x10>
    }
    // Determine the active FIFO
    CAN_RxHeaderTypeDef *header;
    uint8_t *data;
    if( FilterFIFO){
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d007      	beq.n	8000fbe <CSNP_Rx_Wait+0x4a>
        header = &CSNP_RxFifo1MsgHeader;
 8000fae:	4b14      	ldr	r3, [pc, #80]	@ (8001000 <CSNP_Rx_Wait+0x8c>)
 8000fb0:	617b      	str	r3, [r7, #20]
        data = CSNP_RxFifo1MsgData;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <CSNP_Rx_Wait+0x90>)
 8000fb4:	613b      	str	r3, [r7, #16]
        CSNP_RxFifo1MsgReceived = false;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	@ (8000ff8 <CSNP_Rx_Wait+0x84>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	e006      	b.n	8000fcc <CSNP_Rx_Wait+0x58>
    } else{
        header = &CSNP_RxFifo0MsgHeader;
 8000fbe:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <CSNP_Rx_Wait+0x94>)
 8000fc0:	617b      	str	r3, [r7, #20]
        data = CSNP_RxFifo0MsgData;
 8000fc2:	4b12      	ldr	r3, [pc, #72]	@ (800100c <CSNP_Rx_Wait+0x98>)
 8000fc4:	613b      	str	r3, [r7, #16]
        CSNP_RxFifo0MsgReceived = false;
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000ffc <CSNP_Rx_Wait+0x88>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
    }
    // Check if the received message matches the expected node ID
    if( CSNP_Id_Compare(header, nodeId)){
 8000fcc:	6879      	ldr	r1, [r7, #4]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f000 f81e 	bl	8001010 <CSNP_Id_Compare>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d009      	beq.n	8000fee <CSNP_Rx_Wait+0x7a>
        *payloadLength = CSNP_Rx_Parse_Frame(parsed, header, data);
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	6979      	ldr	r1, [r7, #20]
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f000 f830 	bl	8001044 <CSNP_Rx_Parse_Frame>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	601a      	str	r2, [r3, #0]
        return true;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <CSNP_Rx_Wait+0x7c>
    } else {
        return false;
 8000fee:	2300      	movs	r3, #0
    }
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000255 	.word	0x20000255
 8000ffc:	20000254 	.word	0x20000254
 8001000:	20000228 	.word	0x20000228
 8001004:	2000024c 	.word	0x2000024c
 8001008:	2000020c 	.word	0x2000020c
 800100c:	20000244 	.word	0x20000244

08001010 <CSNP_Id_Compare>:
 *   nodeId: The node ID to compare against.
 *
 * Returns:
 *   true if the node IDs match, false otherwise.
 */
bool CSNP_Id_Compare(CAN_RxHeaderTypeDef *header, uint32_t nodeId) {
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
    // Compare the node ID with the appropriate identifier (extended or standard)
    return nodeId == (header->IDE ? header->ExtId : header->StdId);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <CSNP_Id_Compare+0x18>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	e001      	b.n	800102c <CSNP_Id_Compare+0x1c>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	4293      	cmp	r3, r2
 8001030:	bf0c      	ite	eq
 8001032:	2301      	moveq	r3, #1
 8001034:	2300      	movne	r3, #0
 8001036:	b2db      	uxtb	r3, r3
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <CSNP_Rx_Parse_Frame>:
 *   data: Pointer to the received message data.
 *
 * Returns:
 *   The total length of the message if it's a multi-frame message, 0 otherwise.
 */
uint32_t CSNP_Rx_Parse_Frame(CSNP_Rx_Parsed *parsed, CAN_RxHeaderTypeDef *header, uint8_t *data) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
    parsed->type = data[0] >> 4;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	b2da      	uxtb	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	701a      	strb	r2, [r3, #0]
    parsed->rtr = header->RTR;
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	605a      	str	r2, [r3, #4]

    switch( parsed->type){
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b03      	cmp	r3, #3
 800106a:	d86d      	bhi.n	8001148 <CSNP_Rx_Parse_Frame+0x104>
 800106c:	a201      	add	r2, pc, #4	@ (adr r2, 8001074 <CSNP_Rx_Parse_Frame+0x30>)
 800106e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001072:	bf00      	nop
 8001074:	08001085 	.word	0x08001085
 8001078:	080010ad 	.word	0x080010ad
 800107c:	080010e3 	.word	0x080010e3
 8001080:	08001117 	.word	0x08001117
        case CSNP_FRAME_TYPE_SINGLE:
            parsed->dataLength = header->DLC - 1;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	3b01      	subs	r3, #1
 800108c:	b2da      	uxtb	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	721a      	strb	r2, [r3, #8]
            // Error checking for mismatched data length
            if( parsed->dataLength != (0x0F & data[0])){
                // Handle error condition
            }
            memcpy(parsed->data, &data[1], parsed->dataLength);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f103 0009 	add.w	r0, r3, #9
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	1c59      	adds	r1, r3, #1
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	7a1b      	ldrb	r3, [r3, #8]
 80010a0:	461a      	mov	r2, r3
 80010a2:	f004 fd18 	bl	8005ad6 <memcpy>
            return parsed->dataLength;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	7a1b      	ldrb	r3, [r3, #8]
 80010aa:	e04e      	b.n	800114a <CSNP_Rx_Parse_Frame+0x106>
        case CSNP_FRAME_TYPE_FIRST:
            parsed->dataLength = header->DLC - 2;
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	3b02      	subs	r3, #2
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	721a      	strb	r2, [r3, #8]
            memcpy(parsed->data, &data[2], parsed->dataLength);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f103 0009 	add.w	r0, r3, #9
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	1c99      	adds	r1, r3, #2
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	7a1b      	ldrb	r3, [r3, #8]
 80010c8:	461a      	mov	r2, r3
 80010ca:	f004 fd04 	bl	8005ad6 <memcpy>
            return ((0x0F & data[0]) << 8) + data[1];
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	3201      	adds	r2, #1
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	e033      	b.n	800114a <CSNP_Rx_Parse_Frame+0x106>
        case CSNP_FRAME_TYPE_CONSECUTIVE:
            parsed->seqNum = 0x0F & data[0];
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	745a      	strb	r2, [r3, #17]
            parsed->dataLength = header->DLC - 1;
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	3b01      	subs	r3, #1
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	721a      	strb	r2, [r3, #8]
            memcpy(parsed->data, &data[1], parsed->dataLength);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	f103 0009 	add.w	r0, r3, #9
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	1c59      	adds	r1, r3, #1
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	7a1b      	ldrb	r3, [r3, #8]
 800110c:	461a      	mov	r2, r3
 800110e:	f004 fce2 	bl	8005ad6 <memcpy>
            return 0; // No total length for consecutive frames
 8001112:	2300      	movs	r3, #0
 8001114:	e019      	b.n	800114a <CSNP_Rx_Parse_Frame+0x106>
        case CSNP_FRAME_TYPE_FLOW_CONTROL:
            parsed->data[0] = 0x0F & data[0];
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	b2da      	uxtb	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	725a      	strb	r2, [r3, #9]
            parsed->dataLength = header->DLC;
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	721a      	strb	r2, [r3, #8]
            memcpy(&parsed->data[1], &data[1], parsed->dataLength - 1);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f103 000a 	add.w	r0, r3, #10
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	1c59      	adds	r1, r3, #1
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	7a1b      	ldrb	r3, [r3, #8]
 800113c:	3b01      	subs	r3, #1
 800113e:	461a      	mov	r2, r3
 8001140:	f004 fcc9 	bl	8005ad6 <memcpy>
            return 0; // No total length for flow control frames
 8001144:	2300      	movs	r3, #0
 8001146:	e000      	b.n	800114a <CSNP_Rx_Parse_Frame+0x106>
        default:
            // Handle invalid frame type
            return 0;
 8001148:	2300      	movs	r3, #0
    }
}
 800114a:	4618      	mov	r0, r3
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop

08001154 <CSNP_Tx_Create_Frame>:
 * CSNP_FRAME_TYPE_SINGLE: If the frame is a single frame.
 * CSNP_FRAME_TYPE_FIRST: If the frame is the first frame of a segmented message.
 * CSNP_FRAME_TYPE_CONSECUTIVE: If the frame is a consecutive frame of a segmented message.
 * CSNP_FRAME_TYPE_ERROR: If an error occurs during frame creation.
 */
uint8_t CSNP_Tx_Create_Frame(CSNP_Tx_Frame *tx_frame, uint32_t frameNum, uint8_t *buffer, uint32_t bufLength) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	603b      	str	r3, [r7, #0]
    if( tx_frame == NULL || buffer == NULL){
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <CSNP_Tx_Create_Frame+0x1a>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <CSNP_Tx_Create_Frame+0x1e>
        return CSNP_FRAME_TYPE_ERROR; // Handle null pointers
 800116e:	2305      	movs	r3, #5
 8001170:	e060      	b.n	8001234 <CSNP_Tx_Create_Frame+0xe0>
    }

    if( frameNum == 0){
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d12f      	bne.n	80011d8 <CSNP_Tx_Create_Frame+0x84>
        if( bufLength < 8){
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2b07      	cmp	r3, #7
 800117c:	d811      	bhi.n	80011a2 <CSNP_Tx_Create_Frame+0x4e>
            // Single frame
            tx_frame->data[0] = bufLength;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	761a      	strb	r2, [r3, #24]
            tx_frame->header.DLC = bufLength + 1;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	611a      	str	r2, [r3, #16]
            memcpy(tx_frame->data + 1, buffer, bufLength); // Copy all data
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3318      	adds	r3, #24
 8001192:	3301      	adds	r3, #1
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4618      	mov	r0, r3
 800119a:	f004 fc9c 	bl	8005ad6 <memcpy>
            return CSNP_FRAME_TYPE_SINGLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	e048      	b.n	8001234 <CSNP_Tx_Create_Frame+0xe0>
        } else{
            // First frame
            tx_frame->data[0] = 0x10 + (0x0F & (bufLength >> 8));
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	0a1b      	lsrs	r3, r3, #8
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	f003 030f 	and.w	r3, r3, #15
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	3310      	adds	r3, #16
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	761a      	strb	r2, [r3, #24]
            tx_frame->data[1] = 0xFF & bufLength;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	765a      	strb	r2, [r3, #25]
            tx_frame->header.DLC = 8;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2208      	movs	r2, #8
 80011c2:	611a      	str	r2, [r3, #16]
            memcpy(tx_frame->data + 2, buffer, 6);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3318      	adds	r3, #24
 80011c8:	3302      	adds	r3, #2
 80011ca:	2206      	movs	r2, #6
 80011cc:	6879      	ldr	r1, [r7, #4]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 fc81 	bl	8005ad6 <memcpy>
            return CSNP_FRAME_TYPE_FIRST;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e02d      	b.n	8001234 <CSNP_Tx_Create_Frame+0xe0>
        }
    } else{
        // Consecutive frame
        uint32_t offset = 7 * frameNum - 1;
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	4613      	mov	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	1a9b      	subs	r3, r3, r2
 80011e0:	3b01      	subs	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
        if( offset >= bufLength || bufLength < 8){
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d202      	bcs.n	80011f2 <CSNP_Tx_Create_Frame+0x9e>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	2b07      	cmp	r3, #7
 80011f0:	d801      	bhi.n	80011f6 <CSNP_Tx_Create_Frame+0xa2>
            return CSNP_FRAME_TYPE_ERROR; // Check for invalid offset or buffer length
 80011f2:	2305      	movs	r3, #5
 80011f4:	e01e      	b.n	8001234 <CSNP_Tx_Create_Frame+0xe0>
        }
        tx_frame->data[0] = 0x20 + (0x0F & frameNum);
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	3320      	adds	r3, #32
 8001202:	b2da      	uxtb	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	761a      	strb	r2, [r3, #24]
        tx_frame->header.DLC = (bufLength - offset < 7) ? bufLength - offset + 1 : 8;
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b07      	cmp	r3, #7
 8001210:	bf28      	it	cs
 8001212:	2307      	movcs	r3, #7
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	611a      	str	r2, [r3, #16]
        memcpy(tx_frame->data + 1, &buffer[offset], tx_frame->header.DLC - 1);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	3318      	adds	r3, #24
 800121e:	1c58      	adds	r0, r3, #1
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	18d1      	adds	r1, r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	3b01      	subs	r3, #1
 800122c:	461a      	mov	r2, r3
 800122e:	f004 fc52 	bl	8005ad6 <memcpy>
        return CSNP_FRAME_TYPE_CONSECUTIVE;
 8001232:	2302      	movs	r3, #2
    }
    return CSNP_FRAME_TYPE_ERROR;
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <CSNP_Tx_Send_Data>:
 * filterConfig: Pointer to the CAN filter configuration for reception.
 *
 *Returns:
 * CSNP_OK on successful transmission, CSNP_ERROR on failure.
 */
CSNP_StatusTypeDef CSNP_Tx_Send_Data(uint32_t nodeId, uint8_t *dataBuffer, uint32_t length, CAN_FilterTypeDef *filterConfig) {
 800123c:	b5b0      	push	{r4, r5, r7, lr}
 800123e:	b096      	sub	sp, #88	@ 0x58
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
 8001248:	603b      	str	r3, [r7, #0]
  CSNP_Rx_Parsed parsed;
  CSNP_Tx_Frame frame;
  frame.header = CSNP_txHeader; // Assuming CSNP_txHeader is pre-defined
 800124a:	4b4c      	ldr	r3, [pc, #304]	@ (800137c <CSNP_Tx_Send_Data+0x140>)
 800124c:	f107 0418 	add.w	r4, r7, #24
 8001250:	461d      	mov	r5, r3
 8001252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001256:	e895 0003 	ldmia.w	r5, {r0, r1}
 800125a:	e884 0003 	stmia.w	r4, {r0, r1}

  uint8_t delay;
  uint8_t block = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
  uint8_t count = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
  uint32_t payloadLength;

  // Loop until all data is sent or an error occurs
  for (int i = 0; CSNP_Tx_Create_Frame(&frame, i, dataBuffer, length) != CSNP_FRAME_TYPE_ERROR; i++) {
 800126a:	2300      	movs	r3, #0
 800126c:	653b      	str	r3, [r7, #80]	@ 0x50
 800126e:	e075      	b.n	800135c <CSNP_Tx_Send_Data+0x120>
    CSNP_Tx_Send(&frame, &CSNP_Tx_Mailbox);
 8001270:	f107 0318 	add.w	r3, r7, #24
 8001274:	4942      	ldr	r1, [pc, #264]	@ (8001380 <CSNP_Tx_Send_Data+0x144>)
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fe34 	bl	8000ee4 <CSNP_Tx_Send>
    // Check for flow control
    if (i == 0 || block == count) {
 800127c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800127e:	2b00      	cmp	r3, #0
 8001280:	d005      	beq.n	800128e <CSNP_Tx_Send_Data+0x52>
 8001282:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8001286:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800128a:	429a      	cmp	r2, r3
 800128c:	d159      	bne.n	8001342 <CSNP_Tx_Send_Data+0x106>
      // Wait for response with timeout handling
        uint32_t startTime = HAL_GetTick();
 800128e:	f000 fd15 	bl	8001cbc <HAL_GetTick>
 8001292:	64f8      	str	r0, [r7, #76]	@ 0x4c
        while (!CSNP_Rx_Wait(&parsed, filterConfig->FilterFIFOAssignment, nodeId, &payloadLength)) {
 8001294:	e00f      	b.n	80012b6 <CSNP_Tx_Send_Data+0x7a>
            if (HAL_GetTick() - startTime >= 100) {
 8001296:	f000 fd11 	bl	8001cbc <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b63      	cmp	r3, #99	@ 0x63
 80012a2:	d908      	bls.n	80012b6 <CSNP_Tx_Send_Data+0x7a>
                CSNP_Tx_Send(&frame, &CSNP_Tx_Mailbox);
 80012a4:	f107 0318 	add.w	r3, r7, #24
 80012a8:	4935      	ldr	r1, [pc, #212]	@ (8001380 <CSNP_Tx_Send_Data+0x144>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fe1a 	bl	8000ee4 <CSNP_Tx_Send>
                startTime = HAL_GetTick(); // Reset the timer
 80012b0:	f000 fd04 	bl	8001cbc <HAL_GetTick>
 80012b4:	64f8      	str	r0, [r7, #76]	@ 0x4c
        while (!CSNP_Rx_Wait(&parsed, filterConfig->FilterFIFOAssignment, nodeId, &payloadLength)) {
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	6919      	ldr	r1, [r3, #16]
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	f7ff fe56 	bl	8000f74 <CSNP_Rx_Wait>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f083 0301 	eor.w	r3, r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1e0      	bne.n	8001296 <CSNP_Tx_Send_Data+0x5a>
            }
        }
      // Check for overflow error
      if (parsed.data[0] == OVERFLOW) {
 80012d4:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d124      	bne.n	8001326 <CSNP_Tx_Send_Data+0xea>
        return CSNP_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e049      	b.n	8001374 <CSNP_Tx_Send_Data+0x138>
      }

      // Handle missing frame requests
      while (parsed.rtr == CAN_RTR_REMOTE) {
        // Reconstruct frame based on received block and offset
        CSNP_Tx_Create_Frame(&frame, (parsed.data[0] << 4) + parsed.data[1], dataBuffer, length);
 80012e0:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 80012ea:	4413      	add	r3, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f107 0018 	add.w	r0, r7, #24
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	f7ff ff2d 	bl	8001154 <CSNP_Tx_Create_Frame>
        CSNP_Tx_Send(&frame, &CSNP_Tx_Mailbox);
 80012fa:	f107 0318 	add.w	r3, r7, #24
 80012fe:	4920      	ldr	r1, [pc, #128]	@ (8001380 <CSNP_Tx_Send_Data+0x144>)
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff fdef 	bl	8000ee4 <CSNP_Tx_Send>

        // Wait for next response
        while (!CSNP_Rx_Wait(&parsed, filterConfig->FilterFIFOAssignment, nodeId, &payloadLength)) {
 8001306:	bf00      	nop
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	6919      	ldr	r1, [r3, #16]
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	f7ff fe2d 	bl	8000f74 <CSNP_Rx_Wait>
 800131a:	4603      	mov	r3, r0
 800131c:	f083 0301 	eor.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d1f0      	bne.n	8001308 <CSNP_Tx_Send_Data+0xcc>
      while (parsed.rtr == CAN_RTR_REMOTE) {
 8001326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001328:	2b02      	cmp	r3, #2
 800132a:	d0d9      	beq.n	80012e0 <CSNP_Tx_Send_Data+0xa4>
        }
      }
      // Update block and delay from received data
      block = parsed.data[1];
 800132c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001330:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
      delay = parsed.data[2];
 8001334:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001338:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      count = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    }
    count++;
 8001342:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001346:	3301      	adds	r3, #1
 8001348:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    HAL_Delay(delay);
 800134c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001350:	4618      	mov	r0, r3
 8001352:	f000 fcbf 	bl	8001cd4 <HAL_Delay>
  for (int i = 0; CSNP_Tx_Create_Frame(&frame, i, dataBuffer, length) != CSNP_FRAME_TYPE_ERROR; i++) {
 8001356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001358:	3301      	adds	r3, #1
 800135a:	653b      	str	r3, [r7, #80]	@ 0x50
 800135c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800135e:	f107 0018 	add.w	r0, r7, #24
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	f7ff fef5 	bl	8001154 <CSNP_Tx_Create_Frame>
 800136a:	4603      	mov	r3, r0
 800136c:	2b05      	cmp	r3, #5
 800136e:	f47f af7f 	bne.w	8001270 <CSNP_Tx_Send_Data+0x34>
  }
  return CSNP_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3758      	adds	r7, #88	@ 0x58
 8001378:	46bd      	mov	sp, r7
 800137a:	bdb0      	pop	{r4, r5, r7, pc}
 800137c:	200001f0 	.word	0x200001f0
 8001380:	20000208 	.word	0x20000208

08001384 <HAL_CAN_RxFifo0MsgPendingCallback>:
 *   hcan: Pointer to the CAN handle.
 *
 * Returns:
 *   None.
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
    if( HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO0, &CSNP_RxFifo0MsgHeader, CSNP_RxFifo0MsgData) != HAL_OK){
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800138e:	4a07      	ldr	r2, [pc, #28]	@ (80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8001390:	2100      	movs	r1, #0
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 ffd0 	bl	8002338 <HAL_CAN_GetRxMessage>
        // Handle error
    }
    CSNP_RxFifo0MsgReceived = true;
 8001398:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000244 	.word	0x20000244
 80013ac:	2000020c 	.word	0x2000020c
 80013b0:	20000254 	.word	0x20000254

080013b4 <HAL_CAN_RxFifo1MsgPendingCallback>:
 *
 * Returns:
 *   None.
 */

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
    if( HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO1, &CSNP_RxFifo1MsgHeader, CSNP_RxFifo1MsgData) != HAL_OK){
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x24>)
 80013be:	4a07      	ldr	r2, [pc, #28]	@ (80013dc <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 80013c0:	2101      	movs	r1, #1
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 ffb8 	bl	8002338 <HAL_CAN_GetRxMessage>
        // Handle error
    }
    CSNP_RxFifo0MsgReceived = true;
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	2000024c 	.word	0x2000024c
 80013dc:	20000228 	.word	0x20000228
 80013e0:	20000254 	.word	0x20000254

080013e4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013e4:	b5b0      	push	{r4, r5, r7, lr}
 80013e6:	f5ad 6d80 	sub.w	sp, sp, #1024	@ 0x400
 80013ea:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80013ec:	f000 fbfd 	bl	8001bea <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80013f0:	f000 f896 	bl	8001520 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80013f4:	f000 f95e 	bl	80016b4 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80013f8:	f000 f92c 	bl	8001654 <MX_USART2_UART_Init>
    MX_CAN1_Init();
 80013fc:	f000 f8f2 	bl	80015e4 <MX_CAN1_Init>
    /* USER CODE BEGIN 2 */

    CAN_FilterTypeDef canFilterConfig = { .FilterIdHigh = 0x0000, .FilterIdLow = 0x000, .FilterMaskIdHigh = 0x0000,
 8001400:	4b3b      	ldr	r3, [pc, #236]	@ (80014f0 <main+0x10c>)
 8001402:	f507 7476 	add.w	r4, r7, #984	@ 0x3d8
 8001406:	461d      	mov	r5, r3
 8001408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001410:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001414:	e884 0003 	stmia.w	r4, {r0, r1}
#ifdef RECEIVE
    CAN_TxHeaderTypeDef txHeader = { .StdId = NODE_2, .ExtId = 0, .IDE = 0, .RTR = 0, .DLC = 0, .TransmitGlobalTime =
            DISABLE };
#endif
#ifdef TRANSMIT
    CAN_TxHeaderTypeDef txHeader = { .StdId = NODE_1, .ExtId = 0, .IDE = 0, .RTR = 0, .DLC = 0, .TransmitGlobalTime =
 8001418:	f240 334b 	movw	r3, #843	@ 0x34b
 800141c:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 8001420:	2300      	movs	r3, #0
 8001422:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8
 800142c:	2300      	movs	r3, #0
 800142e:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 8001438:	2300      	movs	r3, #0
 800143a:	f887 33d4 	strb.w	r3, [r7, #980]	@ 0x3d4
            DISABLE };
#endif
    CSNP_Tx_Init(&txHeader);
 800143e:	f507 7370 	add.w	r3, r7, #960	@ 0x3c0
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fd38 	bl	8000eb8 <CSNP_Tx_Init>
    CSNP_Rx_Start_Msg_Pending(&canFilterConfig);
 8001448:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fd69 	bl	8000f24 <CSNP_Rx_Start_Msg_Pending>
    CSNP_Start(&hcan1);
 8001452:	4828      	ldr	r0, [pc, #160]	@ (80014f4 <main+0x110>)
 8001454:	f7ff fd20 	bl	8000e98 <CSNP_Start>

    myprintf("\r\n +--------------------------------------------------+\r\n");
 8001458:	4827      	ldr	r0, [pc, #156]	@ (80014f8 <main+0x114>)
 800145a:	f000 fb79 	bl	8001b50 <myprintf>
    myprintf(" | Distributed Control for Enhanced UAV Reliability |\r\n");
 800145e:	4827      	ldr	r0, [pc, #156]	@ (80014fc <main+0x118>)
 8001460:	f000 fb76 	bl	8001b50 <myprintf>
    myprintf(" |    Douglas Ryan Huston, Computer Engineering BS  |\r\n");
 8001464:	4826      	ldr	r0, [pc, #152]	@ (8001500 <main+0x11c>)
 8001466:	f000 fb73 	bl	8001b50 <myprintf>
    myprintf(" |     CPE 187, Fall 2024, Professor Sean Kennedy   |\r\n");
 800146a:	4826      	ldr	r0, [pc, #152]	@ (8001504 <main+0x120>)
 800146c:	f000 fb70 	bl	8001b50 <myprintf>
    myprintf(" |      California State University, Sacramento     |\r\n");
 8001470:	4825      	ldr	r0, [pc, #148]	@ (8001508 <main+0x124>)
 8001472:	f000 fb6d 	bl	8001b50 <myprintf>
    myprintf(" +--------------------------------------------------+\r\n");
 8001476:	4825      	ldr	r0, [pc, #148]	@ (800150c <main+0x128>)
 8001478:	f000 fb6a 	bl	8001b50 <myprintf>
        free(payload);
    }
//    myprintf("[SUCESS] This is the end my friend.\r\n");
#endif
#ifdef TRANSMIT
    myprintf("             Transmit System Initialized\r\n");
 800147c:	4824      	ldr	r0, [pc, #144]	@ (8001510 <main+0x12c>)
 800147e:	f000 fb67 	bl	8001b50 <myprintf>

    uint8_t dataBuffer[] = {"The world is not what it seems to the casual eye. There are depths in it, caverns of darkness, and unformed, chaotic entities that stir and yawn in the hidden places. We live on a narrow ledge between the utter blackness of the cosmos and the fathomless abysses of the earth. Our minds are poor things, flickering candles in the wind, and the slightest draft may snuff them out." };
 8001482:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001486:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800148a:	4a22      	ldr	r2, [pc, #136]	@ (8001514 <main+0x130>)
 800148c:	4618      	mov	r0, r3
 800148e:	4611      	mov	r1, r2
 8001490:	f240 137b 	movw	r3, #379	@ 0x17b
 8001494:	461a      	mov	r2, r3
 8001496:	f004 fb1e 	bl	8005ad6 <memcpy>
    uint8_t dataBuffer2[] = {"The abyss gazes also into us. We are not merely spectators of horror; we are its willing participants. In the darkest corners of our souls, we harbor the same capacity for cruelty, for indifference, for the cold, calculated destruction that we so often condemn in others. We are the architects of our own demise, the authors of our own tragedy. We cling to the illusion of free will, unaware that our choices are but ripples in a vast, indifferent ocean. In the end, we are all adrift, lost in a cosmic sea of suffering, eternally yearning for a salvation that may never come." };
 800149a:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800149e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80014a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001518 <main+0x134>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	4611      	mov	r1, r2
 80014a8:	f240 2341 	movw	r3, #577	@ 0x241
 80014ac:	461a      	mov	r2, r3
 80014ae:	f004 fb12 	bl	8005ad6 <memcpy>
    while(1){

        CSNP_Tx_Send_Data(NODE_2, dataBuffer, sizeof(dataBuffer), &canFilterConfig);
 80014b2:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80014b6:	f507 7111 	add.w	r1, r7, #580	@ 0x244
 80014ba:	f240 127b 	movw	r2, #379	@ 0x17b
 80014be:	f240 1039 	movw	r0, #313	@ 0x139
 80014c2:	f7ff febb 	bl	800123c <CSNP_Tx_Send_Data>

        myprintf("[SUCESS] Sent %d byte payload\r\n", sizeof(dataBuffer));
 80014c6:	f240 117b 	movw	r1, #379	@ 0x17b
 80014ca:	4814      	ldr	r0, [pc, #80]	@ (800151c <main+0x138>)
 80014cc:	f000 fb40 	bl	8001b50 <myprintf>
        //HAL_Delay(50);
        CSNP_Tx_Send_Data(NODE_2, dataBuffer2, sizeof(dataBuffer2), &canFilterConfig);
 80014d0:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80014d4:	4639      	mov	r1, r7
 80014d6:	f240 2241 	movw	r2, #577	@ 0x241
 80014da:	f240 1039 	movw	r0, #313	@ 0x139
 80014de:	f7ff fead 	bl	800123c <CSNP_Tx_Send_Data>

        myprintf("[SUCESS] Sent %d byte payload\r\n", sizeof(dataBuffer2));
 80014e2:	f240 2141 	movw	r1, #577	@ 0x241
 80014e6:	480d      	ldr	r0, [pc, #52]	@ (800151c <main+0x138>)
 80014e8:	f000 fb32 	bl	8001b50 <myprintf>
        CSNP_Tx_Send_Data(NODE_2, dataBuffer, sizeof(dataBuffer), &canFilterConfig);
 80014ec:	bf00      	nop
 80014ee:	e7e0      	b.n	80014b2 <main+0xce>
 80014f0:	08007b40 	.word	0x08007b40
 80014f4:	20000258 	.word	0x20000258
 80014f8:	080079a0 	.word	0x080079a0
 80014fc:	080079dc 	.word	0x080079dc
 8001500:	08007a14 	.word	0x08007a14
 8001504:	08007a4c 	.word	0x08007a4c
 8001508:	08007a84 	.word	0x08007a84
 800150c:	08007abc 	.word	0x08007abc
 8001510:	08007af4 	.word	0x08007af4
 8001514:	08007b68 	.word	0x08007b68
 8001518:	08007ce4 	.word	0x08007ce4
 800151c:	08007b20 	.word	0x08007b20

08001520 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b096      	sub	sp, #88	@ 0x58
 8001524:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	2244      	movs	r2, #68	@ 0x44
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f004 fa42 	bl	80059b8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001534:	463b      	mov	r3, r7
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    if( HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK){
 8001542:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001546:	f001 fd17 	bl	8002f78 <HAL_PWREx_ControlVoltageScaling>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0x34>
        Error_Handler();
 8001550:	f000 f8fa 	bl	8001748 <Error_Handler>
    }

    /** Configure LSE Drive Capability
     */
    HAL_PWR_EnableBkUpAccess();
 8001554:	f001 fcf2 	bl	8002f3c <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001558:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <SystemClock_Config+0xc0>)
 800155a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800155e:	4a20      	ldr	r2, [pc, #128]	@ (80015e0 <SystemClock_Config+0xc0>)
 8001560:	f023 0318 	bic.w	r3, r3, #24
 8001564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8001568:	2314      	movs	r3, #20
 800156a:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800156c:	2301      	movs	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001570:	2301      	movs	r3, #1
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.MSICalibrationValue = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001578:	2360      	movs	r3, #96	@ 0x60
 800157a:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157c:	2302      	movs	r3, #2
 800157e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001580:	2301      	movs	r3, #1
 8001582:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLM = 1;
 8001584:	2301      	movs	r3, #1
 8001586:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLN = 16;
 8001588:	2310      	movs	r3, #16
 800158a:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800158c:	2307      	movs	r3, #7
 800158e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001590:	2302      	movs	r3, #2
 8001592:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001594:	2302      	movs	r3, #2
 8001596:	657b      	str	r3, [r7, #84]	@ 0x54
    if( HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK){
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4618      	mov	r0, r3
 800159e:	f001 fd41 	bl	8003024 <HAL_RCC_OscConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0x8c>
        Error_Handler();
 80015a8:	f000 f8ce 	bl	8001748 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015ac:	230f      	movs	r3, #15
 80015ae:	603b      	str	r3, [r7, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b0:	2303      	movs	r3, #3
 80015b2:	607b      	str	r3, [r7, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]

    if( HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK){
 80015c0:	463b      	mov	r3, r7
 80015c2:	2101      	movs	r1, #1
 80015c4:	4618      	mov	r0, r3
 80015c6:	f002 f941 	bl	800384c <HAL_RCC_ClockConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0xb4>
        Error_Handler();
 80015d0:	f000 f8ba 	bl	8001748 <Error_Handler>
    }

    /** Enable MSI Auto calibration
     */
    HAL_RCCEx_EnableMSIPLLMode();
 80015d4:	f002 fd54 	bl	8004080 <HAL_RCCEx_EnableMSIPLLMode>
}
 80015d8:	bf00      	nop
 80015da:	3758      	adds	r7, #88	@ 0x58
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000

080015e4 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
    /* USER CODE END CAN1_Init 0 */

    /* USER CODE BEGIN CAN1_Init 1 */

    /* USER CODE END CAN1_Init 1 */
    hcan1.Instance = CAN1;
 80015e8:	4b18      	ldr	r3, [pc, #96]	@ (800164c <MX_CAN1_Init+0x68>)
 80015ea:	4a19      	ldr	r2, [pc, #100]	@ (8001650 <MX_CAN1_Init+0x6c>)
 80015ec:	601a      	str	r2, [r3, #0]
    hcan1.Init.Prescaler = 4;
 80015ee:	4b17      	ldr	r3, [pc, #92]	@ (800164c <MX_CAN1_Init+0x68>)
 80015f0:	2204      	movs	r2, #4
 80015f2:	605a      	str	r2, [r3, #4]
    hcan1.Init.Mode = CAN_MODE_NORMAL;
 80015f4:	4b15      	ldr	r3, [pc, #84]	@ (800164c <MX_CAN1_Init+0x68>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
    hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80015fa:	4b14      	ldr	r3, [pc, #80]	@ (800164c <MX_CAN1_Init+0x68>)
 80015fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001600:	60da      	str	r2, [r3, #12]
    hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8001602:	4b12      	ldr	r3, [pc, #72]	@ (800164c <MX_CAN1_Init+0x68>)
 8001604:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001608:	611a      	str	r2, [r3, #16]
    hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <MX_CAN1_Init+0x68>)
 800160c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001610:	615a      	str	r2, [r3, #20]
    hcan1.Init.TimeTriggeredMode = DISABLE;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_CAN1_Init+0x68>)
 8001614:	2200      	movs	r2, #0
 8001616:	761a      	strb	r2, [r3, #24]
    hcan1.Init.AutoBusOff = ENABLE;
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MX_CAN1_Init+0x68>)
 800161a:	2201      	movs	r2, #1
 800161c:	765a      	strb	r2, [r3, #25]
    hcan1.Init.AutoWakeUp = DISABLE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <MX_CAN1_Init+0x68>)
 8001620:	2200      	movs	r2, #0
 8001622:	769a      	strb	r2, [r3, #26]
    hcan1.Init.AutoRetransmission = ENABLE;
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_CAN1_Init+0x68>)
 8001626:	2201      	movs	r2, #1
 8001628:	76da      	strb	r2, [r3, #27]
    hcan1.Init.ReceiveFifoLocked = DISABLE;
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <MX_CAN1_Init+0x68>)
 800162c:	2200      	movs	r2, #0
 800162e:	771a      	strb	r2, [r3, #28]
    hcan1.Init.TransmitFifoPriority = DISABLE;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <MX_CAN1_Init+0x68>)
 8001632:	2200      	movs	r2, #0
 8001634:	775a      	strb	r2, [r3, #29]
    if( HAL_CAN_Init(&hcan1) != HAL_OK){
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_CAN1_Init+0x68>)
 8001638:	f000 fb70 	bl	8001d1c <HAL_CAN_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_CAN1_Init+0x62>
        Error_Handler();
 8001642:	f000 f881 	bl	8001748 <Error_Handler>
    }
    /* USER CODE BEGIN CAN1_Init 2 */

    /* USER CODE END CAN1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000258 	.word	0x20000258
 8001650:	40006400 	.word	0x40006400

08001654 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
    /* USER CODE END USART2_Init 0 */

    /* USER CODE BEGIN USART2_Init 1 */

    /* USER CODE END USART2_Init 1 */
    huart2.Instance = USART2;
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <MX_USART2_UART_Init+0x58>)
 800165a:	4a15      	ldr	r2, [pc, #84]	@ (80016b0 <MX_USART2_UART_Init+0x5c>)
 800165c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 800165e:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <MX_USART2_UART_Init+0x58>)
 8001660:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001664:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001666:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <MX_USART2_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800166c:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <MX_USART2_UART_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8001672:	4b0e      	ldr	r3, [pc, #56]	@ (80016ac <MX_USART2_UART_Init+0x58>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <MX_USART2_UART_Init+0x58>)
 800167a:	220c      	movs	r2, #12
 800167c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167e:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <MX_USART2_UART_Init+0x58>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001684:	4b09      	ldr	r3, [pc, #36]	@ (80016ac <MX_USART2_UART_Init+0x58>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168a:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <MX_USART2_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001690:	4b06      	ldr	r3, [pc, #24]	@ (80016ac <MX_USART2_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24
    if( HAL_UART_Init(&huart2) != HAL_OK){
 8001696:	4805      	ldr	r0, [pc, #20]	@ (80016ac <MX_USART2_UART_Init+0x58>)
 8001698:	f002 fdf4 	bl	8004284 <HAL_UART_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_USART2_UART_Init+0x52>
        Error_Handler();
 80016a2:	f000 f851 	bl	8001748 <Error_Handler>
    }
    /* USER CODE BEGIN USART2_Init 2 */

    /* USER CODE END USART2_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000280 	.word	0x20000280
 80016b0:	40004400 	.word	0x40004400

080016b4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <MX_GPIO_Init+0x8c>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001740 <MX_GPIO_Init+0x8c>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001740 <MX_GPIO_Init+0x8c>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <MX_GPIO_Init+0x8c>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	4a16      	ldr	r2, [pc, #88]	@ (8001740 <MX_GPIO_Init+0x8c>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ee:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <MX_GPIO_Init+0x8c>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <MX_GPIO_Init+0x8c>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	4a10      	ldr	r2, [pc, #64]	@ (8001740 <MX_GPIO_Init+0x8c>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <MX_GPIO_Init+0x8c>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	2108      	movs	r1, #8
 8001716:	480b      	ldr	r0, [pc, #44]	@ (8001744 <MX_GPIO_Init+0x90>)
 8001718:	f001 fbf8 	bl	8002f0c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : LD3_Pin */
    GPIO_InitStruct.Pin = LD3_Pin;
 800171c:	2308      	movs	r3, #8
 800171e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	2301      	movs	r3, #1
 8001722:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4619      	mov	r1, r3
 8001732:	4804      	ldr	r0, [pc, #16]	@ (8001744 <MX_GPIO_Init+0x90>)
 8001734:	f001 fa80 	bl	8002c38 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001738:	bf00      	nop
 800173a:	3720      	adds	r7, #32
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	48000400 	.word	0x48000400

08001748 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800174c:	b672      	cpsid	i
}
 800174e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while( 1){
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <Error_Handler+0x8>

08001754 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN MspInit 0 */

    /* USER CODE END MspInit 0 */

    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175a:	4b0f      	ldr	r3, [pc, #60]	@ (8001798 <HAL_MspInit+0x44>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175e:	4a0e      	ldr	r2, [pc, #56]	@ (8001798 <HAL_MspInit+0x44>)
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	6613      	str	r3, [r2, #96]	@ 0x60
 8001766:	4b0c      	ldr	r3, [pc, #48]	@ (8001798 <HAL_MspInit+0x44>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	607b      	str	r3, [r7, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <HAL_MspInit+0x44>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001776:	4a08      	ldr	r2, [pc, #32]	@ (8001798 <HAL_MspInit+0x44>)
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800177c:	6593      	str	r3, [r2, #88]	@ 0x58
 800177e:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <HAL_MspInit+0x44>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]
    /* System interrupt init*/

    /* USER CODE BEGIN MspInit 1 */

    /* USER CODE END MspInit 1 */
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000

0800179c <HAL_CAN_MspInit>:
 * @brief CAN MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hcan: CAN handle pointer
 * @retval None
 */
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
    if( hcan->Instance == CAN1){
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a20      	ldr	r2, [pc, #128]	@ (800183c <HAL_CAN_MspInit+0xa0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d139      	bne.n	8001832 <HAL_CAN_MspInit+0x96>
        /* USER CODE BEGIN CAN1_MspInit 0 */

        /* USER CODE END CAN1_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_CAN1_CLK_ENABLE();
 80017be:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <HAL_CAN_MspInit+0xa4>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001840 <HAL_CAN_MspInit+0xa4>)
 80017c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <HAL_CAN_MspInit+0xa4>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <HAL_CAN_MspInit+0xa4>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017da:	4a19      	ldr	r2, [pc, #100]	@ (8001840 <HAL_CAN_MspInit+0xa4>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e2:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <HAL_CAN_MspInit+0xa4>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
        /**CAN1 GPIO Configuration
         PA11     ------> CAN1_RX
         PA12     ------> CAN1_TX
         */
        GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 80017ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80017f2:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	61bb      	str	r3, [r7, #24]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	623b      	str	r3, [r7, #32]
        GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001800:	2309      	movs	r3, #9
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180e:	f001 fa13 	bl	8002c38 <HAL_GPIO_Init>

        /* CAN1 interrupt Init */
        HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	2014      	movs	r0, #20
 8001818:	f001 f9d7 	bl	8002bca <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800181c:	2014      	movs	r0, #20
 800181e:	f001 f9f0 	bl	8002c02 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	2015      	movs	r0, #21
 8001828:	f001 f9cf 	bl	8002bca <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800182c:	2015      	movs	r0, #21
 800182e:	f001 f9e8 	bl	8002c02 <HAL_NVIC_EnableIRQ>

        /* USER CODE END CAN1_MspInit 1 */

    }

}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	@ 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40006400 	.word	0x40006400
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b09e      	sub	sp, #120	@ 0x78
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800184c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	2254      	movs	r2, #84	@ 0x54
 8001862:	2100      	movs	r1, #0
 8001864:	4618      	mov	r0, r3
 8001866:	f004 f8a7 	bl	80059b8 <memset>
    if( huart->Instance == USART2){
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a28      	ldr	r2, [pc, #160]	@ (8001910 <HAL_UART_MspInit+0xcc>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d148      	bne.n	8001906 <HAL_UART_MspInit+0xc2>

        /* USER CODE END USART2_MspInit 0 */

        /** Initializes the peripherals clock
         */
        PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001874:	2302      	movs	r3, #2
 8001876:	613b      	str	r3, [r7, #16]
        PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001878:	2300      	movs	r3, #0
 800187a:	637b      	str	r3, [r7, #52]	@ 0x34
        if( HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK){
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	4618      	mov	r0, r3
 8001882:	f002 fa07 	bl	8003c94 <HAL_RCCEx_PeriphCLKConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_UART_MspInit+0x4c>
            Error_Handler();
 800188c:	f7ff ff5c 	bl	8001748 <Error_Handler>
        }

        /* Peripheral clock enable */
        __HAL_RCC_USART2_CLK_ENABLE();
 8001890:	4b20      	ldr	r3, [pc, #128]	@ (8001914 <HAL_UART_MspInit+0xd0>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001894:	4a1f      	ldr	r2, [pc, #124]	@ (8001914 <HAL_UART_MspInit+0xd0>)
 8001896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800189a:	6593      	str	r3, [r2, #88]	@ 0x58
 800189c:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <HAL_UART_MspInit+0xd0>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <HAL_UART_MspInit+0xd0>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ac:	4a19      	ldr	r2, [pc, #100]	@ (8001914 <HAL_UART_MspInit+0xd0>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b4:	4b17      	ldr	r3, [pc, #92]	@ (8001914 <HAL_UART_MspInit+0xd0>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
        /**USART2 GPIO Configuration
         PA2     ------> USART2_TX
         PA15 (JTDI)     ------> USART2_RX
         */
        GPIO_InitStruct.Pin = VCP_TX_Pin;
 80018c0:	2304      	movs	r3, #4
 80018c2:	667b      	str	r3, [r7, #100]	@ 0x64
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	66bb      	str	r3, [r7, #104]	@ 0x68
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	673b      	str	r3, [r7, #112]	@ 0x70
        GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018d0:	2307      	movs	r3, #7
 80018d2:	677b      	str	r3, [r7, #116]	@ 0x74
        HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018d8:	4619      	mov	r1, r3
 80018da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018de:	f001 f9ab 	bl	8002c38 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = VCP_RX_Pin;
 80018e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018e6:	667b      	str	r3, [r7, #100]	@ 0x64
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	66bb      	str	r3, [r7, #104]	@ 0x68
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f0:	2303      	movs	r3, #3
 80018f2:	673b      	str	r3, [r7, #112]	@ 0x70
        GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80018f4:	2303      	movs	r3, #3
 80018f6:	677b      	str	r3, [r7, #116]	@ 0x74
        HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80018fc:	4619      	mov	r1, r3
 80018fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001902:	f001 f999 	bl	8002c38 <HAL_GPIO_Init>

        /* USER CODE END USART2_MspInit 1 */

    }

}
 8001906:	bf00      	nop
 8001908:	3778      	adds	r7, #120	@ 0x78
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40004400 	.word	0x40004400
 8001914:	40021000 	.word	0x40021000

08001918 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while( 1){
 800191c:	bf00      	nop
 800191e:	e7fd      	b.n	800191c <NMI_Handler+0x4>

08001920 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while( 1){
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while( 1){
 800192c:	bf00      	nop
 800192e:	e7fd      	b.n	800192c <MemManage_Handler+0x4>

08001930 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while( 1){
 8001934:	bf00      	nop
 8001936:	e7fd      	b.n	8001934 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while( 1){
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <UsageFault_Handler+0x4>

08001940 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 800196a:	b580      	push	{r7, lr}
 800196c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 800196e:	f000 f991 	bl	8001c94 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <CAN1_RX0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles CAN1 RX0 interrupt.
 */
void CAN1_RX0_IRQHandler(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

    /* USER CODE END CAN1_RX0_IRQn 0 */
    HAL_CAN_IRQHandler(&hcan1);
 800197c:	4802      	ldr	r0, [pc, #8]	@ (8001988 <CAN1_RX0_IRQHandler+0x10>)
 800197e:	f000 fe23 	bl	80025c8 <HAL_CAN_IRQHandler>
    /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

    /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000258 	.word	0x20000258

0800198c <CAN1_RX1_IRQHandler>:

/**
 * @brief This function handles CAN1 RX1 interrupt.
 */
void CAN1_RX1_IRQHandler(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

    /* USER CODE END CAN1_RX1_IRQn 0 */
    HAL_CAN_IRQHandler(&hcan1);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <CAN1_RX1_IRQHandler+0x10>)
 8001992:	f000 fe19 	bl	80025c8 <HAL_CAN_IRQHandler>
    /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

    /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000258 	.word	0x20000258

080019a0 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
    return 1;
 80019a4:	2301      	movs	r3, #1
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <_kill>:

int _kill(int pid, int sig) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
    (void) pid;
    (void) sig;
    errno = EINVAL;
 80019ba:	f004 f85f 	bl	8005a7c <__errno>
 80019be:	4603      	mov	r3, r0
 80019c0:	2216      	movs	r2, #22
 80019c2:	601a      	str	r2, [r3, #0]
    return -1;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_exit>:

void _exit(int status) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
    _kill(status, -1);
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ffe7 	bl	80019b0 <_kill>
    while( 1){
 80019e2:	bf00      	nop
 80019e4:	e7fd      	b.n	80019e2 <_exit+0x12>

080019e6 <_read>:
    } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	60f8      	str	r0, [r7, #12]
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
    (void) file;
    int DataIdx;

    for( DataIdx = 0; DataIdx < len; DataIdx++){
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e00a      	b.n	8001a0e <_read+0x28>
        *ptr++ = __io_getchar();
 80019f8:	f3af 8000 	nop.w
 80019fc:	4601      	mov	r1, r0
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1c5a      	adds	r2, r3, #1
 8001a02:	60ba      	str	r2, [r7, #8]
 8001a04:	b2ca      	uxtb	r2, r1
 8001a06:	701a      	strb	r2, [r3, #0]
    for( DataIdx = 0; DataIdx < len; DataIdx++){
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	697a      	ldr	r2, [r7, #20]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	dbf0      	blt.n	80019f8 <_read+0x12>
    }

    return len;
 8001a16:	687b      	ldr	r3, [r7, #4]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
    (void) file;
    int DataIdx;

    for( DataIdx = 0; DataIdx < len; DataIdx++){
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	e009      	b.n	8001a46 <_write+0x26>
        __io_putchar(*ptr++);
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	60ba      	str	r2, [r7, #8]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f3af 8000 	nop.w
    for( DataIdx = 0; DataIdx < len; DataIdx++){
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	3301      	adds	r3, #1
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	dbf1      	blt.n	8001a32 <_write+0x12>
    }
    return len;
 8001a4e:	687b      	ldr	r3, [r7, #4]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <_close>:

int _close(int file) {
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
    (void) file;
    return -1;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
    (void) file;
    st->st_mode = S_IFCHR;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a80:	605a      	str	r2, [r3, #4]
    return 0;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <_isatty>:

int _isatty(int file) {
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
    (void) file;
    return 1;
 8001a98:	2301      	movs	r3, #1
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001aa6:	b480      	push	{r7}
 8001aa8:	b085      	sub	sp, #20
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
    (void) file;
    (void) ptr;
    (void) dir;
    return 0;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
    extern uint8_t _end; /* Symbol defined in the linker script */
    extern uint8_t _estack; /* Symbol defined in the linker script */
    extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
    const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8001ac8:	4a14      	ldr	r2, [pc, #80]	@ (8001b1c <_sbrk+0x5c>)
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <_sbrk+0x60>)
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	617b      	str	r3, [r7, #20]
    const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	613b      	str	r3, [r7, #16]
    uint8_t *prev_heap_end;

    /* Initialize heap end at first call */
    if( NULL == __sbrk_heap_end){
 8001ad4:	4b13      	ldr	r3, [pc, #76]	@ (8001b24 <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d102      	bne.n	8001ae2 <_sbrk+0x22>
        __sbrk_heap_end = &_end;
 8001adc:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <_sbrk+0x64>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	@ (8001b28 <_sbrk+0x68>)
 8001ae0:	601a      	str	r2, [r3, #0]
    }

    /* Protect heap from growing into the reserved MSP stack */
    if( __sbrk_heap_end + incr > max_heap){
 8001ae2:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <_sbrk+0x64>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d207      	bcs.n	8001b00 <_sbrk+0x40>
        errno = ENOMEM;
 8001af0:	f003 ffc4 	bl	8005a7c <__errno>
 8001af4:	4603      	mov	r3, r0
 8001af6:	220c      	movs	r2, #12
 8001af8:	601a      	str	r2, [r3, #0]
        return (void*) -1;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
 8001afe:	e009      	b.n	8001b14 <_sbrk+0x54>
    }

    prev_heap_end = __sbrk_heap_end;
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	60fb      	str	r3, [r7, #12]
    __sbrk_heap_end += incr;
 8001b06:	4b07      	ldr	r3, [pc, #28]	@ (8001b24 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	4a05      	ldr	r2, [pc, #20]	@ (8001b24 <_sbrk+0x64>)
 8001b10:	6013      	str	r3, [r2, #0]

    return (void*) prev_heap_end;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	2000c000 	.word	0x2000c000
 8001b20:	00000400 	.word	0x00000400
 8001b24:	20000308 	.word	0x20000308
 8001b28:	20001460 	.word	0x20001460

08001b2c <SystemInit>:
/**
 * @brief  Setup the microcontroller system.
 * @retval None
 */

void SystemInit(void) {
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

    /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 20U) | (3UL << 22U)); /* set CP10 and CP11 Full Access */
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <SystemInit+0x20>)
 8001b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b36:	4a05      	ldr	r2, [pc, #20]	@ (8001b4c <SystemInit+0x20>)
 8001b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <myprintf>:
 *      Author: Ryan
 */

#include "uart.h"

void myprintf(const char *fmt, ...) {
 8001b50:	b40f      	push	{r0, r1, r2, r3}
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
    static char buffer[4095]; // Static buffer to store the formatted string
    // Initialize variable arguments list
    va_list args;
    va_start(args, fmt);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	607b      	str	r3, [r7, #4]
    // Format the string into the buffer
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8001b66:	480a      	ldr	r0, [pc, #40]	@ (8001b90 <myprintf+0x40>)
 8001b68:	f003 ff18 	bl	800599c <vsniprintf>
    // Clean up variable arguments list
    va_end(args);
    // Transmit the formatted string to UART2
    HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY); // Use HAL_MAX_DELAY for blocking transmission
 8001b6c:	4808      	ldr	r0, [pc, #32]	@ (8001b90 <myprintf+0x40>)
 8001b6e:	f7fe fb7f 	bl	8000270 <strlen>
 8001b72:	4603      	mov	r3, r0
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	4905      	ldr	r1, [pc, #20]	@ (8001b90 <myprintf+0x40>)
 8001b7c:	4805      	ldr	r0, [pc, #20]	@ (8001b94 <myprintf+0x44>)
 8001b7e:	f002 fbcf 	bl	8004320 <HAL_UART_Transmit>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b8c:	b004      	add	sp, #16
 8001b8e:	4770      	bx	lr
 8001b90:	2000030c 	.word	0x2000030c
 8001b94:	20000280 	.word	0x20000280

08001b98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b9c:	f7ff ffc6 	bl	8001b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba0:	480c      	ldr	r0, [pc, #48]	@ (8001bd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ba2:	490d      	ldr	r1, [pc, #52]	@ (8001bd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bdc <LoopForever+0xe>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba8:	e002      	b.n	8001bb0 <LoopCopyDataInit>

08001baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bae:	3304      	adds	r3, #4

08001bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb4:	d3f9      	bcc.n	8001baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8001be4 <LoopForever+0x16>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bbc:	e001      	b.n	8001bc2 <LoopFillZerobss>

08001bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc0:	3204      	adds	r2, #4

08001bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc4:	d3fb      	bcc.n	8001bbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bc6:	f003 ff5f 	bl	8005a88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bca:	f7ff fc0b 	bl	80013e4 <main>

08001bce <LoopForever>:

LoopForever:
    b LoopForever
 8001bce:	e7fe      	b.n	8001bce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bd0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001bdc:	080082f0 	.word	0x080082f0
  ldr r2, =_sbss
 8001be0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001be4:	2000145c 	.word	0x2000145c

08001be8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC1_IRQHandler>

08001bea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f000 ffdd 	bl	8002bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f000 f80e 	bl	8001c1c <HAL_InitTick>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	71fb      	strb	r3, [r7, #7]
 8001c0a:	e001      	b.n	8001c10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c0c:	f7ff fda2 	bl	8001754 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c10:	79fb      	ldrb	r3, [r7, #7]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c28:	4b17      	ldr	r3, [pc, #92]	@ (8001c88 <HAL_InitTick+0x6c>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d023      	beq.n	8001c78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c30:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <HAL_InitTick+0x70>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <HAL_InitTick+0x6c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 ffe9 	bl	8002c1e <HAL_SYSTICK_Config>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10f      	bne.n	8001c72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b0f      	cmp	r3, #15
 8001c56:	d809      	bhi.n	8001c6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f000 ffb3 	bl	8002bca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c64:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <HAL_InitTick+0x74>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e007      	b.n	8001c7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	e004      	b.n	8001c7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
 8001c76:	e001      	b.n	8001c7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <HAL_IncTick+0x20>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <HAL_IncTick+0x24>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	@ (8001cb8 <HAL_IncTick+0x24>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	2000130c 	.word	0x2000130c

08001cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	@ (8001cd0 <HAL_GetTick+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	2000130c 	.word	0x2000130c

08001cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cdc:	f7ff ffee 	bl	8001cbc <HAL_GetTick>
 8001ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cec:	d005      	beq.n	8001cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <HAL_Delay+0x44>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cfa:	bf00      	nop
 8001cfc:	f7ff ffde 	bl	8001cbc <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d8f7      	bhi.n	8001cfc <HAL_Delay+0x28>
  {
  }
}
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20000008 	.word	0x20000008

08001d1c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e0ed      	b.n	8001f0a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d102      	bne.n	8001d40 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fd2e 	bl	800179c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d50:	f7ff ffb4 	bl	8001cbc <HAL_GetTick>
 8001d54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d56:	e012      	b.n	8001d7e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d58:	f7ff ffb0 	bl	8001cbc <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b0a      	cmp	r3, #10
 8001d64:	d90b      	bls.n	8001d7e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2205      	movs	r2, #5
 8001d76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0c5      	b.n	8001f0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0e5      	beq.n	8001d58 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0202 	bic.w	r2, r2, #2
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d9c:	f7ff ff8e 	bl	8001cbc <HAL_GetTick>
 8001da0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001da2:	e012      	b.n	8001dca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da4:	f7ff ff8a 	bl	8001cbc <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b0a      	cmp	r3, #10
 8001db0:	d90b      	bls.n	8001dca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2205      	movs	r2, #5
 8001dc2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e09f      	b.n	8001f0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1e5      	bne.n	8001da4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7e1b      	ldrb	r3, [r3, #24]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d108      	bne.n	8001df2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	e007      	b.n	8001e02 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7e5b      	ldrb	r3, [r3, #25]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d108      	bne.n	8001e1c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e007      	b.n	8001e2c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7e9b      	ldrb	r3, [r3, #26]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d108      	bne.n	8001e46 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0220 	orr.w	r2, r2, #32
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e007      	b.n	8001e56 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0220 	bic.w	r2, r2, #32
 8001e54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7edb      	ldrb	r3, [r3, #27]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d108      	bne.n	8001e70 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0210 	bic.w	r2, r2, #16
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	e007      	b.n	8001e80 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0210 	orr.w	r2, r2, #16
 8001e7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7f1b      	ldrb	r3, [r3, #28]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d108      	bne.n	8001e9a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0208 	orr.w	r2, r2, #8
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e007      	b.n	8001eaa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 0208 	bic.w	r2, r2, #8
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7f5b      	ldrb	r3, [r3, #29]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d108      	bne.n	8001ec4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f042 0204 	orr.w	r2, r2, #4
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	e007      	b.n	8001ed4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0204 	bic.w	r2, r2, #4
 8001ed2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	ea42 0103 	orr.w	r1, r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	1e5a      	subs	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b087      	sub	sp, #28
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f28:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f2a:	7cfb      	ldrb	r3, [r7, #19]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d003      	beq.n	8001f38 <HAL_CAN_ConfigFilter+0x26>
 8001f30:	7cfb      	ldrb	r3, [r7, #19]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	f040 80aa 	bne.w	800208c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f3e:	f043 0201 	orr.w	r2, r3, #1
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	2201      	movs	r2, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	401a      	ands	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d123      	bne.n	8001fba <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	401a      	ands	r2, r3
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f94:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3248      	adds	r2, #72	@ 0x48
 8001f9a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fb0:	6979      	ldr	r1, [r7, #20]
 8001fb2:	3348      	adds	r3, #72	@ 0x48
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	440b      	add	r3, r1
 8001fb8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d122      	bne.n	8002008 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fe2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3248      	adds	r2, #72	@ 0x48
 8001fe8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ffc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ffe:	6979      	ldr	r1, [r7, #20]
 8002000:	3348      	adds	r3, #72	@ 0x48
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	440b      	add	r3, r1
 8002006:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	43db      	mvns	r3, r3
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002022:	e007      	b.n	8002034 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	431a      	orrs	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d109      	bne.n	8002050 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	43db      	mvns	r3, r3
 8002046:	401a      	ands	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800204e:	e007      	b.n	8002060 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	431a      	orrs	r2, r3
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d107      	bne.n	8002078 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	431a      	orrs	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800207e:	f023 0201 	bic.w	r2, r3, #1
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	e006      	b.n	800209a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
  }
}
 800209a:	4618      	mov	r0, r3
 800209c:	371c      	adds	r7, #28
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d12e      	bne.n	8002118 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2202      	movs	r2, #2
 80020be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0201 	bic.w	r2, r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020d2:	f7ff fdf3 	bl	8001cbc <HAL_GetTick>
 80020d6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020d8:	e012      	b.n	8002100 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020da:	f7ff fdef 	bl	8001cbc <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b0a      	cmp	r3, #10
 80020e6:	d90b      	bls.n	8002100 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2205      	movs	r2, #5
 80020f8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e012      	b.n	8002126 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1e5      	bne.n	80020da <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	e006      	b.n	8002126 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
  }
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800212e:	b480      	push	{r7}
 8002130:	b089      	sub	sp, #36	@ 0x24
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002142:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800214c:	7ffb      	ldrb	r3, [r7, #31]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d003      	beq.n	800215a <HAL_CAN_AddTxMessage+0x2c>
 8002152:	7ffb      	ldrb	r3, [r7, #31]
 8002154:	2b02      	cmp	r3, #2
 8002156:	f040 80ad 	bne.w	80022b4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10a      	bne.n	800217a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800216a:	2b00      	cmp	r3, #0
 800216c:	d105      	bne.n	800217a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8095 	beq.w	80022a4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	0e1b      	lsrs	r3, r3, #24
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002184:	2201      	movs	r2, #1
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	409a      	lsls	r2, r3
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10d      	bne.n	80021b2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021a0:	68f9      	ldr	r1, [r7, #12]
 80021a2:	6809      	ldr	r1, [r1, #0]
 80021a4:	431a      	orrs	r2, r3
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3318      	adds	r3, #24
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	440b      	add	r3, r1
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e00f      	b.n	80021d2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021bc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021c6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3318      	adds	r3, #24
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	440b      	add	r3, r1
 80021d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6819      	ldr	r1, [r3, #0]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	3318      	adds	r3, #24
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	440b      	add	r3, r1
 80021e2:	3304      	adds	r3, #4
 80021e4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	7d1b      	ldrb	r3, [r3, #20]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d111      	bne.n	8002212 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3318      	adds	r3, #24
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	4413      	add	r3, r2
 80021fa:	3304      	adds	r3, #4
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	6811      	ldr	r1, [r2, #0]
 8002202:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3318      	adds	r3, #24
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	440b      	add	r3, r1
 800220e:	3304      	adds	r3, #4
 8002210:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3307      	adds	r3, #7
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	061a      	lsls	r2, r3, #24
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3306      	adds	r3, #6
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3305      	adds	r3, #5
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	4313      	orrs	r3, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	3204      	adds	r2, #4
 8002232:	7812      	ldrb	r2, [r2, #0]
 8002234:	4610      	mov	r0, r2
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	6811      	ldr	r1, [r2, #0]
 800223a:	ea43 0200 	orr.w	r2, r3, r0
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	440b      	add	r3, r1
 8002244:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002248:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3303      	adds	r3, #3
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	061a      	lsls	r2, r3, #24
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3302      	adds	r3, #2
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3301      	adds	r3, #1
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	4313      	orrs	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	7812      	ldrb	r2, [r2, #0]
 800226a:	4610      	mov	r0, r2
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	6811      	ldr	r1, [r2, #0]
 8002270:	ea43 0200 	orr.w	r2, r3, r0
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	440b      	add	r3, r1
 800227a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800227e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	3318      	adds	r3, #24
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	4413      	add	r3, r2
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	6811      	ldr	r1, [r2, #0]
 8002292:	f043 0201 	orr.w	r2, r3, #1
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	3318      	adds	r3, #24
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	440b      	add	r3, r1
 800229e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	e00e      	b.n	80022c2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e006      	b.n	80022c2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
  }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3724      	adds	r7, #36	@ 0x24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b085      	sub	sp, #20
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80022e2:	7afb      	ldrb	r3, [r7, #11]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d002      	beq.n	80022ee <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80022e8:	7afb      	ldrb	r3, [r7, #11]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d11d      	bne.n	800232a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3301      	adds	r3, #1
 8002300:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	3301      	adds	r3, #1
 8002314:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3301      	adds	r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800232a:	68fb      	ldr	r3, [r7, #12]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 3020 	ldrb.w	r3, [r3, #32]
 800234c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800234e:	7dfb      	ldrb	r3, [r7, #23]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d003      	beq.n	800235c <HAL_CAN_GetRxMessage+0x24>
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	2b02      	cmp	r3, #2
 8002358:	f040 8103 	bne.w	8002562 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10e      	bne.n	8002380 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d116      	bne.n	800239e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0f7      	b.n	8002570 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d107      	bne.n	800239e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e0e8      	b.n	8002570 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	331b      	adds	r3, #27
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	4413      	add	r3, r2
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0204 	and.w	r2, r3, #4
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10c      	bne.n	80023d6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	331b      	adds	r3, #27
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	4413      	add	r3, r2
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	0d5b      	lsrs	r3, r3, #21
 80023cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	e00b      	b.n	80023ee <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	331b      	adds	r3, #27
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	4413      	add	r3, r2
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	08db      	lsrs	r3, r3, #3
 80023e6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	331b      	adds	r3, #27
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	4413      	add	r3, r2
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0202 	and.w	r2, r3, #2
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	331b      	adds	r3, #27
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	4413      	add	r3, r2
 8002410:	3304      	adds	r3, #4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2208      	movs	r2, #8
 8002420:	611a      	str	r2, [r3, #16]
 8002422:	e00b      	b.n	800243c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	331b      	adds	r3, #27
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	4413      	add	r3, r2
 8002430:	3304      	adds	r3, #4
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 020f 	and.w	r2, r3, #15
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	331b      	adds	r3, #27
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	4413      	add	r3, r2
 8002448:	3304      	adds	r3, #4
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0a1b      	lsrs	r3, r3, #8
 800244e:	b2da      	uxtb	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	331b      	adds	r3, #27
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	4413      	add	r3, r2
 8002460:	3304      	adds	r3, #4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0c1b      	lsrs	r3, r3, #16
 8002466:	b29a      	uxth	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	011b      	lsls	r3, r3, #4
 8002474:	4413      	add	r3, r2
 8002476:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	b2da      	uxtb	r2, r3
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	4413      	add	r3, r2
 800248c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	0a1a      	lsrs	r2, r3, #8
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	3301      	adds	r3, #1
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	0c1a      	lsrs	r2, r3, #16
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	3302      	adds	r3, #2
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	4413      	add	r3, r2
 80024c0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	0e1a      	lsrs	r2, r3, #24
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	3303      	adds	r3, #3
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	4413      	add	r3, r2
 80024da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	3304      	adds	r3, #4
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	4413      	add	r3, r2
 80024f2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	0a1a      	lsrs	r2, r3, #8
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	3305      	adds	r3, #5
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	4413      	add	r3, r2
 800250c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	0c1a      	lsrs	r2, r3, #16
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	3306      	adds	r3, #6
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	4413      	add	r3, r2
 8002526:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0e1a      	lsrs	r2, r3, #24
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	3307      	adds	r3, #7
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d108      	bne.n	800254e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68da      	ldr	r2, [r3, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0220 	orr.w	r2, r2, #32
 800254a:	60da      	str	r2, [r3, #12]
 800254c:	e007      	b.n	800255e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0220 	orr.w	r2, r2, #32
 800255c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e006      	b.n	8002570 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
  }
}
 8002570:	4618      	mov	r0, r3
 8002572:	371c      	adds	r7, #28
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800258c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d002      	beq.n	800259a <HAL_CAN_ActivateNotification+0x1e>
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d109      	bne.n	80025ae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6959      	ldr	r1, [r3, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	430a      	orrs	r2, r1
 80025a8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e006      	b.n	80025bc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
  }
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	@ 0x28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002604:	6a3b      	ldr	r3, [r7, #32]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d07c      	beq.n	8002708 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	2b00      	cmp	r3, #0
 8002616:	d023      	beq.n	8002660 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2201      	movs	r2, #1
 800261e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f983 	bl	8002936 <HAL_CAN_TxMailbox0CompleteCallback>
 8002630:	e016      	b.n	8002660 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d004      	beq.n	8002646 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
 8002644:	e00c      	b.n	8002660 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
 8002658:	e002      	b.n	8002660 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f989 	bl	8002972 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d024      	beq.n	80026b4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002672:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f963 	bl	800294a <HAL_CAN_TxMailbox1CompleteCallback>
 8002684:	e016      	b.n	80026b4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
 8002698:	e00c      	b.n	80026b4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d004      	beq.n	80026ae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ac:	e002      	b.n	80026b4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f969 	bl	8002986 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d024      	beq.n	8002708 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f943 	bl	800295e <HAL_CAN_TxMailbox2CompleteCallback>
 80026d8:	e016      	b.n	8002708 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d004      	beq.n	80026ee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ec:	e00c      	b.n	8002708 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d004      	beq.n	8002702 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80026f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002700:	e002      	b.n	8002708 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f949 	bl	800299a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00c      	beq.n	800272c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	d007      	beq.n	800272c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002722:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2210      	movs	r2, #16
 800272a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00b      	beq.n	800274e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d006      	beq.n	800274e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2208      	movs	r2, #8
 8002746:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f930 	bl	80029ae <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d009      	beq.n	800276c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fe0c 	bl	8001384 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00c      	beq.n	8002790 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002786:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2210      	movs	r2, #16
 800278e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00b      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	f003 0308 	and.w	r3, r3, #8
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d006      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2208      	movs	r2, #8
 80027aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f908 	bl	80029c2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d009      	beq.n	80027d0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fe fdf2 	bl	80013b4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80027d0:	6a3b      	ldr	r3, [r7, #32]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00b      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d006      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2210      	movs	r2, #16
 80027ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f8f2 	bl	80029d6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00b      	beq.n	8002814 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d006      	beq.n	8002814 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2208      	movs	r2, #8
 800280c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f8eb 	bl	80029ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d07b      	beq.n	8002916 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d072      	beq.n	800290e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800283c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	f043 0302 	orr.w	r3, r3, #2
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	f043 0304 	orr.w	r3, r3, #4
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002882:	2b00      	cmp	r3, #0
 8002884:	d043      	beq.n	800290e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800288c:	2b00      	cmp	r3, #0
 800288e:	d03e      	beq.n	800290e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002896:	2b60      	cmp	r3, #96	@ 0x60
 8002898:	d02b      	beq.n	80028f2 <HAL_CAN_IRQHandler+0x32a>
 800289a:	2b60      	cmp	r3, #96	@ 0x60
 800289c:	d82e      	bhi.n	80028fc <HAL_CAN_IRQHandler+0x334>
 800289e:	2b50      	cmp	r3, #80	@ 0x50
 80028a0:	d022      	beq.n	80028e8 <HAL_CAN_IRQHandler+0x320>
 80028a2:	2b50      	cmp	r3, #80	@ 0x50
 80028a4:	d82a      	bhi.n	80028fc <HAL_CAN_IRQHandler+0x334>
 80028a6:	2b40      	cmp	r3, #64	@ 0x40
 80028a8:	d019      	beq.n	80028de <HAL_CAN_IRQHandler+0x316>
 80028aa:	2b40      	cmp	r3, #64	@ 0x40
 80028ac:	d826      	bhi.n	80028fc <HAL_CAN_IRQHandler+0x334>
 80028ae:	2b30      	cmp	r3, #48	@ 0x30
 80028b0:	d010      	beq.n	80028d4 <HAL_CAN_IRQHandler+0x30c>
 80028b2:	2b30      	cmp	r3, #48	@ 0x30
 80028b4:	d822      	bhi.n	80028fc <HAL_CAN_IRQHandler+0x334>
 80028b6:	2b10      	cmp	r3, #16
 80028b8:	d002      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x2f8>
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d005      	beq.n	80028ca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80028be:	e01d      	b.n	80028fc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	f043 0308 	orr.w	r3, r3, #8
 80028c6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028c8:	e019      	b.n	80028fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028cc:	f043 0310 	orr.w	r3, r3, #16
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028d2:	e014      	b.n	80028fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	f043 0320 	orr.w	r3, r3, #32
 80028da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028dc:	e00f      	b.n	80028fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028e6:	e00a      	b.n	80028fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028f0:	e005      	b.n	80028fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028fa:	e000      	b.n	80028fe <HAL_CAN_IRQHandler+0x336>
            break;
 80028fc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699a      	ldr	r2, [r3, #24]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800290c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2204      	movs	r2, #4
 8002914:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	431a      	orrs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f868 	bl	80029fe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800292e:	bf00      	nop
 8002930:	3728      	adds	r7, #40	@ 0x28
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b083      	sub	sp, #12
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
	...

08002a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a24:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <__NVIC_SetPriorityGrouping+0x44>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a30:	4013      	ands	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a46:	4a04      	ldr	r2, [pc, #16]	@ (8002a58 <__NVIC_SetPriorityGrouping+0x44>)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	60d3      	str	r3, [r2, #12]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a60:	4b04      	ldr	r3, [pc, #16]	@ (8002a74 <__NVIC_GetPriorityGrouping+0x18>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	f003 0307 	and.w	r3, r3, #7
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	db0b      	blt.n	8002aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	f003 021f 	and.w	r2, r3, #31
 8002a90:	4907      	ldr	r1, [pc, #28]	@ (8002ab0 <__NVIC_EnableIRQ+0x38>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2001      	movs	r0, #1
 8002a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000e100 	.word	0xe000e100

08002ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	6039      	str	r1, [r7, #0]
 8002abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	db0a      	blt.n	8002ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	490c      	ldr	r1, [pc, #48]	@ (8002b00 <__NVIC_SetPriority+0x4c>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002adc:	e00a      	b.n	8002af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4908      	ldr	r1, [pc, #32]	@ (8002b04 <__NVIC_SetPriority+0x50>)
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	3b04      	subs	r3, #4
 8002aec:	0112      	lsls	r2, r2, #4
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	440b      	add	r3, r1
 8002af2:	761a      	strb	r2, [r3, #24]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000e100 	.word	0xe000e100
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	@ 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f1c3 0307 	rsb	r3, r3, #7
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	bf28      	it	cs
 8002b26:	2304      	movcs	r3, #4
 8002b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d902      	bls.n	8002b38 <NVIC_EncodePriority+0x30>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3b03      	subs	r3, #3
 8002b36:	e000      	b.n	8002b3a <NVIC_EncodePriority+0x32>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43da      	mvns	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b50:	f04f 31ff 	mov.w	r1, #4294967295
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	43d9      	mvns	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	4313      	orrs	r3, r2
         );
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3724      	adds	r7, #36	@ 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b80:	d301      	bcc.n	8002b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00f      	b.n	8002ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b86:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb0 <SysTick_Config+0x40>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8e:	210f      	movs	r1, #15
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	f7ff ff8e 	bl	8002ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b98:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <SysTick_Config+0x40>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9e:	4b04      	ldr	r3, [pc, #16]	@ (8002bb0 <SysTick_Config+0x40>)
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	e000e010 	.word	0xe000e010

08002bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff29 	bl	8002a14 <__NVIC_SetPriorityGrouping>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bdc:	f7ff ff3e 	bl	8002a5c <__NVIC_GetPriorityGrouping>
 8002be0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f7ff ff8e 	bl	8002b08 <NVIC_EncodePriority>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff5d 	bl	8002ab4 <__NVIC_SetPriority>
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	4603      	mov	r3, r0
 8002c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff31 	bl	8002a78 <__NVIC_EnableIRQ>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff ffa2 	bl	8002b70 <SysTick_Config>
 8002c2c:	4603      	mov	r3, r0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b087      	sub	sp, #28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c46:	e148      	b.n	8002eda <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	fa01 f303 	lsl.w	r3, r1, r3
 8002c54:	4013      	ands	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 813a 	beq.w	8002ed4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d005      	beq.n	8002c78 <HAL_GPIO_Init+0x40>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d130      	bne.n	8002cda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	2203      	movs	r2, #3
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cae:	2201      	movs	r2, #1
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	091b      	lsrs	r3, r3, #4
 8002cc4:	f003 0201 	and.w	r2, r3, #1
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d017      	beq.n	8002d16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d123      	bne.n	8002d6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	08da      	lsrs	r2, r3, #3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3208      	adds	r2, #8
 8002d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	220f      	movs	r2, #15
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4013      	ands	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	08da      	lsrs	r2, r3, #3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3208      	adds	r2, #8
 8002d64:	6939      	ldr	r1, [r7, #16]
 8002d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	2203      	movs	r2, #3
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0203 	and.w	r2, r3, #3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8094 	beq.w	8002ed4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dac:	4b52      	ldr	r3, [pc, #328]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002dae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002db0:	4a51      	ldr	r2, [pc, #324]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002db2:	f043 0301 	orr.w	r3, r3, #1
 8002db6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002db8:	4b4f      	ldr	r3, [pc, #316]	@ (8002ef8 <HAL_GPIO_Init+0x2c0>)
 8002dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dc4:	4a4d      	ldr	r2, [pc, #308]	@ (8002efc <HAL_GPIO_Init+0x2c4>)
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	3302      	adds	r3, #2
 8002dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	220f      	movs	r2, #15
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002dee:	d00d      	beq.n	8002e0c <HAL_GPIO_Init+0x1d4>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a43      	ldr	r2, [pc, #268]	@ (8002f00 <HAL_GPIO_Init+0x2c8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d007      	beq.n	8002e08 <HAL_GPIO_Init+0x1d0>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a42      	ldr	r2, [pc, #264]	@ (8002f04 <HAL_GPIO_Init+0x2cc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d101      	bne.n	8002e04 <HAL_GPIO_Init+0x1cc>
 8002e00:	2302      	movs	r3, #2
 8002e02:	e004      	b.n	8002e0e <HAL_GPIO_Init+0x1d6>
 8002e04:	2307      	movs	r3, #7
 8002e06:	e002      	b.n	8002e0e <HAL_GPIO_Init+0x1d6>
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e000      	b.n	8002e0e <HAL_GPIO_Init+0x1d6>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	f002 0203 	and.w	r2, r2, #3
 8002e14:	0092      	lsls	r2, r2, #2
 8002e16:	4093      	lsls	r3, r2
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e1e:	4937      	ldr	r1, [pc, #220]	@ (8002efc <HAL_GPIO_Init+0x2c4>)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	3302      	adds	r3, #2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e2c:	4b36      	ldr	r3, [pc, #216]	@ (8002f08 <HAL_GPIO_Init+0x2d0>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	43db      	mvns	r3, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e50:	4a2d      	ldr	r2, [pc, #180]	@ (8002f08 <HAL_GPIO_Init+0x2d0>)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e56:	4b2c      	ldr	r3, [pc, #176]	@ (8002f08 <HAL_GPIO_Init+0x2d0>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4013      	ands	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e7a:	4a23      	ldr	r2, [pc, #140]	@ (8002f08 <HAL_GPIO_Init+0x2d0>)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e80:	4b21      	ldr	r3, [pc, #132]	@ (8002f08 <HAL_GPIO_Init+0x2d0>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ea4:	4a18      	ldr	r2, [pc, #96]	@ (8002f08 <HAL_GPIO_Init+0x2d0>)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002eaa:	4b17      	ldr	r3, [pc, #92]	@ (8002f08 <HAL_GPIO_Init+0x2d0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ece:	4a0e      	ldr	r2, [pc, #56]	@ (8002f08 <HAL_GPIO_Init+0x2d0>)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f47f aeaf 	bne.w	8002c48 <HAL_GPIO_Init+0x10>
  }
}
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40010000 	.word	0x40010000
 8002f00:	48000400 	.word	0x48000400
 8002f04:	48000800 	.word	0x48000800
 8002f08:	40010400 	.word	0x40010400

08002f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	807b      	strh	r3, [r7, #2]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f1c:	787b      	ldrb	r3, [r7, #1]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f22:	887a      	ldrh	r2, [r7, #2]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f28:	e002      	b.n	8002f30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f2a:	887a      	ldrh	r2, [r7, #2]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f40:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a04      	ldr	r2, [pc, #16]	@ (8002f58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f4a:	6013      	str	r3, [r2, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40007000 	.word	0x40007000

08002f5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f60:	4b04      	ldr	r3, [pc, #16]	@ (8002f74 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40007000 	.word	0x40007000

08002f78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f86:	d130      	bne.n	8002fea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f88:	4b23      	ldr	r3, [pc, #140]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f94:	d038      	beq.n	8003008 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f96:	4b20      	ldr	r3, [pc, #128]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fa0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fa4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2232      	movs	r2, #50	@ 0x32
 8002fac:	fb02 f303 	mul.w	r3, r2, r3
 8002fb0:	4a1b      	ldr	r2, [pc, #108]	@ (8003020 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0c9b      	lsrs	r3, r3, #18
 8002fb8:	3301      	adds	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fbc:	e002      	b.n	8002fc4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fc4:	4b14      	ldr	r3, [pc, #80]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd0:	d102      	bne.n	8002fd8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f2      	bne.n	8002fbe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fe4:	d110      	bne.n	8003008 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e00f      	b.n	800300a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fea:	4b0b      	ldr	r3, [pc, #44]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff6:	d007      	beq.n	8003008 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ff8:	4b07      	ldr	r3, [pc, #28]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003000:	4a05      	ldr	r2, [pc, #20]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003002:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003006:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40007000 	.word	0x40007000
 800301c:	20000000 	.word	0x20000000
 8003020:	431bde83 	.word	0x431bde83

08003024 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	f000 bc02 	b.w	800383c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003038:	4b96      	ldr	r3, [pc, #600]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 030c 	and.w	r3, r3, #12
 8003040:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003042:	4b94      	ldr	r3, [pc, #592]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80e4 	beq.w	8003222 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d007      	beq.n	8003070 <HAL_RCC_OscConfig+0x4c>
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2b0c      	cmp	r3, #12
 8003064:	f040 808b 	bne.w	800317e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	2b01      	cmp	r3, #1
 800306c:	f040 8087 	bne.w	800317e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003070:	4b88      	ldr	r3, [pc, #544]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_OscConfig+0x64>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e3d9      	b.n	800383c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1a      	ldr	r2, [r3, #32]
 800308c:	4b81      	ldr	r3, [pc, #516]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d004      	beq.n	80030a2 <HAL_RCC_OscConfig+0x7e>
 8003098:	4b7e      	ldr	r3, [pc, #504]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030a0:	e005      	b.n	80030ae <HAL_RCC_OscConfig+0x8a>
 80030a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d223      	bcs.n	80030fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fd8c 	bl	8003bd4 <RCC_SetFlashLatencyFromMSIRange>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e3ba      	b.n	800383c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030c6:	4b73      	ldr	r3, [pc, #460]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a72      	ldr	r2, [pc, #456]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030cc:	f043 0308 	orr.w	r3, r3, #8
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b70      	ldr	r3, [pc, #448]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	496d      	ldr	r1, [pc, #436]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030e4:	4b6b      	ldr	r3, [pc, #428]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	4968      	ldr	r1, [pc, #416]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
 80030f8:	e025      	b.n	8003146 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030fa:	4b66      	ldr	r3, [pc, #408]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a65      	ldr	r2, [pc, #404]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003100:	f043 0308 	orr.w	r3, r3, #8
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	4b63      	ldr	r3, [pc, #396]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	4960      	ldr	r1, [pc, #384]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003114:	4313      	orrs	r3, r2
 8003116:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003118:	4b5e      	ldr	r3, [pc, #376]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	495b      	ldr	r1, [pc, #364]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fd4c 	bl	8003bd4 <RCC_SetFlashLatencyFromMSIRange>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e37a      	b.n	800383c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003146:	f000 fc81 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 800314a:	4602      	mov	r2, r0
 800314c:	4b51      	ldr	r3, [pc, #324]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	4950      	ldr	r1, [pc, #320]	@ (8003298 <HAL_RCC_OscConfig+0x274>)
 8003158:	5ccb      	ldrb	r3, [r1, r3]
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	4a4e      	ldr	r2, [pc, #312]	@ (800329c <HAL_RCC_OscConfig+0x278>)
 8003164:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003166:	4b4e      	ldr	r3, [pc, #312]	@ (80032a0 <HAL_RCC_OscConfig+0x27c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fd56 	bl	8001c1c <HAL_InitTick>
 8003170:	4603      	mov	r3, r0
 8003172:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d052      	beq.n	8003220 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	e35e      	b.n	800383c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d032      	beq.n	80031ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003186:	4b43      	ldr	r3, [pc, #268]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a42      	ldr	r2, [pc, #264]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 800318c:	f043 0301 	orr.w	r3, r3, #1
 8003190:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003192:	f7fe fd93 	bl	8001cbc <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800319a:	f7fe fd8f 	bl	8001cbc <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e347      	b.n	800383c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031ac:	4b39      	ldr	r3, [pc, #228]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b8:	4b36      	ldr	r3, [pc, #216]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a35      	ldr	r2, [pc, #212]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031be:	f043 0308 	orr.w	r3, r3, #8
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	4b33      	ldr	r3, [pc, #204]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	4930      	ldr	r1, [pc, #192]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	021b      	lsls	r3, r3, #8
 80031e4:	492b      	ldr	r1, [pc, #172]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	604b      	str	r3, [r1, #4]
 80031ea:	e01a      	b.n	8003222 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031ec:	4b29      	ldr	r3, [pc, #164]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a28      	ldr	r2, [pc, #160]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 80031f2:	f023 0301 	bic.w	r3, r3, #1
 80031f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031f8:	f7fe fd60 	bl	8001cbc <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003200:	f7fe fd5c 	bl	8001cbc <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e314      	b.n	800383c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003212:	4b20      	ldr	r3, [pc, #128]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x1dc>
 800321e:	e000      	b.n	8003222 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003220:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d073      	beq.n	8003316 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d005      	beq.n	8003240 <HAL_RCC_OscConfig+0x21c>
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	2b0c      	cmp	r3, #12
 8003238:	d10e      	bne.n	8003258 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d10b      	bne.n	8003258 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	4b14      	ldr	r3, [pc, #80]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d063      	beq.n	8003314 <HAL_RCC_OscConfig+0x2f0>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d15f      	bne.n	8003314 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e2f1      	b.n	800383c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003260:	d106      	bne.n	8003270 <HAL_RCC_OscConfig+0x24c>
 8003262:	4b0c      	ldr	r3, [pc, #48]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a0b      	ldr	r2, [pc, #44]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	e025      	b.n	80032bc <HAL_RCC_OscConfig+0x298>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003278:	d114      	bne.n	80032a4 <HAL_RCC_OscConfig+0x280>
 800327a:	4b06      	ldr	r3, [pc, #24]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a05      	ldr	r2, [pc, #20]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003280:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	4b03      	ldr	r3, [pc, #12]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a02      	ldr	r2, [pc, #8]	@ (8003294 <HAL_RCC_OscConfig+0x270>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003290:	6013      	str	r3, [r2, #0]
 8003292:	e013      	b.n	80032bc <HAL_RCC_OscConfig+0x298>
 8003294:	40021000 	.word	0x40021000
 8003298:	08007f28 	.word	0x08007f28
 800329c:	20000000 	.word	0x20000000
 80032a0:	20000004 	.word	0x20000004
 80032a4:	4ba0      	ldr	r3, [pc, #640]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a9f      	ldr	r2, [pc, #636]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80032aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b9d      	ldr	r3, [pc, #628]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a9c      	ldr	r2, [pc, #624]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80032b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d013      	beq.n	80032ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe fcfa 	bl	8001cbc <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032cc:	f7fe fcf6 	bl	8001cbc <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	@ 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e2ae      	b.n	800383c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032de:	4b92      	ldr	r3, [pc, #584]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x2a8>
 80032ea:	e014      	b.n	8003316 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fe fce6 	bl	8001cbc <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7fe fce2 	bl	8001cbc <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	@ 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e29a      	b.n	800383c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003306:	4b88      	ldr	r3, [pc, #544]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x2d0>
 8003312:	e000      	b.n	8003316 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d060      	beq.n	80033e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d005      	beq.n	8003334 <HAL_RCC_OscConfig+0x310>
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d119      	bne.n	8003362 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d116      	bne.n	8003362 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003334:	4b7c      	ldr	r3, [pc, #496]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800333c:	2b00      	cmp	r3, #0
 800333e:	d005      	beq.n	800334c <HAL_RCC_OscConfig+0x328>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e277      	b.n	800383c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334c:	4b76      	ldr	r3, [pc, #472]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	061b      	lsls	r3, r3, #24
 800335a:	4973      	ldr	r1, [pc, #460]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003360:	e040      	b.n	80033e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d023      	beq.n	80033b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800336a:	4b6f      	ldr	r3, [pc, #444]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a6e      	ldr	r2, [pc, #440]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003376:	f7fe fca1 	bl	8001cbc <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337e:	f7fe fc9d 	bl	8001cbc <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e255      	b.n	800383c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003390:	4b65      	ldr	r3, [pc, #404]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339c:	4b62      	ldr	r3, [pc, #392]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	061b      	lsls	r3, r3, #24
 80033aa:	495f      	ldr	r1, [pc, #380]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	604b      	str	r3, [r1, #4]
 80033b0:	e018      	b.n	80033e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80033b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033be:	f7fe fc7d 	bl	8001cbc <HAL_GetTick>
 80033c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033c4:	e008      	b.n	80033d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c6:	f7fe fc79 	bl	8001cbc <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e231      	b.n	800383c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d8:	4b53      	ldr	r3, [pc, #332]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1f0      	bne.n	80033c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d03c      	beq.n	800346a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01c      	beq.n	8003432 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80033fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033fe:	4a4a      	ldr	r2, [pc, #296]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fe fc58 	bl	8001cbc <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003410:	f7fe fc54 	bl	8001cbc <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e20c      	b.n	800383c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003422:	4b41      	ldr	r3, [pc, #260]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003424:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d0ef      	beq.n	8003410 <HAL_RCC_OscConfig+0x3ec>
 8003430:	e01b      	b.n	800346a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003432:	4b3d      	ldr	r3, [pc, #244]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003438:	4a3b      	ldr	r2, [pc, #236]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003442:	f7fe fc3b 	bl	8001cbc <HAL_GetTick>
 8003446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344a:	f7fe fc37 	bl	8001cbc <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e1ef      	b.n	800383c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800345c:	4b32      	ldr	r3, [pc, #200]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800345e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1ef      	bne.n	800344a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 80a6 	beq.w	80035c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003478:	2300      	movs	r3, #0
 800347a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800347c:	4b2a      	ldr	r3, [pc, #168]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800347e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10d      	bne.n	80034a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003488:	4b27      	ldr	r3, [pc, #156]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800348a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348c:	4a26      	ldr	r2, [pc, #152]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800348e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003492:	6593      	str	r3, [r2, #88]	@ 0x58
 8003494:	4b24      	ldr	r3, [pc, #144]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003498:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034a0:	2301      	movs	r3, #1
 80034a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034a4:	4b21      	ldr	r3, [pc, #132]	@ (800352c <HAL_RCC_OscConfig+0x508>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d118      	bne.n	80034e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034b0:	4b1e      	ldr	r3, [pc, #120]	@ (800352c <HAL_RCC_OscConfig+0x508>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a1d      	ldr	r2, [pc, #116]	@ (800352c <HAL_RCC_OscConfig+0x508>)
 80034b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034bc:	f7fe fbfe 	bl	8001cbc <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c4:	f7fe fbfa 	bl	8001cbc <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e1b2      	b.n	800383c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034d6:	4b15      	ldr	r3, [pc, #84]	@ (800352c <HAL_RCC_OscConfig+0x508>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d108      	bne.n	80034fc <HAL_RCC_OscConfig+0x4d8>
 80034ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034fa:	e029      	b.n	8003550 <HAL_RCC_OscConfig+0x52c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	2b05      	cmp	r3, #5
 8003502:	d115      	bne.n	8003530 <HAL_RCC_OscConfig+0x50c>
 8003504:	4b08      	ldr	r3, [pc, #32]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350a:	4a07      	ldr	r2, [pc, #28]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800350c:	f043 0304 	orr.w	r3, r3, #4
 8003510:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003514:	4b04      	ldr	r3, [pc, #16]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351a:	4a03      	ldr	r2, [pc, #12]	@ (8003528 <HAL_RCC_OscConfig+0x504>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003524:	e014      	b.n	8003550 <HAL_RCC_OscConfig+0x52c>
 8003526:	bf00      	nop
 8003528:	40021000 	.word	0x40021000
 800352c:	40007000 	.word	0x40007000
 8003530:	4b9a      	ldr	r3, [pc, #616]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 8003532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003536:	4a99      	ldr	r2, [pc, #612]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003540:	4b96      	ldr	r3, [pc, #600]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003546:	4a95      	ldr	r2, [pc, #596]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 8003548:	f023 0304 	bic.w	r3, r3, #4
 800354c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d016      	beq.n	8003586 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003558:	f7fe fbb0 	bl	8001cbc <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800355e:	e00a      	b.n	8003576 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003560:	f7fe fbac 	bl	8001cbc <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e162      	b.n	800383c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003576:	4b89      	ldr	r3, [pc, #548]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 8003578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ed      	beq.n	8003560 <HAL_RCC_OscConfig+0x53c>
 8003584:	e015      	b.n	80035b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003586:	f7fe fb99 	bl	8001cbc <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7fe fb95 	bl	8001cbc <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e14b      	b.n	800383c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035a4:	4b7d      	ldr	r3, [pc, #500]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1ed      	bne.n	800358e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035b2:	7ffb      	ldrb	r3, [r7, #31]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d105      	bne.n	80035c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b8:	4b78      	ldr	r3, [pc, #480]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 80035ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035bc:	4a77      	ldr	r2, [pc, #476]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 80035be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d03c      	beq.n	800364a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01c      	beq.n	8003612 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035d8:	4b70      	ldr	r3, [pc, #448]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 80035da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80035de:	4a6f      	ldr	r2, [pc, #444]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fe fb68 	bl	8001cbc <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035f0:	f7fe fb64 	bl	8001cbc <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e11c      	b.n	800383c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003602:	4b66      	ldr	r3, [pc, #408]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 8003604:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ef      	beq.n	80035f0 <HAL_RCC_OscConfig+0x5cc>
 8003610:	e01b      	b.n	800364a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003612:	4b62      	ldr	r3, [pc, #392]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 8003614:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003618:	4a60      	ldr	r2, [pc, #384]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003622:	f7fe fb4b 	bl	8001cbc <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800362a:	f7fe fb47 	bl	8001cbc <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e0ff      	b.n	800383c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800363c:	4b57      	ldr	r3, [pc, #348]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 800363e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1ef      	bne.n	800362a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80f3 	beq.w	800383a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003658:	2b02      	cmp	r3, #2
 800365a:	f040 80c9 	bne.w	80037f0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800365e:	4b4f      	ldr	r3, [pc, #316]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f003 0203 	and.w	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366e:	429a      	cmp	r2, r3
 8003670:	d12c      	bne.n	80036cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367c:	3b01      	subs	r3, #1
 800367e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d123      	bne.n	80036cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800368e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003690:	429a      	cmp	r2, r3
 8003692:	d11b      	bne.n	80036cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800369e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d113      	bne.n	80036cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ae:	085b      	lsrs	r3, r3, #1
 80036b0:	3b01      	subs	r3, #1
 80036b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d109      	bne.n	80036cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	3b01      	subs	r3, #1
 80036c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d06b      	beq.n	80037a4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	d062      	beq.n	8003798 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036d2:	4b32      	ldr	r3, [pc, #200]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0ac      	b.n	800383c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036e2:	4b2e      	ldr	r3, [pc, #184]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a2d      	ldr	r2, [pc, #180]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 80036e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036ee:	f7fe fae5 	bl	8001cbc <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f6:	f7fe fae1 	bl	8001cbc <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e099      	b.n	800383c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003708:	4b24      	ldr	r3, [pc, #144]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1f0      	bne.n	80036f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003714:	4b21      	ldr	r3, [pc, #132]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	4b21      	ldr	r3, [pc, #132]	@ (80037a0 <HAL_RCC_OscConfig+0x77c>)
 800371a:	4013      	ands	r3, r2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003724:	3a01      	subs	r2, #1
 8003726:	0112      	lsls	r2, r2, #4
 8003728:	4311      	orrs	r1, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800372e:	0212      	lsls	r2, r2, #8
 8003730:	4311      	orrs	r1, r2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003736:	0852      	lsrs	r2, r2, #1
 8003738:	3a01      	subs	r2, #1
 800373a:	0552      	lsls	r2, r2, #21
 800373c:	4311      	orrs	r1, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003742:	0852      	lsrs	r2, r2, #1
 8003744:	3a01      	subs	r2, #1
 8003746:	0652      	lsls	r2, r2, #25
 8003748:	4311      	orrs	r1, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800374e:	06d2      	lsls	r2, r2, #27
 8003750:	430a      	orrs	r2, r1
 8003752:	4912      	ldr	r1, [pc, #72]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 8003754:	4313      	orrs	r3, r2
 8003756:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003758:	4b10      	ldr	r3, [pc, #64]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a0f      	ldr	r2, [pc, #60]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 800375e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003762:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003764:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4a0c      	ldr	r2, [pc, #48]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 800376a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800376e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003770:	f7fe faa4 	bl	8001cbc <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003778:	f7fe faa0 	bl	8001cbc <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e058      	b.n	800383c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378a:	4b04      	ldr	r3, [pc, #16]	@ (800379c <HAL_RCC_OscConfig+0x778>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003796:	e050      	b.n	800383a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e04f      	b.n	800383c <HAL_RCC_OscConfig+0x818>
 800379c:	40021000 	.word	0x40021000
 80037a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a4:	4b27      	ldr	r3, [pc, #156]	@ (8003844 <HAL_RCC_OscConfig+0x820>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d144      	bne.n	800383a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037b0:	4b24      	ldr	r3, [pc, #144]	@ (8003844 <HAL_RCC_OscConfig+0x820>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a23      	ldr	r2, [pc, #140]	@ (8003844 <HAL_RCC_OscConfig+0x820>)
 80037b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037bc:	4b21      	ldr	r3, [pc, #132]	@ (8003844 <HAL_RCC_OscConfig+0x820>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4a20      	ldr	r2, [pc, #128]	@ (8003844 <HAL_RCC_OscConfig+0x820>)
 80037c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037c8:	f7fe fa78 	bl	8001cbc <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fe fa74 	bl	8001cbc <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e02c      	b.n	800383c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e2:	4b18      	ldr	r3, [pc, #96]	@ (8003844 <HAL_RCC_OscConfig+0x820>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x7ac>
 80037ee:	e024      	b.n	800383a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	2b0c      	cmp	r3, #12
 80037f4:	d01f      	beq.n	8003836 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f6:	4b13      	ldr	r3, [pc, #76]	@ (8003844 <HAL_RCC_OscConfig+0x820>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a12      	ldr	r2, [pc, #72]	@ (8003844 <HAL_RCC_OscConfig+0x820>)
 80037fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003802:	f7fe fa5b 	bl	8001cbc <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380a:	f7fe fa57 	bl	8001cbc <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e00f      	b.n	800383c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800381c:	4b09      	ldr	r3, [pc, #36]	@ (8003844 <HAL_RCC_OscConfig+0x820>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1f0      	bne.n	800380a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003828:	4b06      	ldr	r3, [pc, #24]	@ (8003844 <HAL_RCC_OscConfig+0x820>)
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	4905      	ldr	r1, [pc, #20]	@ (8003844 <HAL_RCC_OscConfig+0x820>)
 800382e:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <HAL_RCC_OscConfig+0x824>)
 8003830:	4013      	ands	r3, r2
 8003832:	60cb      	str	r3, [r1, #12]
 8003834:	e001      	b.n	800383a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40021000 	.word	0x40021000
 8003848:	feeefffc 	.word	0xfeeefffc

0800384c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0e7      	b.n	8003a30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003860:	4b75      	ldr	r3, [pc, #468]	@ (8003a38 <HAL_RCC_ClockConfig+0x1ec>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d910      	bls.n	8003890 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386e:	4b72      	ldr	r3, [pc, #456]	@ (8003a38 <HAL_RCC_ClockConfig+0x1ec>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 0207 	bic.w	r2, r3, #7
 8003876:	4970      	ldr	r1, [pc, #448]	@ (8003a38 <HAL_RCC_ClockConfig+0x1ec>)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b6e      	ldr	r3, [pc, #440]	@ (8003a38 <HAL_RCC_ClockConfig+0x1ec>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0cf      	b.n	8003a30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d010      	beq.n	80038be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	4b66      	ldr	r3, [pc, #408]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d908      	bls.n	80038be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ac:	4b63      	ldr	r3, [pc, #396]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4960      	ldr	r1, [pc, #384]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d04c      	beq.n	8003964 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038d2:	4b5a      	ldr	r3, [pc, #360]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d121      	bne.n	8003922 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0a6      	b.n	8003a30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d107      	bne.n	80038fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038ea:	4b54      	ldr	r3, [pc, #336]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d115      	bne.n	8003922 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e09a      	b.n	8003a30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d107      	bne.n	8003912 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003902:	4b4e      	ldr	r3, [pc, #312]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e08e      	b.n	8003a30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003912:	4b4a      	ldr	r3, [pc, #296]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e086      	b.n	8003a30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003922:	4b46      	ldr	r3, [pc, #280]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f023 0203 	bic.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4943      	ldr	r1, [pc, #268]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 8003930:	4313      	orrs	r3, r2
 8003932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003934:	f7fe f9c2 	bl	8001cbc <HAL_GetTick>
 8003938:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393a:	e00a      	b.n	8003952 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393c:	f7fe f9be 	bl	8001cbc <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e06e      	b.n	8003a30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003952:	4b3a      	ldr	r3, [pc, #232]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 020c 	and.w	r2, r3, #12
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	429a      	cmp	r2, r3
 8003962:	d1eb      	bne.n	800393c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d010      	beq.n	8003992 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	4b31      	ldr	r3, [pc, #196]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800397c:	429a      	cmp	r2, r3
 800397e:	d208      	bcs.n	8003992 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003980:	4b2e      	ldr	r3, [pc, #184]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	492b      	ldr	r1, [pc, #172]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003992:	4b29      	ldr	r3, [pc, #164]	@ (8003a38 <HAL_RCC_ClockConfig+0x1ec>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d210      	bcs.n	80039c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a0:	4b25      	ldr	r3, [pc, #148]	@ (8003a38 <HAL_RCC_ClockConfig+0x1ec>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 0207 	bic.w	r2, r3, #7
 80039a8:	4923      	ldr	r1, [pc, #140]	@ (8003a38 <HAL_RCC_ClockConfig+0x1ec>)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b0:	4b21      	ldr	r3, [pc, #132]	@ (8003a38 <HAL_RCC_ClockConfig+0x1ec>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d001      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e036      	b.n	8003a30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ce:	4b1b      	ldr	r3, [pc, #108]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	4918      	ldr	r1, [pc, #96]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0308 	and.w	r3, r3, #8
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d009      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ec:	4b13      	ldr	r3, [pc, #76]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	4910      	ldr	r1, [pc, #64]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a00:	f000 f824 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8003a04:	4602      	mov	r2, r0
 8003a06:	4b0d      	ldr	r3, [pc, #52]	@ (8003a3c <HAL_RCC_ClockConfig+0x1f0>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	490b      	ldr	r1, [pc, #44]	@ (8003a40 <HAL_RCC_ClockConfig+0x1f4>)
 8003a12:	5ccb      	ldrb	r3, [r1, r3]
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1c:	4a09      	ldr	r2, [pc, #36]	@ (8003a44 <HAL_RCC_ClockConfig+0x1f8>)
 8003a1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a20:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <HAL_RCC_ClockConfig+0x1fc>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7fe f8f9 	bl	8001c1c <HAL_InitTick>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a2e:	7afb      	ldrb	r3, [r7, #11]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40022000 	.word	0x40022000
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	08007f28 	.word	0x08007f28
 8003a44:	20000000 	.word	0x20000000
 8003a48:	20000004 	.word	0x20000004

08003a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b089      	sub	sp, #36	@ 0x24
 8003a50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61fb      	str	r3, [r7, #28]
 8003a56:	2300      	movs	r3, #0
 8003a58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 030c 	and.w	r3, r3, #12
 8003a62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a64:	4b3b      	ldr	r3, [pc, #236]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x34>
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	2b0c      	cmp	r3, #12
 8003a78:	d121      	bne.n	8003abe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d11e      	bne.n	8003abe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a80:	4b34      	ldr	r3, [pc, #208]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d107      	bne.n	8003a9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a8c:	4b31      	ldr	r3, [pc, #196]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	e005      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003aa8:	4a2b      	ldr	r2, [pc, #172]	@ (8003b58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10d      	bne.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003abc:	e00a      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d102      	bne.n	8003aca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ac4:	4b25      	ldr	r3, [pc, #148]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x110>)
 8003ac6:	61bb      	str	r3, [r7, #24]
 8003ac8:	e004      	b.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ad0:	4b23      	ldr	r3, [pc, #140]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ad2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	2b0c      	cmp	r3, #12
 8003ad8:	d134      	bne.n	8003b44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ada:	4b1e      	ldr	r3, [pc, #120]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d003      	beq.n	8003af2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b03      	cmp	r3, #3
 8003aee:	d003      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0xac>
 8003af0:	e005      	b.n	8003afe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003af2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b5c <HAL_RCC_GetSysClockFreq+0x110>)
 8003af4:	617b      	str	r3, [r7, #20]
      break;
 8003af6:	e005      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003af8:	4b19      	ldr	r3, [pc, #100]	@ (8003b60 <HAL_RCC_GetSysClockFreq+0x114>)
 8003afa:	617b      	str	r3, [r7, #20]
      break;
 8003afc:	e002      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	617b      	str	r3, [r7, #20]
      break;
 8003b02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b04:	4b13      	ldr	r3, [pc, #76]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	091b      	lsrs	r3, r3, #4
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	3301      	adds	r3, #1
 8003b10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b12:	4b10      	ldr	r3, [pc, #64]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	fb03 f202 	mul.w	r2, r3, r2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b54 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	0e5b      	lsrs	r3, r3, #25
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	3301      	adds	r3, #1
 8003b36:	005b      	lsls	r3, r3, #1
 8003b38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b44:	69bb      	ldr	r3, [r7, #24]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3724      	adds	r7, #36	@ 0x24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	40021000 	.word	0x40021000
 8003b58:	08007f40 	.word	0x08007f40
 8003b5c:	00f42400 	.word	0x00f42400
 8003b60:	007a1200 	.word	0x007a1200

08003b64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b68:	4b03      	ldr	r3, [pc, #12]	@ (8003b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000000 	.word	0x20000000

08003b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b80:	f7ff fff0 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003b84:	4602      	mov	r2, r0
 8003b86:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	0a1b      	lsrs	r3, r3, #8
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	4904      	ldr	r1, [pc, #16]	@ (8003ba4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b92:	5ccb      	ldrb	r3, [r1, r3]
 8003b94:	f003 031f 	and.w	r3, r3, #31
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	08007f38 	.word	0x08007f38

08003ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bac:	f7ff ffda 	bl	8003b64 <HAL_RCC_GetHCLKFreq>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	4b06      	ldr	r3, [pc, #24]	@ (8003bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	0adb      	lsrs	r3, r3, #11
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	4904      	ldr	r1, [pc, #16]	@ (8003bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bbe:	5ccb      	ldrb	r3, [r1, r3]
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	08007f38 	.word	0x08007f38

08003bd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003be0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bec:	f7ff f9b6 	bl	8002f5c <HAL_PWREx_GetVoltageRange>
 8003bf0:	6178      	str	r0, [r7, #20]
 8003bf2:	e014      	b.n	8003c1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bf4:	4b25      	ldr	r3, [pc, #148]	@ (8003c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf8:	4a24      	ldr	r2, [pc, #144]	@ (8003c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c00:	4b22      	ldr	r3, [pc, #136]	@ (8003c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c0c:	f7ff f9a6 	bl	8002f5c <HAL_PWREx_GetVoltageRange>
 8003c10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c12:	4b1e      	ldr	r3, [pc, #120]	@ (8003c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c16:	4a1d      	ldr	r2, [pc, #116]	@ (8003c8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c24:	d10b      	bne.n	8003c3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b80      	cmp	r3, #128	@ 0x80
 8003c2a:	d919      	bls.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003c30:	d902      	bls.n	8003c38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c32:	2302      	movs	r3, #2
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	e013      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c38:	2301      	movs	r3, #1
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	e010      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b80      	cmp	r3, #128	@ 0x80
 8003c42:	d902      	bls.n	8003c4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c44:	2303      	movs	r3, #3
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	e00a      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b80      	cmp	r3, #128	@ 0x80
 8003c4e:	d102      	bne.n	8003c56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c50:	2302      	movs	r3, #2
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	e004      	b.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b70      	cmp	r3, #112	@ 0x70
 8003c5a:	d101      	bne.n	8003c60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c60:	4b0b      	ldr	r3, [pc, #44]	@ (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 0207 	bic.w	r2, r3, #7
 8003c68:	4909      	ldr	r1, [pc, #36]	@ (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c70:	4b07      	ldr	r3, [pc, #28]	@ (8003c90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d001      	beq.n	8003c82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40022000 	.word	0x40022000

08003c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d031      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cb8:	d01a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003cba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003cbe:	d814      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d009      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003cc8:	d10f      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003cca:	4b5d      	ldr	r3, [pc, #372]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	4a5c      	ldr	r2, [pc, #368]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cd4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cd6:	e00c      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 f9de 	bl	80040a0 <RCCEx_PLLSAI1_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ce8:	e003      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	74fb      	strb	r3, [r7, #19]
      break;
 8003cee:	e000      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003cf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf2:	7cfb      	ldrb	r3, [r7, #19]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10b      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cf8:	4b51      	ldr	r3, [pc, #324]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d06:	494e      	ldr	r1, [pc, #312]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003d0e:	e001      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d10:	7cfb      	ldrb	r3, [r7, #19]
 8003d12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 809e 	beq.w	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d22:	2300      	movs	r3, #0
 8003d24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d26:	4b46      	ldr	r3, [pc, #280]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003d36:	2300      	movs	r3, #0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00d      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d3c:	4b40      	ldr	r3, [pc, #256]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d40:	4a3f      	ldr	r2, [pc, #252]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d46:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d48:	4b3d      	ldr	r3, [pc, #244]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d54:	2301      	movs	r3, #1
 8003d56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d58:	4b3a      	ldr	r3, [pc, #232]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a39      	ldr	r2, [pc, #228]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d64:	f7fd ffaa 	bl	8001cbc <HAL_GetTick>
 8003d68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d6a:	e009      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6c:	f7fd ffa6 	bl	8001cbc <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d902      	bls.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	74fb      	strb	r3, [r7, #19]
        break;
 8003d7e:	e005      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d80:	4b30      	ldr	r3, [pc, #192]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0ef      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d15a      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d92:	4b2b      	ldr	r3, [pc, #172]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01e      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d019      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dae:	4b24      	ldr	r3, [pc, #144]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003db8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dba:	4b21      	ldr	r3, [pc, #132]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dca:	4b1d      	ldr	r3, [pc, #116]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003dd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dda:	4a19      	ldr	r2, [pc, #100]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d016      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fd ff66 	bl	8001cbc <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df2:	e00b      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df4:	f7fd ff62 	bl	8001cbc <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d902      	bls.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	74fb      	strb	r3, [r7, #19]
            break;
 8003e0a:	e006      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0ec      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003e1a:	7cfb      	ldrb	r3, [r7, #19]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d10b      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e20:	4b07      	ldr	r3, [pc, #28]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e2e:	4904      	ldr	r1, [pc, #16]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003e36:	e009      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	74bb      	strb	r3, [r7, #18]
 8003e3c:	e006      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e48:	7cfb      	ldrb	r3, [r7, #19]
 8003e4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e4c:	7c7b      	ldrb	r3, [r7, #17]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d105      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e52:	4b8a      	ldr	r3, [pc, #552]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e56:	4a89      	ldr	r2, [pc, #548]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e6a:	4b84      	ldr	r3, [pc, #528]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e70:	f023 0203 	bic.w	r2, r3, #3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	4980      	ldr	r1, [pc, #512]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e8c:	4b7b      	ldr	r3, [pc, #492]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e92:	f023 020c 	bic.w	r2, r3, #12
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9a:	4978      	ldr	r1, [pc, #480]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eae:	4b73      	ldr	r3, [pc, #460]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebc:	496f      	ldr	r1, [pc, #444]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ed0:	4b6a      	ldr	r3, [pc, #424]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ede:	4967      	ldr	r1, [pc, #412]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ef2:	4b62      	ldr	r3, [pc, #392]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f00:	495e      	ldr	r1, [pc, #376]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f14:	4b59      	ldr	r3, [pc, #356]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f1a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f22:	4956      	ldr	r1, [pc, #344]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f36:	4b51      	ldr	r3, [pc, #324]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f44:	494d      	ldr	r1, [pc, #308]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d028      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f58:	4b48      	ldr	r3, [pc, #288]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	4945      	ldr	r1, [pc, #276]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f76:	d106      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f78:	4b40      	ldr	r3, [pc, #256]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a3f      	ldr	r2, [pc, #252]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f82:	60d3      	str	r3, [r2, #12]
 8003f84:	e011      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f8e:	d10c      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3304      	adds	r3, #4
 8003f94:	2101      	movs	r1, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 f882 	bl	80040a0 <RCCEx_PLLSAI1_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fa0:	7cfb      	ldrb	r3, [r7, #19]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003fa6:	7cfb      	ldrb	r3, [r7, #19]
 8003fa8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d028      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fb6:	4b31      	ldr	r3, [pc, #196]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc4:	492d      	ldr	r1, [pc, #180]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fd4:	d106      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fd6:	4b29      	ldr	r3, [pc, #164]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	4a28      	ldr	r2, [pc, #160]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003fdc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fe0:	60d3      	str	r3, [r2, #12]
 8003fe2:	e011      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fec:	d10c      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 f853 	bl	80040a0 <RCCEx_PLLSAI1_Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ffe:	7cfb      	ldrb	r3, [r7, #19]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004004:	7cfb      	ldrb	r3, [r7, #19]
 8004006:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01c      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004014:	4b19      	ldr	r3, [pc, #100]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004022:	4916      	ldr	r1, [pc, #88]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800402e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004032:	d10c      	bne.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	2102      	movs	r1, #2
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f830 	bl	80040a0 <RCCEx_PLLSAI1_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004044:	7cfb      	ldrb	r3, [r7, #19]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800405a:	4b08      	ldr	r3, [pc, #32]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004060:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004068:	4904      	ldr	r1, [pc, #16]	@ (800407c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004070:	7cbb      	ldrb	r3, [r7, #18]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40021000 	.word	0x40021000

08004080 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004084:	4b05      	ldr	r3, [pc, #20]	@ (800409c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a04      	ldr	r2, [pc, #16]	@ (800409c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800408a:	f043 0304 	orr.w	r3, r3, #4
 800408e:	6013      	str	r3, [r2, #0]
}
 8004090:	bf00      	nop
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40021000 	.word	0x40021000

080040a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040ae:	4b74      	ldr	r3, [pc, #464]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d018      	beq.n	80040ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040ba:	4b71      	ldr	r3, [pc, #452]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f003 0203 	and.w	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d10d      	bne.n	80040e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
       ||
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040d2:	4b6b      	ldr	r3, [pc, #428]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	091b      	lsrs	r3, r3, #4
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
       ||
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d047      	beq.n	8004176 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
 80040ea:	e044      	b.n	8004176 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d018      	beq.n	8004126 <RCCEx_PLLSAI1_Config+0x86>
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d825      	bhi.n	8004144 <RCCEx_PLLSAI1_Config+0xa4>
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d002      	beq.n	8004102 <RCCEx_PLLSAI1_Config+0x62>
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d009      	beq.n	8004114 <RCCEx_PLLSAI1_Config+0x74>
 8004100:	e020      	b.n	8004144 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004102:	4b5f      	ldr	r3, [pc, #380]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d11d      	bne.n	800414a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004112:	e01a      	b.n	800414a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004114:	4b5a      	ldr	r3, [pc, #360]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800411c:	2b00      	cmp	r3, #0
 800411e:	d116      	bne.n	800414e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004124:	e013      	b.n	800414e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004126:	4b56      	ldr	r3, [pc, #344]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10f      	bne.n	8004152 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004132:	4b53      	ldr	r3, [pc, #332]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004142:	e006      	b.n	8004152 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
      break;
 8004148:	e004      	b.n	8004154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800414a:	bf00      	nop
 800414c:	e002      	b.n	8004154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800414e:	bf00      	nop
 8004150:	e000      	b.n	8004154 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004152:	bf00      	nop
    }

    if(status == HAL_OK)
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10d      	bne.n	8004176 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800415a:	4b49      	ldr	r3, [pc, #292]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6819      	ldr	r1, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	3b01      	subs	r3, #1
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	430b      	orrs	r3, r1
 8004170:	4943      	ldr	r1, [pc, #268]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004172:	4313      	orrs	r3, r2
 8004174:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d17c      	bne.n	8004276 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800417c:	4b40      	ldr	r3, [pc, #256]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a3f      	ldr	r2, [pc, #252]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004182:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004188:	f7fd fd98 	bl	8001cbc <HAL_GetTick>
 800418c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800418e:	e009      	b.n	80041a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004190:	f7fd fd94 	bl	8001cbc <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d902      	bls.n	80041a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	73fb      	strb	r3, [r7, #15]
        break;
 80041a2:	e005      	b.n	80041b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041a4:	4b36      	ldr	r3, [pc, #216]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1ef      	bne.n	8004190 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d15f      	bne.n	8004276 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d110      	bne.n	80041de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041bc:	4b30      	ldr	r3, [pc, #192]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80041c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6892      	ldr	r2, [r2, #8]
 80041cc:	0211      	lsls	r1, r2, #8
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68d2      	ldr	r2, [r2, #12]
 80041d2:	06d2      	lsls	r2, r2, #27
 80041d4:	430a      	orrs	r2, r1
 80041d6:	492a      	ldr	r1, [pc, #168]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	610b      	str	r3, [r1, #16]
 80041dc:	e027      	b.n	800422e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d112      	bne.n	800420a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041e4:	4b26      	ldr	r3, [pc, #152]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80041ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6892      	ldr	r2, [r2, #8]
 80041f4:	0211      	lsls	r1, r2, #8
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6912      	ldr	r2, [r2, #16]
 80041fa:	0852      	lsrs	r2, r2, #1
 80041fc:	3a01      	subs	r2, #1
 80041fe:	0552      	lsls	r2, r2, #21
 8004200:	430a      	orrs	r2, r1
 8004202:	491f      	ldr	r1, [pc, #124]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004204:	4313      	orrs	r3, r2
 8004206:	610b      	str	r3, [r1, #16]
 8004208:	e011      	b.n	800422e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800420a:	4b1d      	ldr	r3, [pc, #116]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004212:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6892      	ldr	r2, [r2, #8]
 800421a:	0211      	lsls	r1, r2, #8
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6952      	ldr	r2, [r2, #20]
 8004220:	0852      	lsrs	r2, r2, #1
 8004222:	3a01      	subs	r2, #1
 8004224:	0652      	lsls	r2, r2, #25
 8004226:	430a      	orrs	r2, r1
 8004228:	4915      	ldr	r1, [pc, #84]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 800422a:	4313      	orrs	r3, r2
 800422c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800422e:	4b14      	ldr	r3, [pc, #80]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a13      	ldr	r2, [pc, #76]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004234:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004238:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423a:	f7fd fd3f 	bl	8001cbc <HAL_GetTick>
 800423e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004240:	e009      	b.n	8004256 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004242:	f7fd fd3b 	bl	8001cbc <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d902      	bls.n	8004256 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	73fb      	strb	r3, [r7, #15]
          break;
 8004254:	e005      	b.n	8004262 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004256:	4b0a      	ldr	r3, [pc, #40]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0ef      	beq.n	8004242 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004262:	7bfb      	ldrb	r3, [r7, #15]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d106      	bne.n	8004276 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004268:	4b05      	ldr	r3, [pc, #20]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	4903      	ldr	r1, [pc, #12]	@ (8004280 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004272:	4313      	orrs	r3, r2
 8004274:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40021000 	.word	0x40021000

08004284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e040      	b.n	8004318 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fd facc 	bl	8001844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2224      	movs	r2, #36	@ 0x24
 80042b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fade 	bl	800488c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f8af 	bl	8004434 <UART_SetConfig>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e01b      	b.n	8004318 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fb5d 	bl	80049d0 <UART_CheckIdleState>
 8004316:	4603      	mov	r3, r0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	@ 0x28
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	603b      	str	r3, [r7, #0]
 800432c:	4613      	mov	r3, r2
 800432e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004334:	2b20      	cmp	r3, #32
 8004336:	d177      	bne.n	8004428 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_UART_Transmit+0x24>
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e070      	b.n	800442a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2221      	movs	r2, #33	@ 0x21
 8004354:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004356:	f7fd fcb1 	bl	8001cbc <HAL_GetTick>
 800435a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	88fa      	ldrh	r2, [r7, #6]
 8004360:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	88fa      	ldrh	r2, [r7, #6]
 8004368:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004374:	d108      	bne.n	8004388 <HAL_UART_Transmit+0x68>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d104      	bne.n	8004388 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	e003      	b.n	8004390 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800438c:	2300      	movs	r3, #0
 800438e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004390:	e02f      	b.n	80043f2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2200      	movs	r2, #0
 800439a:	2180      	movs	r1, #128	@ 0x80
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 fbbf 	bl	8004b20 <UART_WaitOnFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e03b      	b.n	800442a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	881a      	ldrh	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c4:	b292      	uxth	r2, r2
 80043c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	3302      	adds	r3, #2
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	e007      	b.n	80043e0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	781a      	ldrb	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3301      	adds	r3, #1
 80043de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1c9      	bne.n	8004392 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2200      	movs	r2, #0
 8004406:	2140      	movs	r1, #64	@ 0x40
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 fb89 	bl	8004b20 <UART_WaitOnFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e005      	b.n	800442a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2220      	movs	r2, #32
 8004422:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	e000      	b.n	800442a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004428:	2302      	movs	r3, #2
  }
}
 800442a:	4618      	mov	r0, r3
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004438:	b08a      	sub	sp, #40	@ 0x28
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	431a      	orrs	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	431a      	orrs	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	4313      	orrs	r3, r2
 800445a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4bb4      	ldr	r3, [pc, #720]	@ (8004734 <UART_SetConfig+0x300>)
 8004464:	4013      	ands	r3, r2
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800446c:	430b      	orrs	r3, r1
 800446e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4aa9      	ldr	r2, [pc, #676]	@ (8004738 <UART_SetConfig+0x304>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d004      	beq.n	80044a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800449c:	4313      	orrs	r3, r2
 800449e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044b0:	430a      	orrs	r2, r1
 80044b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4aa0      	ldr	r2, [pc, #640]	@ (800473c <UART_SetConfig+0x308>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d126      	bne.n	800450c <UART_SetConfig+0xd8>
 80044be:	4ba0      	ldr	r3, [pc, #640]	@ (8004740 <UART_SetConfig+0x30c>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d81b      	bhi.n	8004504 <UART_SetConfig+0xd0>
 80044cc:	a201      	add	r2, pc, #4	@ (adr r2, 80044d4 <UART_SetConfig+0xa0>)
 80044ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d2:	bf00      	nop
 80044d4:	080044e5 	.word	0x080044e5
 80044d8:	080044f5 	.word	0x080044f5
 80044dc:	080044ed 	.word	0x080044ed
 80044e0:	080044fd 	.word	0x080044fd
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ea:	e080      	b.n	80045ee <UART_SetConfig+0x1ba>
 80044ec:	2302      	movs	r3, #2
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044f2:	e07c      	b.n	80045ee <UART_SetConfig+0x1ba>
 80044f4:	2304      	movs	r3, #4
 80044f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044fa:	e078      	b.n	80045ee <UART_SetConfig+0x1ba>
 80044fc:	2308      	movs	r3, #8
 80044fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004502:	e074      	b.n	80045ee <UART_SetConfig+0x1ba>
 8004504:	2310      	movs	r3, #16
 8004506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800450a:	e070      	b.n	80045ee <UART_SetConfig+0x1ba>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a8c      	ldr	r2, [pc, #560]	@ (8004744 <UART_SetConfig+0x310>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d138      	bne.n	8004588 <UART_SetConfig+0x154>
 8004516:	4b8a      	ldr	r3, [pc, #552]	@ (8004740 <UART_SetConfig+0x30c>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451c:	f003 030c 	and.w	r3, r3, #12
 8004520:	2b0c      	cmp	r3, #12
 8004522:	d82d      	bhi.n	8004580 <UART_SetConfig+0x14c>
 8004524:	a201      	add	r2, pc, #4	@ (adr r2, 800452c <UART_SetConfig+0xf8>)
 8004526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452a:	bf00      	nop
 800452c:	08004561 	.word	0x08004561
 8004530:	08004581 	.word	0x08004581
 8004534:	08004581 	.word	0x08004581
 8004538:	08004581 	.word	0x08004581
 800453c:	08004571 	.word	0x08004571
 8004540:	08004581 	.word	0x08004581
 8004544:	08004581 	.word	0x08004581
 8004548:	08004581 	.word	0x08004581
 800454c:	08004569 	.word	0x08004569
 8004550:	08004581 	.word	0x08004581
 8004554:	08004581 	.word	0x08004581
 8004558:	08004581 	.word	0x08004581
 800455c:	08004579 	.word	0x08004579
 8004560:	2300      	movs	r3, #0
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004566:	e042      	b.n	80045ee <UART_SetConfig+0x1ba>
 8004568:	2302      	movs	r3, #2
 800456a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800456e:	e03e      	b.n	80045ee <UART_SetConfig+0x1ba>
 8004570:	2304      	movs	r3, #4
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004576:	e03a      	b.n	80045ee <UART_SetConfig+0x1ba>
 8004578:	2308      	movs	r3, #8
 800457a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800457e:	e036      	b.n	80045ee <UART_SetConfig+0x1ba>
 8004580:	2310      	movs	r3, #16
 8004582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004586:	e032      	b.n	80045ee <UART_SetConfig+0x1ba>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a6a      	ldr	r2, [pc, #424]	@ (8004738 <UART_SetConfig+0x304>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d12a      	bne.n	80045e8 <UART_SetConfig+0x1b4>
 8004592:	4b6b      	ldr	r3, [pc, #428]	@ (8004740 <UART_SetConfig+0x30c>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004598:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800459c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045a0:	d01a      	beq.n	80045d8 <UART_SetConfig+0x1a4>
 80045a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045a6:	d81b      	bhi.n	80045e0 <UART_SetConfig+0x1ac>
 80045a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ac:	d00c      	beq.n	80045c8 <UART_SetConfig+0x194>
 80045ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045b2:	d815      	bhi.n	80045e0 <UART_SetConfig+0x1ac>
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <UART_SetConfig+0x18c>
 80045b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045bc:	d008      	beq.n	80045d0 <UART_SetConfig+0x19c>
 80045be:	e00f      	b.n	80045e0 <UART_SetConfig+0x1ac>
 80045c0:	2300      	movs	r3, #0
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c6:	e012      	b.n	80045ee <UART_SetConfig+0x1ba>
 80045c8:	2302      	movs	r3, #2
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ce:	e00e      	b.n	80045ee <UART_SetConfig+0x1ba>
 80045d0:	2304      	movs	r3, #4
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d6:	e00a      	b.n	80045ee <UART_SetConfig+0x1ba>
 80045d8:	2308      	movs	r3, #8
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045de:	e006      	b.n	80045ee <UART_SetConfig+0x1ba>
 80045e0:	2310      	movs	r3, #16
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045e6:	e002      	b.n	80045ee <UART_SetConfig+0x1ba>
 80045e8:	2310      	movs	r3, #16
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a51      	ldr	r2, [pc, #324]	@ (8004738 <UART_SetConfig+0x304>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d17a      	bne.n	80046ee <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d824      	bhi.n	800464a <UART_SetConfig+0x216>
 8004600:	a201      	add	r2, pc, #4	@ (adr r2, 8004608 <UART_SetConfig+0x1d4>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	0800462d 	.word	0x0800462d
 800460c:	0800464b 	.word	0x0800464b
 8004610:	08004635 	.word	0x08004635
 8004614:	0800464b 	.word	0x0800464b
 8004618:	0800463b 	.word	0x0800463b
 800461c:	0800464b 	.word	0x0800464b
 8004620:	0800464b 	.word	0x0800464b
 8004624:	0800464b 	.word	0x0800464b
 8004628:	08004643 	.word	0x08004643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800462c:	f7ff faa6 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8004630:	61f8      	str	r0, [r7, #28]
        break;
 8004632:	e010      	b.n	8004656 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004634:	4b44      	ldr	r3, [pc, #272]	@ (8004748 <UART_SetConfig+0x314>)
 8004636:	61fb      	str	r3, [r7, #28]
        break;
 8004638:	e00d      	b.n	8004656 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463a:	f7ff fa07 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 800463e:	61f8      	str	r0, [r7, #28]
        break;
 8004640:	e009      	b.n	8004656 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004646:	61fb      	str	r3, [r7, #28]
        break;
 8004648:	e005      	b.n	8004656 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004654:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8107 	beq.w	800486c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	4413      	add	r3, r2
 8004668:	69fa      	ldr	r2, [r7, #28]
 800466a:	429a      	cmp	r2, r3
 800466c:	d305      	bcc.n	800467a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	429a      	cmp	r2, r3
 8004678:	d903      	bls.n	8004682 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004680:	e0f4      	b.n	800486c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	2200      	movs	r2, #0
 8004686:	461c      	mov	r4, r3
 8004688:	4615      	mov	r5, r2
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	f04f 0300 	mov.w	r3, #0
 8004692:	022b      	lsls	r3, r5, #8
 8004694:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004698:	0222      	lsls	r2, r4, #8
 800469a:	68f9      	ldr	r1, [r7, #12]
 800469c:	6849      	ldr	r1, [r1, #4]
 800469e:	0849      	lsrs	r1, r1, #1
 80046a0:	2000      	movs	r0, #0
 80046a2:	4688      	mov	r8, r1
 80046a4:	4681      	mov	r9, r0
 80046a6:	eb12 0a08 	adds.w	sl, r2, r8
 80046aa:	eb43 0b09 	adc.w	fp, r3, r9
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	603b      	str	r3, [r7, #0]
 80046b6:	607a      	str	r2, [r7, #4]
 80046b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046bc:	4650      	mov	r0, sl
 80046be:	4659      	mov	r1, fp
 80046c0:	f7fc fa72 	bl	8000ba8 <__aeabi_uldivmod>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4613      	mov	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046d2:	d308      	bcc.n	80046e6 <UART_SetConfig+0x2b2>
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046da:	d204      	bcs.n	80046e6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	60da      	str	r2, [r3, #12]
 80046e4:	e0c2      	b.n	800486c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046ec:	e0be      	b.n	800486c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046f6:	d16a      	bne.n	80047ce <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80046f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d834      	bhi.n	800476a <UART_SetConfig+0x336>
 8004700:	a201      	add	r2, pc, #4	@ (adr r2, 8004708 <UART_SetConfig+0x2d4>)
 8004702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004706:	bf00      	nop
 8004708:	0800472d 	.word	0x0800472d
 800470c:	0800474d 	.word	0x0800474d
 8004710:	08004755 	.word	0x08004755
 8004714:	0800476b 	.word	0x0800476b
 8004718:	0800475b 	.word	0x0800475b
 800471c:	0800476b 	.word	0x0800476b
 8004720:	0800476b 	.word	0x0800476b
 8004724:	0800476b 	.word	0x0800476b
 8004728:	08004763 	.word	0x08004763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800472c:	f7ff fa26 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8004730:	61f8      	str	r0, [r7, #28]
        break;
 8004732:	e020      	b.n	8004776 <UART_SetConfig+0x342>
 8004734:	efff69f3 	.word	0xefff69f3
 8004738:	40008000 	.word	0x40008000
 800473c:	40013800 	.word	0x40013800
 8004740:	40021000 	.word	0x40021000
 8004744:	40004400 	.word	0x40004400
 8004748:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800474c:	f7ff fa2c 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 8004750:	61f8      	str	r0, [r7, #28]
        break;
 8004752:	e010      	b.n	8004776 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004754:	4b4c      	ldr	r3, [pc, #304]	@ (8004888 <UART_SetConfig+0x454>)
 8004756:	61fb      	str	r3, [r7, #28]
        break;
 8004758:	e00d      	b.n	8004776 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800475a:	f7ff f977 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 800475e:	61f8      	str	r0, [r7, #28]
        break;
 8004760:	e009      	b.n	8004776 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004766:	61fb      	str	r3, [r7, #28]
        break;
 8004768:	e005      	b.n	8004776 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800476a:	2300      	movs	r3, #0
 800476c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004774:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d077      	beq.n	800486c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	005a      	lsls	r2, r3, #1
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	085b      	lsrs	r3, r3, #1
 8004786:	441a      	add	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004790:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	2b0f      	cmp	r3, #15
 8004796:	d916      	bls.n	80047c6 <UART_SetConfig+0x392>
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800479e:	d212      	bcs.n	80047c6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	f023 030f 	bic.w	r3, r3, #15
 80047a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	085b      	lsrs	r3, r3, #1
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	8afb      	ldrh	r3, [r7, #22]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	8afa      	ldrh	r2, [r7, #22]
 80047c2:	60da      	str	r2, [r3, #12]
 80047c4:	e052      	b.n	800486c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80047cc:	e04e      	b.n	800486c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d827      	bhi.n	8004826 <UART_SetConfig+0x3f2>
 80047d6:	a201      	add	r2, pc, #4	@ (adr r2, 80047dc <UART_SetConfig+0x3a8>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	08004801 	.word	0x08004801
 80047e0:	08004809 	.word	0x08004809
 80047e4:	08004811 	.word	0x08004811
 80047e8:	08004827 	.word	0x08004827
 80047ec:	08004817 	.word	0x08004817
 80047f0:	08004827 	.word	0x08004827
 80047f4:	08004827 	.word	0x08004827
 80047f8:	08004827 	.word	0x08004827
 80047fc:	0800481f 	.word	0x0800481f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004800:	f7ff f9bc 	bl	8003b7c <HAL_RCC_GetPCLK1Freq>
 8004804:	61f8      	str	r0, [r7, #28]
        break;
 8004806:	e014      	b.n	8004832 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004808:	f7ff f9ce 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 800480c:	61f8      	str	r0, [r7, #28]
        break;
 800480e:	e010      	b.n	8004832 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004810:	4b1d      	ldr	r3, [pc, #116]	@ (8004888 <UART_SetConfig+0x454>)
 8004812:	61fb      	str	r3, [r7, #28]
        break;
 8004814:	e00d      	b.n	8004832 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004816:	f7ff f919 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 800481a:	61f8      	str	r0, [r7, #28]
        break;
 800481c:	e009      	b.n	8004832 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800481e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004822:	61fb      	str	r3, [r7, #28]
        break;
 8004824:	e005      	b.n	8004832 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004830:	bf00      	nop
    }

    if (pclk != 0U)
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d019      	beq.n	800486c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	085a      	lsrs	r2, r3, #1
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	441a      	add	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	fbb2 f3f3 	udiv	r3, r2, r3
 800484a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b0f      	cmp	r3, #15
 8004850:	d909      	bls.n	8004866 <UART_SetConfig+0x432>
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004858:	d205      	bcs.n	8004866 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60da      	str	r2, [r3, #12]
 8004864:	e002      	b.n	800486c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004878:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800487c:	4618      	mov	r0, r3
 800487e:	3728      	adds	r7, #40	@ 0x28
 8004880:	46bd      	mov	sp, r7
 8004882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004886:	bf00      	nop
 8004888:	00f42400 	.word	0x00f42400

0800488c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01a      	beq.n	80049a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800498a:	d10a      	bne.n	80049a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	605a      	str	r2, [r3, #4]
  }
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b098      	sub	sp, #96	@ 0x60
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049e0:	f7fd f96c 	bl	8001cbc <HAL_GetTick>
 80049e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d12e      	bne.n	8004a52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049fc:	2200      	movs	r2, #0
 80049fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f88c 	bl	8004b20 <UART_WaitOnFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d021      	beq.n	8004a52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a16:	e853 3f00 	ldrex	r3, [r3]
 8004a1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a22:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a2e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a34:	e841 2300 	strex	r3, r2, [r1]
 8004a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e6      	bne.n	8004a0e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2220      	movs	r2, #32
 8004a44:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e062      	b.n	8004b18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d149      	bne.n	8004af4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f856 	bl	8004b20 <UART_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d03c      	beq.n	8004af4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	623b      	str	r3, [r7, #32]
   return(result);
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e6      	bne.n	8004a7a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0301 	bic.w	r3, r3, #1
 8004ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3308      	adds	r3, #8
 8004aca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004acc:	61fa      	str	r2, [r7, #28]
 8004ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	69b9      	ldr	r1, [r7, #24]
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	e841 2300 	strex	r3, r2, [r1]
 8004ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1e5      	bne.n	8004aac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e011      	b.n	8004b18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3758      	adds	r7, #88	@ 0x58
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b30:	e04f      	b.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b38:	d04b      	beq.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b3a:	f7fd f8bf 	bl	8001cbc <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d302      	bcc.n	8004b50 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e04e      	b.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d037      	beq.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b80      	cmp	r3, #128	@ 0x80
 8004b66:	d034      	beq.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	2b40      	cmp	r3, #64	@ 0x40
 8004b6c:	d031      	beq.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d110      	bne.n	8004b9e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2208      	movs	r2, #8
 8004b82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f838 	bl	8004bfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2208      	movs	r2, #8
 8004b8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e029      	b.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ba8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bac:	d111      	bne.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004bb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 f81e 	bl	8004bfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e00f      	b.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	bf0c      	ite	eq
 8004be2:	2301      	moveq	r3, #1
 8004be4:	2300      	movne	r3, #0
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d0a0      	beq.n	8004b32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b095      	sub	sp, #84	@ 0x54
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c0a:	e853 3f00 	ldrex	r3, [r3]
 8004c0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c22:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c28:	e841 2300 	strex	r3, r2, [r1]
 8004c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e6      	bne.n	8004c02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3308      	adds	r3, #8
 8004c3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	e853 3f00 	ldrex	r3, [r3]
 8004c42:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	3308      	adds	r3, #8
 8004c52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e5      	bne.n	8004c34 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d118      	bne.n	8004ca2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f023 0310 	bic.w	r3, r3, #16
 8004c84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c8e:	61bb      	str	r3, [r7, #24]
 8004c90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6979      	ldr	r1, [r7, #20]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e6      	bne.n	8004c70 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004cb6:	bf00      	nop
 8004cb8:	3754      	adds	r7, #84	@ 0x54
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
	...

08004cc4 <malloc>:
 8004cc4:	4b02      	ldr	r3, [pc, #8]	@ (8004cd0 <malloc+0xc>)
 8004cc6:	4601      	mov	r1, r0
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	f000 b825 	b.w	8004d18 <_malloc_r>
 8004cce:	bf00      	nop
 8004cd0:	20000018 	.word	0x20000018

08004cd4 <sbrk_aligned>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4e0f      	ldr	r6, [pc, #60]	@ (8004d14 <sbrk_aligned+0x40>)
 8004cd8:	460c      	mov	r4, r1
 8004cda:	6831      	ldr	r1, [r6, #0]
 8004cdc:	4605      	mov	r5, r0
 8004cde:	b911      	cbnz	r1, 8004ce6 <sbrk_aligned+0x12>
 8004ce0:	f000 feaa 	bl	8005a38 <_sbrk_r>
 8004ce4:	6030      	str	r0, [r6, #0]
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	4628      	mov	r0, r5
 8004cea:	f000 fea5 	bl	8005a38 <_sbrk_r>
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	d103      	bne.n	8004cfa <sbrk_aligned+0x26>
 8004cf2:	f04f 34ff 	mov.w	r4, #4294967295
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	bd70      	pop	{r4, r5, r6, pc}
 8004cfa:	1cc4      	adds	r4, r0, #3
 8004cfc:	f024 0403 	bic.w	r4, r4, #3
 8004d00:	42a0      	cmp	r0, r4
 8004d02:	d0f8      	beq.n	8004cf6 <sbrk_aligned+0x22>
 8004d04:	1a21      	subs	r1, r4, r0
 8004d06:	4628      	mov	r0, r5
 8004d08:	f000 fe96 	bl	8005a38 <_sbrk_r>
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	d1f2      	bne.n	8004cf6 <sbrk_aligned+0x22>
 8004d10:	e7ef      	b.n	8004cf2 <sbrk_aligned+0x1e>
 8004d12:	bf00      	nop
 8004d14:	20001310 	.word	0x20001310

08004d18 <_malloc_r>:
 8004d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d1c:	1ccd      	adds	r5, r1, #3
 8004d1e:	f025 0503 	bic.w	r5, r5, #3
 8004d22:	3508      	adds	r5, #8
 8004d24:	2d0c      	cmp	r5, #12
 8004d26:	bf38      	it	cc
 8004d28:	250c      	movcc	r5, #12
 8004d2a:	2d00      	cmp	r5, #0
 8004d2c:	4606      	mov	r6, r0
 8004d2e:	db01      	blt.n	8004d34 <_malloc_r+0x1c>
 8004d30:	42a9      	cmp	r1, r5
 8004d32:	d904      	bls.n	8004d3e <_malloc_r+0x26>
 8004d34:	230c      	movs	r3, #12
 8004d36:	6033      	str	r3, [r6, #0]
 8004d38:	2000      	movs	r0, #0
 8004d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e14 <_malloc_r+0xfc>
 8004d42:	f000 f869 	bl	8004e18 <__malloc_lock>
 8004d46:	f8d8 3000 	ldr.w	r3, [r8]
 8004d4a:	461c      	mov	r4, r3
 8004d4c:	bb44      	cbnz	r4, 8004da0 <_malloc_r+0x88>
 8004d4e:	4629      	mov	r1, r5
 8004d50:	4630      	mov	r0, r6
 8004d52:	f7ff ffbf 	bl	8004cd4 <sbrk_aligned>
 8004d56:	1c43      	adds	r3, r0, #1
 8004d58:	4604      	mov	r4, r0
 8004d5a:	d158      	bne.n	8004e0e <_malloc_r+0xf6>
 8004d5c:	f8d8 4000 	ldr.w	r4, [r8]
 8004d60:	4627      	mov	r7, r4
 8004d62:	2f00      	cmp	r7, #0
 8004d64:	d143      	bne.n	8004dee <_malloc_r+0xd6>
 8004d66:	2c00      	cmp	r4, #0
 8004d68:	d04b      	beq.n	8004e02 <_malloc_r+0xea>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	4639      	mov	r1, r7
 8004d6e:	4630      	mov	r0, r6
 8004d70:	eb04 0903 	add.w	r9, r4, r3
 8004d74:	f000 fe60 	bl	8005a38 <_sbrk_r>
 8004d78:	4581      	cmp	r9, r0
 8004d7a:	d142      	bne.n	8004e02 <_malloc_r+0xea>
 8004d7c:	6821      	ldr	r1, [r4, #0]
 8004d7e:	1a6d      	subs	r5, r5, r1
 8004d80:	4629      	mov	r1, r5
 8004d82:	4630      	mov	r0, r6
 8004d84:	f7ff ffa6 	bl	8004cd4 <sbrk_aligned>
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d03a      	beq.n	8004e02 <_malloc_r+0xea>
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	442b      	add	r3, r5
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	f8d8 3000 	ldr.w	r3, [r8]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	bb62      	cbnz	r2, 8004df4 <_malloc_r+0xdc>
 8004d9a:	f8c8 7000 	str.w	r7, [r8]
 8004d9e:	e00f      	b.n	8004dc0 <_malloc_r+0xa8>
 8004da0:	6822      	ldr	r2, [r4, #0]
 8004da2:	1b52      	subs	r2, r2, r5
 8004da4:	d420      	bmi.n	8004de8 <_malloc_r+0xd0>
 8004da6:	2a0b      	cmp	r2, #11
 8004da8:	d917      	bls.n	8004dda <_malloc_r+0xc2>
 8004daa:	1961      	adds	r1, r4, r5
 8004dac:	42a3      	cmp	r3, r4
 8004dae:	6025      	str	r5, [r4, #0]
 8004db0:	bf18      	it	ne
 8004db2:	6059      	strne	r1, [r3, #4]
 8004db4:	6863      	ldr	r3, [r4, #4]
 8004db6:	bf08      	it	eq
 8004db8:	f8c8 1000 	streq.w	r1, [r8]
 8004dbc:	5162      	str	r2, [r4, r5]
 8004dbe:	604b      	str	r3, [r1, #4]
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	f000 f82f 	bl	8004e24 <__malloc_unlock>
 8004dc6:	f104 000b 	add.w	r0, r4, #11
 8004dca:	1d23      	adds	r3, r4, #4
 8004dcc:	f020 0007 	bic.w	r0, r0, #7
 8004dd0:	1ac2      	subs	r2, r0, r3
 8004dd2:	bf1c      	itt	ne
 8004dd4:	1a1b      	subne	r3, r3, r0
 8004dd6:	50a3      	strne	r3, [r4, r2]
 8004dd8:	e7af      	b.n	8004d3a <_malloc_r+0x22>
 8004dda:	6862      	ldr	r2, [r4, #4]
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	bf0c      	ite	eq
 8004de0:	f8c8 2000 	streq.w	r2, [r8]
 8004de4:	605a      	strne	r2, [r3, #4]
 8004de6:	e7eb      	b.n	8004dc0 <_malloc_r+0xa8>
 8004de8:	4623      	mov	r3, r4
 8004dea:	6864      	ldr	r4, [r4, #4]
 8004dec:	e7ae      	b.n	8004d4c <_malloc_r+0x34>
 8004dee:	463c      	mov	r4, r7
 8004df0:	687f      	ldr	r7, [r7, #4]
 8004df2:	e7b6      	b.n	8004d62 <_malloc_r+0x4a>
 8004df4:	461a      	mov	r2, r3
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	d1fb      	bne.n	8004df4 <_malloc_r+0xdc>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	6053      	str	r3, [r2, #4]
 8004e00:	e7de      	b.n	8004dc0 <_malloc_r+0xa8>
 8004e02:	230c      	movs	r3, #12
 8004e04:	6033      	str	r3, [r6, #0]
 8004e06:	4630      	mov	r0, r6
 8004e08:	f000 f80c 	bl	8004e24 <__malloc_unlock>
 8004e0c:	e794      	b.n	8004d38 <_malloc_r+0x20>
 8004e0e:	6005      	str	r5, [r0, #0]
 8004e10:	e7d6      	b.n	8004dc0 <_malloc_r+0xa8>
 8004e12:	bf00      	nop
 8004e14:	20001314 	.word	0x20001314

08004e18 <__malloc_lock>:
 8004e18:	4801      	ldr	r0, [pc, #4]	@ (8004e20 <__malloc_lock+0x8>)
 8004e1a:	f000 be5a 	b.w	8005ad2 <__retarget_lock_acquire_recursive>
 8004e1e:	bf00      	nop
 8004e20:	20001458 	.word	0x20001458

08004e24 <__malloc_unlock>:
 8004e24:	4801      	ldr	r0, [pc, #4]	@ (8004e2c <__malloc_unlock+0x8>)
 8004e26:	f000 be55 	b.w	8005ad4 <__retarget_lock_release_recursive>
 8004e2a:	bf00      	nop
 8004e2c:	20001458 	.word	0x20001458

08004e30 <_realloc_r>:
 8004e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e34:	4680      	mov	r8, r0
 8004e36:	4615      	mov	r5, r2
 8004e38:	460c      	mov	r4, r1
 8004e3a:	b921      	cbnz	r1, 8004e46 <_realloc_r+0x16>
 8004e3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e40:	4611      	mov	r1, r2
 8004e42:	f7ff bf69 	b.w	8004d18 <_malloc_r>
 8004e46:	b92a      	cbnz	r2, 8004e54 <_realloc_r+0x24>
 8004e48:	f001 fca2 	bl	8006790 <_free_r>
 8004e4c:	2400      	movs	r4, #0
 8004e4e:	4620      	mov	r0, r4
 8004e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e54:	f002 f868 	bl	8006f28 <_malloc_usable_size_r>
 8004e58:	4285      	cmp	r5, r0
 8004e5a:	4606      	mov	r6, r0
 8004e5c:	d802      	bhi.n	8004e64 <_realloc_r+0x34>
 8004e5e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004e62:	d8f4      	bhi.n	8004e4e <_realloc_r+0x1e>
 8004e64:	4629      	mov	r1, r5
 8004e66:	4640      	mov	r0, r8
 8004e68:	f7ff ff56 	bl	8004d18 <_malloc_r>
 8004e6c:	4607      	mov	r7, r0
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	d0ec      	beq.n	8004e4c <_realloc_r+0x1c>
 8004e72:	42b5      	cmp	r5, r6
 8004e74:	462a      	mov	r2, r5
 8004e76:	4621      	mov	r1, r4
 8004e78:	bf28      	it	cs
 8004e7a:	4632      	movcs	r2, r6
 8004e7c:	f000 fe2b 	bl	8005ad6 <memcpy>
 8004e80:	4621      	mov	r1, r4
 8004e82:	4640      	mov	r0, r8
 8004e84:	f001 fc84 	bl	8006790 <_free_r>
 8004e88:	463c      	mov	r4, r7
 8004e8a:	e7e0      	b.n	8004e4e <_realloc_r+0x1e>

08004e8c <__cvt>:
 8004e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e90:	ec57 6b10 	vmov	r6, r7, d0
 8004e94:	2f00      	cmp	r7, #0
 8004e96:	460c      	mov	r4, r1
 8004e98:	4619      	mov	r1, r3
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	bfbb      	ittet	lt
 8004e9e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004ea2:	461f      	movlt	r7, r3
 8004ea4:	2300      	movge	r3, #0
 8004ea6:	232d      	movlt	r3, #45	@ 0x2d
 8004ea8:	700b      	strb	r3, [r1, #0]
 8004eaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004eac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004eb0:	4691      	mov	r9, r2
 8004eb2:	f023 0820 	bic.w	r8, r3, #32
 8004eb6:	bfbc      	itt	lt
 8004eb8:	4632      	movlt	r2, r6
 8004eba:	4616      	movlt	r6, r2
 8004ebc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ec0:	d005      	beq.n	8004ece <__cvt+0x42>
 8004ec2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004ec6:	d100      	bne.n	8004eca <__cvt+0x3e>
 8004ec8:	3401      	adds	r4, #1
 8004eca:	2102      	movs	r1, #2
 8004ecc:	e000      	b.n	8004ed0 <__cvt+0x44>
 8004ece:	2103      	movs	r1, #3
 8004ed0:	ab03      	add	r3, sp, #12
 8004ed2:	9301      	str	r3, [sp, #4]
 8004ed4:	ab02      	add	r3, sp, #8
 8004ed6:	9300      	str	r3, [sp, #0]
 8004ed8:	ec47 6b10 	vmov	d0, r6, r7
 8004edc:	4653      	mov	r3, sl
 8004ede:	4622      	mov	r2, r4
 8004ee0:	f000 fe92 	bl	8005c08 <_dtoa_r>
 8004ee4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004ee8:	4605      	mov	r5, r0
 8004eea:	d119      	bne.n	8004f20 <__cvt+0x94>
 8004eec:	f019 0f01 	tst.w	r9, #1
 8004ef0:	d00e      	beq.n	8004f10 <__cvt+0x84>
 8004ef2:	eb00 0904 	add.w	r9, r0, r4
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2300      	movs	r3, #0
 8004efa:	4630      	mov	r0, r6
 8004efc:	4639      	mov	r1, r7
 8004efe:	f7fb fde3 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f02:	b108      	cbz	r0, 8004f08 <__cvt+0x7c>
 8004f04:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f08:	2230      	movs	r2, #48	@ 0x30
 8004f0a:	9b03      	ldr	r3, [sp, #12]
 8004f0c:	454b      	cmp	r3, r9
 8004f0e:	d31e      	bcc.n	8004f4e <__cvt+0xc2>
 8004f10:	9b03      	ldr	r3, [sp, #12]
 8004f12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004f14:	1b5b      	subs	r3, r3, r5
 8004f16:	4628      	mov	r0, r5
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	b004      	add	sp, #16
 8004f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f24:	eb00 0904 	add.w	r9, r0, r4
 8004f28:	d1e5      	bne.n	8004ef6 <__cvt+0x6a>
 8004f2a:	7803      	ldrb	r3, [r0, #0]
 8004f2c:	2b30      	cmp	r3, #48	@ 0x30
 8004f2e:	d10a      	bne.n	8004f46 <__cvt+0xba>
 8004f30:	2200      	movs	r2, #0
 8004f32:	2300      	movs	r3, #0
 8004f34:	4630      	mov	r0, r6
 8004f36:	4639      	mov	r1, r7
 8004f38:	f7fb fdc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f3c:	b918      	cbnz	r0, 8004f46 <__cvt+0xba>
 8004f3e:	f1c4 0401 	rsb	r4, r4, #1
 8004f42:	f8ca 4000 	str.w	r4, [sl]
 8004f46:	f8da 3000 	ldr.w	r3, [sl]
 8004f4a:	4499      	add	r9, r3
 8004f4c:	e7d3      	b.n	8004ef6 <__cvt+0x6a>
 8004f4e:	1c59      	adds	r1, r3, #1
 8004f50:	9103      	str	r1, [sp, #12]
 8004f52:	701a      	strb	r2, [r3, #0]
 8004f54:	e7d9      	b.n	8004f0a <__cvt+0x7e>

08004f56 <__exponent>:
 8004f56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f58:	2900      	cmp	r1, #0
 8004f5a:	bfba      	itte	lt
 8004f5c:	4249      	neglt	r1, r1
 8004f5e:	232d      	movlt	r3, #45	@ 0x2d
 8004f60:	232b      	movge	r3, #43	@ 0x2b
 8004f62:	2909      	cmp	r1, #9
 8004f64:	7002      	strb	r2, [r0, #0]
 8004f66:	7043      	strb	r3, [r0, #1]
 8004f68:	dd29      	ble.n	8004fbe <__exponent+0x68>
 8004f6a:	f10d 0307 	add.w	r3, sp, #7
 8004f6e:	461d      	mov	r5, r3
 8004f70:	270a      	movs	r7, #10
 8004f72:	461a      	mov	r2, r3
 8004f74:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f78:	fb07 1416 	mls	r4, r7, r6, r1
 8004f7c:	3430      	adds	r4, #48	@ 0x30
 8004f7e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004f82:	460c      	mov	r4, r1
 8004f84:	2c63      	cmp	r4, #99	@ 0x63
 8004f86:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f8a:	4631      	mov	r1, r6
 8004f8c:	dcf1      	bgt.n	8004f72 <__exponent+0x1c>
 8004f8e:	3130      	adds	r1, #48	@ 0x30
 8004f90:	1e94      	subs	r4, r2, #2
 8004f92:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f96:	1c41      	adds	r1, r0, #1
 8004f98:	4623      	mov	r3, r4
 8004f9a:	42ab      	cmp	r3, r5
 8004f9c:	d30a      	bcc.n	8004fb4 <__exponent+0x5e>
 8004f9e:	f10d 0309 	add.w	r3, sp, #9
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	42ac      	cmp	r4, r5
 8004fa6:	bf88      	it	hi
 8004fa8:	2300      	movhi	r3, #0
 8004faa:	3302      	adds	r3, #2
 8004fac:	4403      	add	r3, r0
 8004fae:	1a18      	subs	r0, r3, r0
 8004fb0:	b003      	add	sp, #12
 8004fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004fb8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004fbc:	e7ed      	b.n	8004f9a <__exponent+0x44>
 8004fbe:	2330      	movs	r3, #48	@ 0x30
 8004fc0:	3130      	adds	r1, #48	@ 0x30
 8004fc2:	7083      	strb	r3, [r0, #2]
 8004fc4:	70c1      	strb	r1, [r0, #3]
 8004fc6:	1d03      	adds	r3, r0, #4
 8004fc8:	e7f1      	b.n	8004fae <__exponent+0x58>
	...

08004fcc <_printf_float>:
 8004fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd0:	b08d      	sub	sp, #52	@ 0x34
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004fd8:	4616      	mov	r6, r2
 8004fda:	461f      	mov	r7, r3
 8004fdc:	4605      	mov	r5, r0
 8004fde:	f000 fcf3 	bl	80059c8 <_localeconv_r>
 8004fe2:	6803      	ldr	r3, [r0, #0]
 8004fe4:	9304      	str	r3, [sp, #16]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fb f942 	bl	8000270 <strlen>
 8004fec:	2300      	movs	r3, #0
 8004fee:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ff4:	9005      	str	r0, [sp, #20]
 8004ff6:	3307      	adds	r3, #7
 8004ff8:	f023 0307 	bic.w	r3, r3, #7
 8004ffc:	f103 0208 	add.w	r2, r3, #8
 8005000:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005004:	f8d4 b000 	ldr.w	fp, [r4]
 8005008:	f8c8 2000 	str.w	r2, [r8]
 800500c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005010:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005014:	9307      	str	r3, [sp, #28]
 8005016:	f8cd 8018 	str.w	r8, [sp, #24]
 800501a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800501e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005022:	4b9c      	ldr	r3, [pc, #624]	@ (8005294 <_printf_float+0x2c8>)
 8005024:	f04f 32ff 	mov.w	r2, #4294967295
 8005028:	f7fb fd80 	bl	8000b2c <__aeabi_dcmpun>
 800502c:	bb70      	cbnz	r0, 800508c <_printf_float+0xc0>
 800502e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005032:	4b98      	ldr	r3, [pc, #608]	@ (8005294 <_printf_float+0x2c8>)
 8005034:	f04f 32ff 	mov.w	r2, #4294967295
 8005038:	f7fb fd5a 	bl	8000af0 <__aeabi_dcmple>
 800503c:	bb30      	cbnz	r0, 800508c <_printf_float+0xc0>
 800503e:	2200      	movs	r2, #0
 8005040:	2300      	movs	r3, #0
 8005042:	4640      	mov	r0, r8
 8005044:	4649      	mov	r1, r9
 8005046:	f7fb fd49 	bl	8000adc <__aeabi_dcmplt>
 800504a:	b110      	cbz	r0, 8005052 <_printf_float+0x86>
 800504c:	232d      	movs	r3, #45	@ 0x2d
 800504e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005052:	4a91      	ldr	r2, [pc, #580]	@ (8005298 <_printf_float+0x2cc>)
 8005054:	4b91      	ldr	r3, [pc, #580]	@ (800529c <_printf_float+0x2d0>)
 8005056:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800505a:	bf94      	ite	ls
 800505c:	4690      	movls	r8, r2
 800505e:	4698      	movhi	r8, r3
 8005060:	2303      	movs	r3, #3
 8005062:	6123      	str	r3, [r4, #16]
 8005064:	f02b 0304 	bic.w	r3, fp, #4
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	f04f 0900 	mov.w	r9, #0
 800506e:	9700      	str	r7, [sp, #0]
 8005070:	4633      	mov	r3, r6
 8005072:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005074:	4621      	mov	r1, r4
 8005076:	4628      	mov	r0, r5
 8005078:	f000 f9d2 	bl	8005420 <_printf_common>
 800507c:	3001      	adds	r0, #1
 800507e:	f040 808d 	bne.w	800519c <_printf_float+0x1d0>
 8005082:	f04f 30ff 	mov.w	r0, #4294967295
 8005086:	b00d      	add	sp, #52	@ 0x34
 8005088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508c:	4642      	mov	r2, r8
 800508e:	464b      	mov	r3, r9
 8005090:	4640      	mov	r0, r8
 8005092:	4649      	mov	r1, r9
 8005094:	f7fb fd4a 	bl	8000b2c <__aeabi_dcmpun>
 8005098:	b140      	cbz	r0, 80050ac <_printf_float+0xe0>
 800509a:	464b      	mov	r3, r9
 800509c:	2b00      	cmp	r3, #0
 800509e:	bfbc      	itt	lt
 80050a0:	232d      	movlt	r3, #45	@ 0x2d
 80050a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80050a6:	4a7e      	ldr	r2, [pc, #504]	@ (80052a0 <_printf_float+0x2d4>)
 80050a8:	4b7e      	ldr	r3, [pc, #504]	@ (80052a4 <_printf_float+0x2d8>)
 80050aa:	e7d4      	b.n	8005056 <_printf_float+0x8a>
 80050ac:	6863      	ldr	r3, [r4, #4]
 80050ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80050b2:	9206      	str	r2, [sp, #24]
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	d13b      	bne.n	8005130 <_printf_float+0x164>
 80050b8:	2306      	movs	r3, #6
 80050ba:	6063      	str	r3, [r4, #4]
 80050bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80050c0:	2300      	movs	r3, #0
 80050c2:	6022      	str	r2, [r4, #0]
 80050c4:	9303      	str	r3, [sp, #12]
 80050c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80050c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80050cc:	ab09      	add	r3, sp, #36	@ 0x24
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	6861      	ldr	r1, [r4, #4]
 80050d2:	ec49 8b10 	vmov	d0, r8, r9
 80050d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80050da:	4628      	mov	r0, r5
 80050dc:	f7ff fed6 	bl	8004e8c <__cvt>
 80050e0:	9b06      	ldr	r3, [sp, #24]
 80050e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80050e4:	2b47      	cmp	r3, #71	@ 0x47
 80050e6:	4680      	mov	r8, r0
 80050e8:	d129      	bne.n	800513e <_printf_float+0x172>
 80050ea:	1cc8      	adds	r0, r1, #3
 80050ec:	db02      	blt.n	80050f4 <_printf_float+0x128>
 80050ee:	6863      	ldr	r3, [r4, #4]
 80050f0:	4299      	cmp	r1, r3
 80050f2:	dd41      	ble.n	8005178 <_printf_float+0x1ac>
 80050f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80050f8:	fa5f fa8a 	uxtb.w	sl, sl
 80050fc:	3901      	subs	r1, #1
 80050fe:	4652      	mov	r2, sl
 8005100:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005104:	9109      	str	r1, [sp, #36]	@ 0x24
 8005106:	f7ff ff26 	bl	8004f56 <__exponent>
 800510a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800510c:	1813      	adds	r3, r2, r0
 800510e:	2a01      	cmp	r2, #1
 8005110:	4681      	mov	r9, r0
 8005112:	6123      	str	r3, [r4, #16]
 8005114:	dc02      	bgt.n	800511c <_printf_float+0x150>
 8005116:	6822      	ldr	r2, [r4, #0]
 8005118:	07d2      	lsls	r2, r2, #31
 800511a:	d501      	bpl.n	8005120 <_printf_float+0x154>
 800511c:	3301      	adds	r3, #1
 800511e:	6123      	str	r3, [r4, #16]
 8005120:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0a2      	beq.n	800506e <_printf_float+0xa2>
 8005128:	232d      	movs	r3, #45	@ 0x2d
 800512a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800512e:	e79e      	b.n	800506e <_printf_float+0xa2>
 8005130:	9a06      	ldr	r2, [sp, #24]
 8005132:	2a47      	cmp	r2, #71	@ 0x47
 8005134:	d1c2      	bne.n	80050bc <_printf_float+0xf0>
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1c0      	bne.n	80050bc <_printf_float+0xf0>
 800513a:	2301      	movs	r3, #1
 800513c:	e7bd      	b.n	80050ba <_printf_float+0xee>
 800513e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005142:	d9db      	bls.n	80050fc <_printf_float+0x130>
 8005144:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005148:	d118      	bne.n	800517c <_printf_float+0x1b0>
 800514a:	2900      	cmp	r1, #0
 800514c:	6863      	ldr	r3, [r4, #4]
 800514e:	dd0b      	ble.n	8005168 <_printf_float+0x19c>
 8005150:	6121      	str	r1, [r4, #16]
 8005152:	b913      	cbnz	r3, 800515a <_printf_float+0x18e>
 8005154:	6822      	ldr	r2, [r4, #0]
 8005156:	07d0      	lsls	r0, r2, #31
 8005158:	d502      	bpl.n	8005160 <_printf_float+0x194>
 800515a:	3301      	adds	r3, #1
 800515c:	440b      	add	r3, r1
 800515e:	6123      	str	r3, [r4, #16]
 8005160:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005162:	f04f 0900 	mov.w	r9, #0
 8005166:	e7db      	b.n	8005120 <_printf_float+0x154>
 8005168:	b913      	cbnz	r3, 8005170 <_printf_float+0x1a4>
 800516a:	6822      	ldr	r2, [r4, #0]
 800516c:	07d2      	lsls	r2, r2, #31
 800516e:	d501      	bpl.n	8005174 <_printf_float+0x1a8>
 8005170:	3302      	adds	r3, #2
 8005172:	e7f4      	b.n	800515e <_printf_float+0x192>
 8005174:	2301      	movs	r3, #1
 8005176:	e7f2      	b.n	800515e <_printf_float+0x192>
 8005178:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800517c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800517e:	4299      	cmp	r1, r3
 8005180:	db05      	blt.n	800518e <_printf_float+0x1c2>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	6121      	str	r1, [r4, #16]
 8005186:	07d8      	lsls	r0, r3, #31
 8005188:	d5ea      	bpl.n	8005160 <_printf_float+0x194>
 800518a:	1c4b      	adds	r3, r1, #1
 800518c:	e7e7      	b.n	800515e <_printf_float+0x192>
 800518e:	2900      	cmp	r1, #0
 8005190:	bfd4      	ite	le
 8005192:	f1c1 0202 	rsble	r2, r1, #2
 8005196:	2201      	movgt	r2, #1
 8005198:	4413      	add	r3, r2
 800519a:	e7e0      	b.n	800515e <_printf_float+0x192>
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	055a      	lsls	r2, r3, #21
 80051a0:	d407      	bmi.n	80051b2 <_printf_float+0x1e6>
 80051a2:	6923      	ldr	r3, [r4, #16]
 80051a4:	4642      	mov	r2, r8
 80051a6:	4631      	mov	r1, r6
 80051a8:	4628      	mov	r0, r5
 80051aa:	47b8      	blx	r7
 80051ac:	3001      	adds	r0, #1
 80051ae:	d12b      	bne.n	8005208 <_printf_float+0x23c>
 80051b0:	e767      	b.n	8005082 <_printf_float+0xb6>
 80051b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051b6:	f240 80dd 	bls.w	8005374 <_printf_float+0x3a8>
 80051ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80051be:	2200      	movs	r2, #0
 80051c0:	2300      	movs	r3, #0
 80051c2:	f7fb fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 80051c6:	2800      	cmp	r0, #0
 80051c8:	d033      	beq.n	8005232 <_printf_float+0x266>
 80051ca:	4a37      	ldr	r2, [pc, #220]	@ (80052a8 <_printf_float+0x2dc>)
 80051cc:	2301      	movs	r3, #1
 80051ce:	4631      	mov	r1, r6
 80051d0:	4628      	mov	r0, r5
 80051d2:	47b8      	blx	r7
 80051d4:	3001      	adds	r0, #1
 80051d6:	f43f af54 	beq.w	8005082 <_printf_float+0xb6>
 80051da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80051de:	4543      	cmp	r3, r8
 80051e0:	db02      	blt.n	80051e8 <_printf_float+0x21c>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	07d8      	lsls	r0, r3, #31
 80051e6:	d50f      	bpl.n	8005208 <_printf_float+0x23c>
 80051e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ec:	4631      	mov	r1, r6
 80051ee:	4628      	mov	r0, r5
 80051f0:	47b8      	blx	r7
 80051f2:	3001      	adds	r0, #1
 80051f4:	f43f af45 	beq.w	8005082 <_printf_float+0xb6>
 80051f8:	f04f 0900 	mov.w	r9, #0
 80051fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8005200:	f104 0a1a 	add.w	sl, r4, #26
 8005204:	45c8      	cmp	r8, r9
 8005206:	dc09      	bgt.n	800521c <_printf_float+0x250>
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	079b      	lsls	r3, r3, #30
 800520c:	f100 8103 	bmi.w	8005416 <_printf_float+0x44a>
 8005210:	68e0      	ldr	r0, [r4, #12]
 8005212:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005214:	4298      	cmp	r0, r3
 8005216:	bfb8      	it	lt
 8005218:	4618      	movlt	r0, r3
 800521a:	e734      	b.n	8005086 <_printf_float+0xba>
 800521c:	2301      	movs	r3, #1
 800521e:	4652      	mov	r2, sl
 8005220:	4631      	mov	r1, r6
 8005222:	4628      	mov	r0, r5
 8005224:	47b8      	blx	r7
 8005226:	3001      	adds	r0, #1
 8005228:	f43f af2b 	beq.w	8005082 <_printf_float+0xb6>
 800522c:	f109 0901 	add.w	r9, r9, #1
 8005230:	e7e8      	b.n	8005204 <_printf_float+0x238>
 8005232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005234:	2b00      	cmp	r3, #0
 8005236:	dc39      	bgt.n	80052ac <_printf_float+0x2e0>
 8005238:	4a1b      	ldr	r2, [pc, #108]	@ (80052a8 <_printf_float+0x2dc>)
 800523a:	2301      	movs	r3, #1
 800523c:	4631      	mov	r1, r6
 800523e:	4628      	mov	r0, r5
 8005240:	47b8      	blx	r7
 8005242:	3001      	adds	r0, #1
 8005244:	f43f af1d 	beq.w	8005082 <_printf_float+0xb6>
 8005248:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800524c:	ea59 0303 	orrs.w	r3, r9, r3
 8005250:	d102      	bne.n	8005258 <_printf_float+0x28c>
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	07d9      	lsls	r1, r3, #31
 8005256:	d5d7      	bpl.n	8005208 <_printf_float+0x23c>
 8005258:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800525c:	4631      	mov	r1, r6
 800525e:	4628      	mov	r0, r5
 8005260:	47b8      	blx	r7
 8005262:	3001      	adds	r0, #1
 8005264:	f43f af0d 	beq.w	8005082 <_printf_float+0xb6>
 8005268:	f04f 0a00 	mov.w	sl, #0
 800526c:	f104 0b1a 	add.w	fp, r4, #26
 8005270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005272:	425b      	negs	r3, r3
 8005274:	4553      	cmp	r3, sl
 8005276:	dc01      	bgt.n	800527c <_printf_float+0x2b0>
 8005278:	464b      	mov	r3, r9
 800527a:	e793      	b.n	80051a4 <_printf_float+0x1d8>
 800527c:	2301      	movs	r3, #1
 800527e:	465a      	mov	r2, fp
 8005280:	4631      	mov	r1, r6
 8005282:	4628      	mov	r0, r5
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	f43f aefb 	beq.w	8005082 <_printf_float+0xb6>
 800528c:	f10a 0a01 	add.w	sl, sl, #1
 8005290:	e7ee      	b.n	8005270 <_printf_float+0x2a4>
 8005292:	bf00      	nop
 8005294:	7fefffff 	.word	0x7fefffff
 8005298:	08007f70 	.word	0x08007f70
 800529c:	08007f74 	.word	0x08007f74
 80052a0:	08007f78 	.word	0x08007f78
 80052a4:	08007f7c 	.word	0x08007f7c
 80052a8:	08007f80 	.word	0x08007f80
 80052ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80052b2:	4553      	cmp	r3, sl
 80052b4:	bfa8      	it	ge
 80052b6:	4653      	movge	r3, sl
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	4699      	mov	r9, r3
 80052bc:	dc36      	bgt.n	800532c <_printf_float+0x360>
 80052be:	f04f 0b00 	mov.w	fp, #0
 80052c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052c6:	f104 021a 	add.w	r2, r4, #26
 80052ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052cc:	9306      	str	r3, [sp, #24]
 80052ce:	eba3 0309 	sub.w	r3, r3, r9
 80052d2:	455b      	cmp	r3, fp
 80052d4:	dc31      	bgt.n	800533a <_printf_float+0x36e>
 80052d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052d8:	459a      	cmp	sl, r3
 80052da:	dc3a      	bgt.n	8005352 <_printf_float+0x386>
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	07da      	lsls	r2, r3, #31
 80052e0:	d437      	bmi.n	8005352 <_printf_float+0x386>
 80052e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052e4:	ebaa 0903 	sub.w	r9, sl, r3
 80052e8:	9b06      	ldr	r3, [sp, #24]
 80052ea:	ebaa 0303 	sub.w	r3, sl, r3
 80052ee:	4599      	cmp	r9, r3
 80052f0:	bfa8      	it	ge
 80052f2:	4699      	movge	r9, r3
 80052f4:	f1b9 0f00 	cmp.w	r9, #0
 80052f8:	dc33      	bgt.n	8005362 <_printf_float+0x396>
 80052fa:	f04f 0800 	mov.w	r8, #0
 80052fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005302:	f104 0b1a 	add.w	fp, r4, #26
 8005306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005308:	ebaa 0303 	sub.w	r3, sl, r3
 800530c:	eba3 0309 	sub.w	r3, r3, r9
 8005310:	4543      	cmp	r3, r8
 8005312:	f77f af79 	ble.w	8005208 <_printf_float+0x23c>
 8005316:	2301      	movs	r3, #1
 8005318:	465a      	mov	r2, fp
 800531a:	4631      	mov	r1, r6
 800531c:	4628      	mov	r0, r5
 800531e:	47b8      	blx	r7
 8005320:	3001      	adds	r0, #1
 8005322:	f43f aeae 	beq.w	8005082 <_printf_float+0xb6>
 8005326:	f108 0801 	add.w	r8, r8, #1
 800532a:	e7ec      	b.n	8005306 <_printf_float+0x33a>
 800532c:	4642      	mov	r2, r8
 800532e:	4631      	mov	r1, r6
 8005330:	4628      	mov	r0, r5
 8005332:	47b8      	blx	r7
 8005334:	3001      	adds	r0, #1
 8005336:	d1c2      	bne.n	80052be <_printf_float+0x2f2>
 8005338:	e6a3      	b.n	8005082 <_printf_float+0xb6>
 800533a:	2301      	movs	r3, #1
 800533c:	4631      	mov	r1, r6
 800533e:	4628      	mov	r0, r5
 8005340:	9206      	str	r2, [sp, #24]
 8005342:	47b8      	blx	r7
 8005344:	3001      	adds	r0, #1
 8005346:	f43f ae9c 	beq.w	8005082 <_printf_float+0xb6>
 800534a:	9a06      	ldr	r2, [sp, #24]
 800534c:	f10b 0b01 	add.w	fp, fp, #1
 8005350:	e7bb      	b.n	80052ca <_printf_float+0x2fe>
 8005352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005356:	4631      	mov	r1, r6
 8005358:	4628      	mov	r0, r5
 800535a:	47b8      	blx	r7
 800535c:	3001      	adds	r0, #1
 800535e:	d1c0      	bne.n	80052e2 <_printf_float+0x316>
 8005360:	e68f      	b.n	8005082 <_printf_float+0xb6>
 8005362:	9a06      	ldr	r2, [sp, #24]
 8005364:	464b      	mov	r3, r9
 8005366:	4442      	add	r2, r8
 8005368:	4631      	mov	r1, r6
 800536a:	4628      	mov	r0, r5
 800536c:	47b8      	blx	r7
 800536e:	3001      	adds	r0, #1
 8005370:	d1c3      	bne.n	80052fa <_printf_float+0x32e>
 8005372:	e686      	b.n	8005082 <_printf_float+0xb6>
 8005374:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005378:	f1ba 0f01 	cmp.w	sl, #1
 800537c:	dc01      	bgt.n	8005382 <_printf_float+0x3b6>
 800537e:	07db      	lsls	r3, r3, #31
 8005380:	d536      	bpl.n	80053f0 <_printf_float+0x424>
 8005382:	2301      	movs	r3, #1
 8005384:	4642      	mov	r2, r8
 8005386:	4631      	mov	r1, r6
 8005388:	4628      	mov	r0, r5
 800538a:	47b8      	blx	r7
 800538c:	3001      	adds	r0, #1
 800538e:	f43f ae78 	beq.w	8005082 <_printf_float+0xb6>
 8005392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005396:	4631      	mov	r1, r6
 8005398:	4628      	mov	r0, r5
 800539a:	47b8      	blx	r7
 800539c:	3001      	adds	r0, #1
 800539e:	f43f ae70 	beq.w	8005082 <_printf_float+0xb6>
 80053a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80053a6:	2200      	movs	r2, #0
 80053a8:	2300      	movs	r3, #0
 80053aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053ae:	f7fb fb8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80053b2:	b9c0      	cbnz	r0, 80053e6 <_printf_float+0x41a>
 80053b4:	4653      	mov	r3, sl
 80053b6:	f108 0201 	add.w	r2, r8, #1
 80053ba:	4631      	mov	r1, r6
 80053bc:	4628      	mov	r0, r5
 80053be:	47b8      	blx	r7
 80053c0:	3001      	adds	r0, #1
 80053c2:	d10c      	bne.n	80053de <_printf_float+0x412>
 80053c4:	e65d      	b.n	8005082 <_printf_float+0xb6>
 80053c6:	2301      	movs	r3, #1
 80053c8:	465a      	mov	r2, fp
 80053ca:	4631      	mov	r1, r6
 80053cc:	4628      	mov	r0, r5
 80053ce:	47b8      	blx	r7
 80053d0:	3001      	adds	r0, #1
 80053d2:	f43f ae56 	beq.w	8005082 <_printf_float+0xb6>
 80053d6:	f108 0801 	add.w	r8, r8, #1
 80053da:	45d0      	cmp	r8, sl
 80053dc:	dbf3      	blt.n	80053c6 <_printf_float+0x3fa>
 80053de:	464b      	mov	r3, r9
 80053e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80053e4:	e6df      	b.n	80051a6 <_printf_float+0x1da>
 80053e6:	f04f 0800 	mov.w	r8, #0
 80053ea:	f104 0b1a 	add.w	fp, r4, #26
 80053ee:	e7f4      	b.n	80053da <_printf_float+0x40e>
 80053f0:	2301      	movs	r3, #1
 80053f2:	4642      	mov	r2, r8
 80053f4:	e7e1      	b.n	80053ba <_printf_float+0x3ee>
 80053f6:	2301      	movs	r3, #1
 80053f8:	464a      	mov	r2, r9
 80053fa:	4631      	mov	r1, r6
 80053fc:	4628      	mov	r0, r5
 80053fe:	47b8      	blx	r7
 8005400:	3001      	adds	r0, #1
 8005402:	f43f ae3e 	beq.w	8005082 <_printf_float+0xb6>
 8005406:	f108 0801 	add.w	r8, r8, #1
 800540a:	68e3      	ldr	r3, [r4, #12]
 800540c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800540e:	1a5b      	subs	r3, r3, r1
 8005410:	4543      	cmp	r3, r8
 8005412:	dcf0      	bgt.n	80053f6 <_printf_float+0x42a>
 8005414:	e6fc      	b.n	8005210 <_printf_float+0x244>
 8005416:	f04f 0800 	mov.w	r8, #0
 800541a:	f104 0919 	add.w	r9, r4, #25
 800541e:	e7f4      	b.n	800540a <_printf_float+0x43e>

08005420 <_printf_common>:
 8005420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005424:	4616      	mov	r6, r2
 8005426:	4698      	mov	r8, r3
 8005428:	688a      	ldr	r2, [r1, #8]
 800542a:	690b      	ldr	r3, [r1, #16]
 800542c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005430:	4293      	cmp	r3, r2
 8005432:	bfb8      	it	lt
 8005434:	4613      	movlt	r3, r2
 8005436:	6033      	str	r3, [r6, #0]
 8005438:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800543c:	4607      	mov	r7, r0
 800543e:	460c      	mov	r4, r1
 8005440:	b10a      	cbz	r2, 8005446 <_printf_common+0x26>
 8005442:	3301      	adds	r3, #1
 8005444:	6033      	str	r3, [r6, #0]
 8005446:	6823      	ldr	r3, [r4, #0]
 8005448:	0699      	lsls	r1, r3, #26
 800544a:	bf42      	ittt	mi
 800544c:	6833      	ldrmi	r3, [r6, #0]
 800544e:	3302      	addmi	r3, #2
 8005450:	6033      	strmi	r3, [r6, #0]
 8005452:	6825      	ldr	r5, [r4, #0]
 8005454:	f015 0506 	ands.w	r5, r5, #6
 8005458:	d106      	bne.n	8005468 <_printf_common+0x48>
 800545a:	f104 0a19 	add.w	sl, r4, #25
 800545e:	68e3      	ldr	r3, [r4, #12]
 8005460:	6832      	ldr	r2, [r6, #0]
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	42ab      	cmp	r3, r5
 8005466:	dc26      	bgt.n	80054b6 <_printf_common+0x96>
 8005468:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800546c:	6822      	ldr	r2, [r4, #0]
 800546e:	3b00      	subs	r3, #0
 8005470:	bf18      	it	ne
 8005472:	2301      	movne	r3, #1
 8005474:	0692      	lsls	r2, r2, #26
 8005476:	d42b      	bmi.n	80054d0 <_printf_common+0xb0>
 8005478:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800547c:	4641      	mov	r1, r8
 800547e:	4638      	mov	r0, r7
 8005480:	47c8      	blx	r9
 8005482:	3001      	adds	r0, #1
 8005484:	d01e      	beq.n	80054c4 <_printf_common+0xa4>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	6922      	ldr	r2, [r4, #16]
 800548a:	f003 0306 	and.w	r3, r3, #6
 800548e:	2b04      	cmp	r3, #4
 8005490:	bf02      	ittt	eq
 8005492:	68e5      	ldreq	r5, [r4, #12]
 8005494:	6833      	ldreq	r3, [r6, #0]
 8005496:	1aed      	subeq	r5, r5, r3
 8005498:	68a3      	ldr	r3, [r4, #8]
 800549a:	bf0c      	ite	eq
 800549c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054a0:	2500      	movne	r5, #0
 80054a2:	4293      	cmp	r3, r2
 80054a4:	bfc4      	itt	gt
 80054a6:	1a9b      	subgt	r3, r3, r2
 80054a8:	18ed      	addgt	r5, r5, r3
 80054aa:	2600      	movs	r6, #0
 80054ac:	341a      	adds	r4, #26
 80054ae:	42b5      	cmp	r5, r6
 80054b0:	d11a      	bne.n	80054e8 <_printf_common+0xc8>
 80054b2:	2000      	movs	r0, #0
 80054b4:	e008      	b.n	80054c8 <_printf_common+0xa8>
 80054b6:	2301      	movs	r3, #1
 80054b8:	4652      	mov	r2, sl
 80054ba:	4641      	mov	r1, r8
 80054bc:	4638      	mov	r0, r7
 80054be:	47c8      	blx	r9
 80054c0:	3001      	adds	r0, #1
 80054c2:	d103      	bne.n	80054cc <_printf_common+0xac>
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295
 80054c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054cc:	3501      	adds	r5, #1
 80054ce:	e7c6      	b.n	800545e <_printf_common+0x3e>
 80054d0:	18e1      	adds	r1, r4, r3
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	2030      	movs	r0, #48	@ 0x30
 80054d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054da:	4422      	add	r2, r4
 80054dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054e4:	3302      	adds	r3, #2
 80054e6:	e7c7      	b.n	8005478 <_printf_common+0x58>
 80054e8:	2301      	movs	r3, #1
 80054ea:	4622      	mov	r2, r4
 80054ec:	4641      	mov	r1, r8
 80054ee:	4638      	mov	r0, r7
 80054f0:	47c8      	blx	r9
 80054f2:	3001      	adds	r0, #1
 80054f4:	d0e6      	beq.n	80054c4 <_printf_common+0xa4>
 80054f6:	3601      	adds	r6, #1
 80054f8:	e7d9      	b.n	80054ae <_printf_common+0x8e>
	...

080054fc <_printf_i>:
 80054fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005500:	7e0f      	ldrb	r7, [r1, #24]
 8005502:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005504:	2f78      	cmp	r7, #120	@ 0x78
 8005506:	4691      	mov	r9, r2
 8005508:	4680      	mov	r8, r0
 800550a:	460c      	mov	r4, r1
 800550c:	469a      	mov	sl, r3
 800550e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005512:	d807      	bhi.n	8005524 <_printf_i+0x28>
 8005514:	2f62      	cmp	r7, #98	@ 0x62
 8005516:	d80a      	bhi.n	800552e <_printf_i+0x32>
 8005518:	2f00      	cmp	r7, #0
 800551a:	f000 80d2 	beq.w	80056c2 <_printf_i+0x1c6>
 800551e:	2f58      	cmp	r7, #88	@ 0x58
 8005520:	f000 80b9 	beq.w	8005696 <_printf_i+0x19a>
 8005524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005528:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800552c:	e03a      	b.n	80055a4 <_printf_i+0xa8>
 800552e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005532:	2b15      	cmp	r3, #21
 8005534:	d8f6      	bhi.n	8005524 <_printf_i+0x28>
 8005536:	a101      	add	r1, pc, #4	@ (adr r1, 800553c <_printf_i+0x40>)
 8005538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800553c:	08005595 	.word	0x08005595
 8005540:	080055a9 	.word	0x080055a9
 8005544:	08005525 	.word	0x08005525
 8005548:	08005525 	.word	0x08005525
 800554c:	08005525 	.word	0x08005525
 8005550:	08005525 	.word	0x08005525
 8005554:	080055a9 	.word	0x080055a9
 8005558:	08005525 	.word	0x08005525
 800555c:	08005525 	.word	0x08005525
 8005560:	08005525 	.word	0x08005525
 8005564:	08005525 	.word	0x08005525
 8005568:	080056a9 	.word	0x080056a9
 800556c:	080055d3 	.word	0x080055d3
 8005570:	08005663 	.word	0x08005663
 8005574:	08005525 	.word	0x08005525
 8005578:	08005525 	.word	0x08005525
 800557c:	080056cb 	.word	0x080056cb
 8005580:	08005525 	.word	0x08005525
 8005584:	080055d3 	.word	0x080055d3
 8005588:	08005525 	.word	0x08005525
 800558c:	08005525 	.word	0x08005525
 8005590:	0800566b 	.word	0x0800566b
 8005594:	6833      	ldr	r3, [r6, #0]
 8005596:	1d1a      	adds	r2, r3, #4
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6032      	str	r2, [r6, #0]
 800559c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80055a4:	2301      	movs	r3, #1
 80055a6:	e09d      	b.n	80056e4 <_printf_i+0x1e8>
 80055a8:	6833      	ldr	r3, [r6, #0]
 80055aa:	6820      	ldr	r0, [r4, #0]
 80055ac:	1d19      	adds	r1, r3, #4
 80055ae:	6031      	str	r1, [r6, #0]
 80055b0:	0606      	lsls	r6, r0, #24
 80055b2:	d501      	bpl.n	80055b8 <_printf_i+0xbc>
 80055b4:	681d      	ldr	r5, [r3, #0]
 80055b6:	e003      	b.n	80055c0 <_printf_i+0xc4>
 80055b8:	0645      	lsls	r5, r0, #25
 80055ba:	d5fb      	bpl.n	80055b4 <_printf_i+0xb8>
 80055bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055c0:	2d00      	cmp	r5, #0
 80055c2:	da03      	bge.n	80055cc <_printf_i+0xd0>
 80055c4:	232d      	movs	r3, #45	@ 0x2d
 80055c6:	426d      	negs	r5, r5
 80055c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055cc:	4859      	ldr	r0, [pc, #356]	@ (8005734 <_printf_i+0x238>)
 80055ce:	230a      	movs	r3, #10
 80055d0:	e011      	b.n	80055f6 <_printf_i+0xfa>
 80055d2:	6821      	ldr	r1, [r4, #0]
 80055d4:	6833      	ldr	r3, [r6, #0]
 80055d6:	0608      	lsls	r0, r1, #24
 80055d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80055dc:	d402      	bmi.n	80055e4 <_printf_i+0xe8>
 80055de:	0649      	lsls	r1, r1, #25
 80055e0:	bf48      	it	mi
 80055e2:	b2ad      	uxthmi	r5, r5
 80055e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80055e6:	4853      	ldr	r0, [pc, #332]	@ (8005734 <_printf_i+0x238>)
 80055e8:	6033      	str	r3, [r6, #0]
 80055ea:	bf14      	ite	ne
 80055ec:	230a      	movne	r3, #10
 80055ee:	2308      	moveq	r3, #8
 80055f0:	2100      	movs	r1, #0
 80055f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055f6:	6866      	ldr	r6, [r4, #4]
 80055f8:	60a6      	str	r6, [r4, #8]
 80055fa:	2e00      	cmp	r6, #0
 80055fc:	bfa2      	ittt	ge
 80055fe:	6821      	ldrge	r1, [r4, #0]
 8005600:	f021 0104 	bicge.w	r1, r1, #4
 8005604:	6021      	strge	r1, [r4, #0]
 8005606:	b90d      	cbnz	r5, 800560c <_printf_i+0x110>
 8005608:	2e00      	cmp	r6, #0
 800560a:	d04b      	beq.n	80056a4 <_printf_i+0x1a8>
 800560c:	4616      	mov	r6, r2
 800560e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005612:	fb03 5711 	mls	r7, r3, r1, r5
 8005616:	5dc7      	ldrb	r7, [r0, r7]
 8005618:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800561c:	462f      	mov	r7, r5
 800561e:	42bb      	cmp	r3, r7
 8005620:	460d      	mov	r5, r1
 8005622:	d9f4      	bls.n	800560e <_printf_i+0x112>
 8005624:	2b08      	cmp	r3, #8
 8005626:	d10b      	bne.n	8005640 <_printf_i+0x144>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	07df      	lsls	r7, r3, #31
 800562c:	d508      	bpl.n	8005640 <_printf_i+0x144>
 800562e:	6923      	ldr	r3, [r4, #16]
 8005630:	6861      	ldr	r1, [r4, #4]
 8005632:	4299      	cmp	r1, r3
 8005634:	bfde      	ittt	le
 8005636:	2330      	movle	r3, #48	@ 0x30
 8005638:	f806 3c01 	strble.w	r3, [r6, #-1]
 800563c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005640:	1b92      	subs	r2, r2, r6
 8005642:	6122      	str	r2, [r4, #16]
 8005644:	f8cd a000 	str.w	sl, [sp]
 8005648:	464b      	mov	r3, r9
 800564a:	aa03      	add	r2, sp, #12
 800564c:	4621      	mov	r1, r4
 800564e:	4640      	mov	r0, r8
 8005650:	f7ff fee6 	bl	8005420 <_printf_common>
 8005654:	3001      	adds	r0, #1
 8005656:	d14a      	bne.n	80056ee <_printf_i+0x1f2>
 8005658:	f04f 30ff 	mov.w	r0, #4294967295
 800565c:	b004      	add	sp, #16
 800565e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	f043 0320 	orr.w	r3, r3, #32
 8005668:	6023      	str	r3, [r4, #0]
 800566a:	4833      	ldr	r0, [pc, #204]	@ (8005738 <_printf_i+0x23c>)
 800566c:	2778      	movs	r7, #120	@ 0x78
 800566e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	6831      	ldr	r1, [r6, #0]
 8005676:	061f      	lsls	r7, r3, #24
 8005678:	f851 5b04 	ldr.w	r5, [r1], #4
 800567c:	d402      	bmi.n	8005684 <_printf_i+0x188>
 800567e:	065f      	lsls	r7, r3, #25
 8005680:	bf48      	it	mi
 8005682:	b2ad      	uxthmi	r5, r5
 8005684:	6031      	str	r1, [r6, #0]
 8005686:	07d9      	lsls	r1, r3, #31
 8005688:	bf44      	itt	mi
 800568a:	f043 0320 	orrmi.w	r3, r3, #32
 800568e:	6023      	strmi	r3, [r4, #0]
 8005690:	b11d      	cbz	r5, 800569a <_printf_i+0x19e>
 8005692:	2310      	movs	r3, #16
 8005694:	e7ac      	b.n	80055f0 <_printf_i+0xf4>
 8005696:	4827      	ldr	r0, [pc, #156]	@ (8005734 <_printf_i+0x238>)
 8005698:	e7e9      	b.n	800566e <_printf_i+0x172>
 800569a:	6823      	ldr	r3, [r4, #0]
 800569c:	f023 0320 	bic.w	r3, r3, #32
 80056a0:	6023      	str	r3, [r4, #0]
 80056a2:	e7f6      	b.n	8005692 <_printf_i+0x196>
 80056a4:	4616      	mov	r6, r2
 80056a6:	e7bd      	b.n	8005624 <_printf_i+0x128>
 80056a8:	6833      	ldr	r3, [r6, #0]
 80056aa:	6825      	ldr	r5, [r4, #0]
 80056ac:	6961      	ldr	r1, [r4, #20]
 80056ae:	1d18      	adds	r0, r3, #4
 80056b0:	6030      	str	r0, [r6, #0]
 80056b2:	062e      	lsls	r6, r5, #24
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	d501      	bpl.n	80056bc <_printf_i+0x1c0>
 80056b8:	6019      	str	r1, [r3, #0]
 80056ba:	e002      	b.n	80056c2 <_printf_i+0x1c6>
 80056bc:	0668      	lsls	r0, r5, #25
 80056be:	d5fb      	bpl.n	80056b8 <_printf_i+0x1bc>
 80056c0:	8019      	strh	r1, [r3, #0]
 80056c2:	2300      	movs	r3, #0
 80056c4:	6123      	str	r3, [r4, #16]
 80056c6:	4616      	mov	r6, r2
 80056c8:	e7bc      	b.n	8005644 <_printf_i+0x148>
 80056ca:	6833      	ldr	r3, [r6, #0]
 80056cc:	1d1a      	adds	r2, r3, #4
 80056ce:	6032      	str	r2, [r6, #0]
 80056d0:	681e      	ldr	r6, [r3, #0]
 80056d2:	6862      	ldr	r2, [r4, #4]
 80056d4:	2100      	movs	r1, #0
 80056d6:	4630      	mov	r0, r6
 80056d8:	f7fa fd7a 	bl	80001d0 <memchr>
 80056dc:	b108      	cbz	r0, 80056e2 <_printf_i+0x1e6>
 80056de:	1b80      	subs	r0, r0, r6
 80056e0:	6060      	str	r0, [r4, #4]
 80056e2:	6863      	ldr	r3, [r4, #4]
 80056e4:	6123      	str	r3, [r4, #16]
 80056e6:	2300      	movs	r3, #0
 80056e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056ec:	e7aa      	b.n	8005644 <_printf_i+0x148>
 80056ee:	6923      	ldr	r3, [r4, #16]
 80056f0:	4632      	mov	r2, r6
 80056f2:	4649      	mov	r1, r9
 80056f4:	4640      	mov	r0, r8
 80056f6:	47d0      	blx	sl
 80056f8:	3001      	adds	r0, #1
 80056fa:	d0ad      	beq.n	8005658 <_printf_i+0x15c>
 80056fc:	6823      	ldr	r3, [r4, #0]
 80056fe:	079b      	lsls	r3, r3, #30
 8005700:	d413      	bmi.n	800572a <_printf_i+0x22e>
 8005702:	68e0      	ldr	r0, [r4, #12]
 8005704:	9b03      	ldr	r3, [sp, #12]
 8005706:	4298      	cmp	r0, r3
 8005708:	bfb8      	it	lt
 800570a:	4618      	movlt	r0, r3
 800570c:	e7a6      	b.n	800565c <_printf_i+0x160>
 800570e:	2301      	movs	r3, #1
 8005710:	4632      	mov	r2, r6
 8005712:	4649      	mov	r1, r9
 8005714:	4640      	mov	r0, r8
 8005716:	47d0      	blx	sl
 8005718:	3001      	adds	r0, #1
 800571a:	d09d      	beq.n	8005658 <_printf_i+0x15c>
 800571c:	3501      	adds	r5, #1
 800571e:	68e3      	ldr	r3, [r4, #12]
 8005720:	9903      	ldr	r1, [sp, #12]
 8005722:	1a5b      	subs	r3, r3, r1
 8005724:	42ab      	cmp	r3, r5
 8005726:	dcf2      	bgt.n	800570e <_printf_i+0x212>
 8005728:	e7eb      	b.n	8005702 <_printf_i+0x206>
 800572a:	2500      	movs	r5, #0
 800572c:	f104 0619 	add.w	r6, r4, #25
 8005730:	e7f5      	b.n	800571e <_printf_i+0x222>
 8005732:	bf00      	nop
 8005734:	08007f82 	.word	0x08007f82
 8005738:	08007f93 	.word	0x08007f93

0800573c <std>:
 800573c:	2300      	movs	r3, #0
 800573e:	b510      	push	{r4, lr}
 8005740:	4604      	mov	r4, r0
 8005742:	e9c0 3300 	strd	r3, r3, [r0]
 8005746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800574a:	6083      	str	r3, [r0, #8]
 800574c:	8181      	strh	r1, [r0, #12]
 800574e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005750:	81c2      	strh	r2, [r0, #14]
 8005752:	6183      	str	r3, [r0, #24]
 8005754:	4619      	mov	r1, r3
 8005756:	2208      	movs	r2, #8
 8005758:	305c      	adds	r0, #92	@ 0x5c
 800575a:	f000 f92d 	bl	80059b8 <memset>
 800575e:	4b0d      	ldr	r3, [pc, #52]	@ (8005794 <std+0x58>)
 8005760:	6263      	str	r3, [r4, #36]	@ 0x24
 8005762:	4b0d      	ldr	r3, [pc, #52]	@ (8005798 <std+0x5c>)
 8005764:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005766:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <std+0x60>)
 8005768:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800576a:	4b0d      	ldr	r3, [pc, #52]	@ (80057a0 <std+0x64>)
 800576c:	6323      	str	r3, [r4, #48]	@ 0x30
 800576e:	4b0d      	ldr	r3, [pc, #52]	@ (80057a4 <std+0x68>)
 8005770:	6224      	str	r4, [r4, #32]
 8005772:	429c      	cmp	r4, r3
 8005774:	d006      	beq.n	8005784 <std+0x48>
 8005776:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800577a:	4294      	cmp	r4, r2
 800577c:	d002      	beq.n	8005784 <std+0x48>
 800577e:	33d0      	adds	r3, #208	@ 0xd0
 8005780:	429c      	cmp	r4, r3
 8005782:	d105      	bne.n	8005790 <std+0x54>
 8005784:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800578c:	f000 b9a0 	b.w	8005ad0 <__retarget_lock_init_recursive>
 8005790:	bd10      	pop	{r4, pc}
 8005792:	bf00      	nop
 8005794:	080058c1 	.word	0x080058c1
 8005798:	080058e3 	.word	0x080058e3
 800579c:	0800591b 	.word	0x0800591b
 80057a0:	0800593f 	.word	0x0800593f
 80057a4:	20001318 	.word	0x20001318

080057a8 <stdio_exit_handler>:
 80057a8:	4a02      	ldr	r2, [pc, #8]	@ (80057b4 <stdio_exit_handler+0xc>)
 80057aa:	4903      	ldr	r1, [pc, #12]	@ (80057b8 <stdio_exit_handler+0x10>)
 80057ac:	4803      	ldr	r0, [pc, #12]	@ (80057bc <stdio_exit_handler+0x14>)
 80057ae:	f000 b869 	b.w	8005884 <_fwalk_sglue>
 80057b2:	bf00      	nop
 80057b4:	2000000c 	.word	0x2000000c
 80057b8:	080072f1 	.word	0x080072f1
 80057bc:	2000001c 	.word	0x2000001c

080057c0 <cleanup_stdio>:
 80057c0:	6841      	ldr	r1, [r0, #4]
 80057c2:	4b0c      	ldr	r3, [pc, #48]	@ (80057f4 <cleanup_stdio+0x34>)
 80057c4:	4299      	cmp	r1, r3
 80057c6:	b510      	push	{r4, lr}
 80057c8:	4604      	mov	r4, r0
 80057ca:	d001      	beq.n	80057d0 <cleanup_stdio+0x10>
 80057cc:	f001 fd90 	bl	80072f0 <_fflush_r>
 80057d0:	68a1      	ldr	r1, [r4, #8]
 80057d2:	4b09      	ldr	r3, [pc, #36]	@ (80057f8 <cleanup_stdio+0x38>)
 80057d4:	4299      	cmp	r1, r3
 80057d6:	d002      	beq.n	80057de <cleanup_stdio+0x1e>
 80057d8:	4620      	mov	r0, r4
 80057da:	f001 fd89 	bl	80072f0 <_fflush_r>
 80057de:	68e1      	ldr	r1, [r4, #12]
 80057e0:	4b06      	ldr	r3, [pc, #24]	@ (80057fc <cleanup_stdio+0x3c>)
 80057e2:	4299      	cmp	r1, r3
 80057e4:	d004      	beq.n	80057f0 <cleanup_stdio+0x30>
 80057e6:	4620      	mov	r0, r4
 80057e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057ec:	f001 bd80 	b.w	80072f0 <_fflush_r>
 80057f0:	bd10      	pop	{r4, pc}
 80057f2:	bf00      	nop
 80057f4:	20001318 	.word	0x20001318
 80057f8:	20001380 	.word	0x20001380
 80057fc:	200013e8 	.word	0x200013e8

08005800 <global_stdio_init.part.0>:
 8005800:	b510      	push	{r4, lr}
 8005802:	4b0b      	ldr	r3, [pc, #44]	@ (8005830 <global_stdio_init.part.0+0x30>)
 8005804:	4c0b      	ldr	r4, [pc, #44]	@ (8005834 <global_stdio_init.part.0+0x34>)
 8005806:	4a0c      	ldr	r2, [pc, #48]	@ (8005838 <global_stdio_init.part.0+0x38>)
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	4620      	mov	r0, r4
 800580c:	2200      	movs	r2, #0
 800580e:	2104      	movs	r1, #4
 8005810:	f7ff ff94 	bl	800573c <std>
 8005814:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005818:	2201      	movs	r2, #1
 800581a:	2109      	movs	r1, #9
 800581c:	f7ff ff8e 	bl	800573c <std>
 8005820:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005824:	2202      	movs	r2, #2
 8005826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800582a:	2112      	movs	r1, #18
 800582c:	f7ff bf86 	b.w	800573c <std>
 8005830:	20001450 	.word	0x20001450
 8005834:	20001318 	.word	0x20001318
 8005838:	080057a9 	.word	0x080057a9

0800583c <__sfp_lock_acquire>:
 800583c:	4801      	ldr	r0, [pc, #4]	@ (8005844 <__sfp_lock_acquire+0x8>)
 800583e:	f000 b948 	b.w	8005ad2 <__retarget_lock_acquire_recursive>
 8005842:	bf00      	nop
 8005844:	20001459 	.word	0x20001459

08005848 <__sfp_lock_release>:
 8005848:	4801      	ldr	r0, [pc, #4]	@ (8005850 <__sfp_lock_release+0x8>)
 800584a:	f000 b943 	b.w	8005ad4 <__retarget_lock_release_recursive>
 800584e:	bf00      	nop
 8005850:	20001459 	.word	0x20001459

08005854 <__sinit>:
 8005854:	b510      	push	{r4, lr}
 8005856:	4604      	mov	r4, r0
 8005858:	f7ff fff0 	bl	800583c <__sfp_lock_acquire>
 800585c:	6a23      	ldr	r3, [r4, #32]
 800585e:	b11b      	cbz	r3, 8005868 <__sinit+0x14>
 8005860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005864:	f7ff bff0 	b.w	8005848 <__sfp_lock_release>
 8005868:	4b04      	ldr	r3, [pc, #16]	@ (800587c <__sinit+0x28>)
 800586a:	6223      	str	r3, [r4, #32]
 800586c:	4b04      	ldr	r3, [pc, #16]	@ (8005880 <__sinit+0x2c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1f5      	bne.n	8005860 <__sinit+0xc>
 8005874:	f7ff ffc4 	bl	8005800 <global_stdio_init.part.0>
 8005878:	e7f2      	b.n	8005860 <__sinit+0xc>
 800587a:	bf00      	nop
 800587c:	080057c1 	.word	0x080057c1
 8005880:	20001450 	.word	0x20001450

08005884 <_fwalk_sglue>:
 8005884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005888:	4607      	mov	r7, r0
 800588a:	4688      	mov	r8, r1
 800588c:	4614      	mov	r4, r2
 800588e:	2600      	movs	r6, #0
 8005890:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005894:	f1b9 0901 	subs.w	r9, r9, #1
 8005898:	d505      	bpl.n	80058a6 <_fwalk_sglue+0x22>
 800589a:	6824      	ldr	r4, [r4, #0]
 800589c:	2c00      	cmp	r4, #0
 800589e:	d1f7      	bne.n	8005890 <_fwalk_sglue+0xc>
 80058a0:	4630      	mov	r0, r6
 80058a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058a6:	89ab      	ldrh	r3, [r5, #12]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d907      	bls.n	80058bc <_fwalk_sglue+0x38>
 80058ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058b0:	3301      	adds	r3, #1
 80058b2:	d003      	beq.n	80058bc <_fwalk_sglue+0x38>
 80058b4:	4629      	mov	r1, r5
 80058b6:	4638      	mov	r0, r7
 80058b8:	47c0      	blx	r8
 80058ba:	4306      	orrs	r6, r0
 80058bc:	3568      	adds	r5, #104	@ 0x68
 80058be:	e7e9      	b.n	8005894 <_fwalk_sglue+0x10>

080058c0 <__sread>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	460c      	mov	r4, r1
 80058c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c8:	f000 f8a4 	bl	8005a14 <_read_r>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	bfab      	itete	ge
 80058d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80058d2:	89a3      	ldrhlt	r3, [r4, #12]
 80058d4:	181b      	addge	r3, r3, r0
 80058d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058da:	bfac      	ite	ge
 80058dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058de:	81a3      	strhlt	r3, [r4, #12]
 80058e0:	bd10      	pop	{r4, pc}

080058e2 <__swrite>:
 80058e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058e6:	461f      	mov	r7, r3
 80058e8:	898b      	ldrh	r3, [r1, #12]
 80058ea:	05db      	lsls	r3, r3, #23
 80058ec:	4605      	mov	r5, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	4616      	mov	r6, r2
 80058f2:	d505      	bpl.n	8005900 <__swrite+0x1e>
 80058f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f8:	2302      	movs	r3, #2
 80058fa:	2200      	movs	r2, #0
 80058fc:	f000 f878 	bl	80059f0 <_lseek_r>
 8005900:	89a3      	ldrh	r3, [r4, #12]
 8005902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005906:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800590a:	81a3      	strh	r3, [r4, #12]
 800590c:	4632      	mov	r2, r6
 800590e:	463b      	mov	r3, r7
 8005910:	4628      	mov	r0, r5
 8005912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005916:	f000 b89f 	b.w	8005a58 <_write_r>

0800591a <__sseek>:
 800591a:	b510      	push	{r4, lr}
 800591c:	460c      	mov	r4, r1
 800591e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005922:	f000 f865 	bl	80059f0 <_lseek_r>
 8005926:	1c43      	adds	r3, r0, #1
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	bf15      	itete	ne
 800592c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800592e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005932:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005936:	81a3      	strheq	r3, [r4, #12]
 8005938:	bf18      	it	ne
 800593a:	81a3      	strhne	r3, [r4, #12]
 800593c:	bd10      	pop	{r4, pc}

0800593e <__sclose>:
 800593e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005942:	f000 b845 	b.w	80059d0 <_close_r>

08005946 <_vsniprintf_r>:
 8005946:	b530      	push	{r4, r5, lr}
 8005948:	4614      	mov	r4, r2
 800594a:	2c00      	cmp	r4, #0
 800594c:	b09b      	sub	sp, #108	@ 0x6c
 800594e:	4605      	mov	r5, r0
 8005950:	461a      	mov	r2, r3
 8005952:	da05      	bge.n	8005960 <_vsniprintf_r+0x1a>
 8005954:	238b      	movs	r3, #139	@ 0x8b
 8005956:	6003      	str	r3, [r0, #0]
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	b01b      	add	sp, #108	@ 0x6c
 800595e:	bd30      	pop	{r4, r5, pc}
 8005960:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005964:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005968:	bf14      	ite	ne
 800596a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800596e:	4623      	moveq	r3, r4
 8005970:	9302      	str	r3, [sp, #8]
 8005972:	9305      	str	r3, [sp, #20]
 8005974:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005978:	9100      	str	r1, [sp, #0]
 800597a:	9104      	str	r1, [sp, #16]
 800597c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005980:	4669      	mov	r1, sp
 8005982:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005984:	f001 fb34 	bl	8006ff0 <_svfiprintf_r>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	bfbc      	itt	lt
 800598c:	238b      	movlt	r3, #139	@ 0x8b
 800598e:	602b      	strlt	r3, [r5, #0]
 8005990:	2c00      	cmp	r4, #0
 8005992:	d0e3      	beq.n	800595c <_vsniprintf_r+0x16>
 8005994:	9b00      	ldr	r3, [sp, #0]
 8005996:	2200      	movs	r2, #0
 8005998:	701a      	strb	r2, [r3, #0]
 800599a:	e7df      	b.n	800595c <_vsniprintf_r+0x16>

0800599c <vsniprintf>:
 800599c:	b507      	push	{r0, r1, r2, lr}
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	4613      	mov	r3, r2
 80059a2:	460a      	mov	r2, r1
 80059a4:	4601      	mov	r1, r0
 80059a6:	4803      	ldr	r0, [pc, #12]	@ (80059b4 <vsniprintf+0x18>)
 80059a8:	6800      	ldr	r0, [r0, #0]
 80059aa:	f7ff ffcc 	bl	8005946 <_vsniprintf_r>
 80059ae:	b003      	add	sp, #12
 80059b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80059b4:	20000018 	.word	0x20000018

080059b8 <memset>:
 80059b8:	4402      	add	r2, r0
 80059ba:	4603      	mov	r3, r0
 80059bc:	4293      	cmp	r3, r2
 80059be:	d100      	bne.n	80059c2 <memset+0xa>
 80059c0:	4770      	bx	lr
 80059c2:	f803 1b01 	strb.w	r1, [r3], #1
 80059c6:	e7f9      	b.n	80059bc <memset+0x4>

080059c8 <_localeconv_r>:
 80059c8:	4800      	ldr	r0, [pc, #0]	@ (80059cc <_localeconv_r+0x4>)
 80059ca:	4770      	bx	lr
 80059cc:	20000158 	.word	0x20000158

080059d0 <_close_r>:
 80059d0:	b538      	push	{r3, r4, r5, lr}
 80059d2:	4d06      	ldr	r5, [pc, #24]	@ (80059ec <_close_r+0x1c>)
 80059d4:	2300      	movs	r3, #0
 80059d6:	4604      	mov	r4, r0
 80059d8:	4608      	mov	r0, r1
 80059da:	602b      	str	r3, [r5, #0]
 80059dc:	f7fc f83c 	bl	8001a58 <_close>
 80059e0:	1c43      	adds	r3, r0, #1
 80059e2:	d102      	bne.n	80059ea <_close_r+0x1a>
 80059e4:	682b      	ldr	r3, [r5, #0]
 80059e6:	b103      	cbz	r3, 80059ea <_close_r+0x1a>
 80059e8:	6023      	str	r3, [r4, #0]
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	20001454 	.word	0x20001454

080059f0 <_lseek_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4d07      	ldr	r5, [pc, #28]	@ (8005a10 <_lseek_r+0x20>)
 80059f4:	4604      	mov	r4, r0
 80059f6:	4608      	mov	r0, r1
 80059f8:	4611      	mov	r1, r2
 80059fa:	2200      	movs	r2, #0
 80059fc:	602a      	str	r2, [r5, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	f7fc f851 	bl	8001aa6 <_lseek>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	d102      	bne.n	8005a0e <_lseek_r+0x1e>
 8005a08:	682b      	ldr	r3, [r5, #0]
 8005a0a:	b103      	cbz	r3, 8005a0e <_lseek_r+0x1e>
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	20001454 	.word	0x20001454

08005a14 <_read_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	4d07      	ldr	r5, [pc, #28]	@ (8005a34 <_read_r+0x20>)
 8005a18:	4604      	mov	r4, r0
 8005a1a:	4608      	mov	r0, r1
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	2200      	movs	r2, #0
 8005a20:	602a      	str	r2, [r5, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	f7fb ffdf 	bl	80019e6 <_read>
 8005a28:	1c43      	adds	r3, r0, #1
 8005a2a:	d102      	bne.n	8005a32 <_read_r+0x1e>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	b103      	cbz	r3, 8005a32 <_read_r+0x1e>
 8005a30:	6023      	str	r3, [r4, #0]
 8005a32:	bd38      	pop	{r3, r4, r5, pc}
 8005a34:	20001454 	.word	0x20001454

08005a38 <_sbrk_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4d06      	ldr	r5, [pc, #24]	@ (8005a54 <_sbrk_r+0x1c>)
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	4604      	mov	r4, r0
 8005a40:	4608      	mov	r0, r1
 8005a42:	602b      	str	r3, [r5, #0]
 8005a44:	f7fc f83c 	bl	8001ac0 <_sbrk>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d102      	bne.n	8005a52 <_sbrk_r+0x1a>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	b103      	cbz	r3, 8005a52 <_sbrk_r+0x1a>
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
 8005a54:	20001454 	.word	0x20001454

08005a58 <_write_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4d07      	ldr	r5, [pc, #28]	@ (8005a78 <_write_r+0x20>)
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	4608      	mov	r0, r1
 8005a60:	4611      	mov	r1, r2
 8005a62:	2200      	movs	r2, #0
 8005a64:	602a      	str	r2, [r5, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f7fb ffda 	bl	8001a20 <_write>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d102      	bne.n	8005a76 <_write_r+0x1e>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	b103      	cbz	r3, 8005a76 <_write_r+0x1e>
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	20001454 	.word	0x20001454

08005a7c <__errno>:
 8005a7c:	4b01      	ldr	r3, [pc, #4]	@ (8005a84 <__errno+0x8>)
 8005a7e:	6818      	ldr	r0, [r3, #0]
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	20000018 	.word	0x20000018

08005a88 <__libc_init_array>:
 8005a88:	b570      	push	{r4, r5, r6, lr}
 8005a8a:	4d0d      	ldr	r5, [pc, #52]	@ (8005ac0 <__libc_init_array+0x38>)
 8005a8c:	4c0d      	ldr	r4, [pc, #52]	@ (8005ac4 <__libc_init_array+0x3c>)
 8005a8e:	1b64      	subs	r4, r4, r5
 8005a90:	10a4      	asrs	r4, r4, #2
 8005a92:	2600      	movs	r6, #0
 8005a94:	42a6      	cmp	r6, r4
 8005a96:	d109      	bne.n	8005aac <__libc_init_array+0x24>
 8005a98:	4d0b      	ldr	r5, [pc, #44]	@ (8005ac8 <__libc_init_array+0x40>)
 8005a9a:	4c0c      	ldr	r4, [pc, #48]	@ (8005acc <__libc_init_array+0x44>)
 8005a9c:	f001 ff72 	bl	8007984 <_init>
 8005aa0:	1b64      	subs	r4, r4, r5
 8005aa2:	10a4      	asrs	r4, r4, #2
 8005aa4:	2600      	movs	r6, #0
 8005aa6:	42a6      	cmp	r6, r4
 8005aa8:	d105      	bne.n	8005ab6 <__libc_init_array+0x2e>
 8005aaa:	bd70      	pop	{r4, r5, r6, pc}
 8005aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab0:	4798      	blx	r3
 8005ab2:	3601      	adds	r6, #1
 8005ab4:	e7ee      	b.n	8005a94 <__libc_init_array+0xc>
 8005ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aba:	4798      	blx	r3
 8005abc:	3601      	adds	r6, #1
 8005abe:	e7f2      	b.n	8005aa6 <__libc_init_array+0x1e>
 8005ac0:	080082e8 	.word	0x080082e8
 8005ac4:	080082e8 	.word	0x080082e8
 8005ac8:	080082e8 	.word	0x080082e8
 8005acc:	080082ec 	.word	0x080082ec

08005ad0 <__retarget_lock_init_recursive>:
 8005ad0:	4770      	bx	lr

08005ad2 <__retarget_lock_acquire_recursive>:
 8005ad2:	4770      	bx	lr

08005ad4 <__retarget_lock_release_recursive>:
 8005ad4:	4770      	bx	lr

08005ad6 <memcpy>:
 8005ad6:	440a      	add	r2, r1
 8005ad8:	4291      	cmp	r1, r2
 8005ada:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ade:	d100      	bne.n	8005ae2 <memcpy+0xc>
 8005ae0:	4770      	bx	lr
 8005ae2:	b510      	push	{r4, lr}
 8005ae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ae8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aec:	4291      	cmp	r1, r2
 8005aee:	d1f9      	bne.n	8005ae4 <memcpy+0xe>
 8005af0:	bd10      	pop	{r4, pc}

08005af2 <quorem>:
 8005af2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af6:	6903      	ldr	r3, [r0, #16]
 8005af8:	690c      	ldr	r4, [r1, #16]
 8005afa:	42a3      	cmp	r3, r4
 8005afc:	4607      	mov	r7, r0
 8005afe:	db7e      	blt.n	8005bfe <quorem+0x10c>
 8005b00:	3c01      	subs	r4, #1
 8005b02:	f101 0814 	add.w	r8, r1, #20
 8005b06:	00a3      	lsls	r3, r4, #2
 8005b08:	f100 0514 	add.w	r5, r0, #20
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b12:	9301      	str	r3, [sp, #4]
 8005b14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b24:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b28:	d32e      	bcc.n	8005b88 <quorem+0x96>
 8005b2a:	f04f 0a00 	mov.w	sl, #0
 8005b2e:	46c4      	mov	ip, r8
 8005b30:	46ae      	mov	lr, r5
 8005b32:	46d3      	mov	fp, sl
 8005b34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b38:	b298      	uxth	r0, r3
 8005b3a:	fb06 a000 	mla	r0, r6, r0, sl
 8005b3e:	0c02      	lsrs	r2, r0, #16
 8005b40:	0c1b      	lsrs	r3, r3, #16
 8005b42:	fb06 2303 	mla	r3, r6, r3, r2
 8005b46:	f8de 2000 	ldr.w	r2, [lr]
 8005b4a:	b280      	uxth	r0, r0
 8005b4c:	b292      	uxth	r2, r2
 8005b4e:	1a12      	subs	r2, r2, r0
 8005b50:	445a      	add	r2, fp
 8005b52:	f8de 0000 	ldr.w	r0, [lr]
 8005b56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b60:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b64:	b292      	uxth	r2, r2
 8005b66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b6a:	45e1      	cmp	r9, ip
 8005b6c:	f84e 2b04 	str.w	r2, [lr], #4
 8005b70:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005b74:	d2de      	bcs.n	8005b34 <quorem+0x42>
 8005b76:	9b00      	ldr	r3, [sp, #0]
 8005b78:	58eb      	ldr	r3, [r5, r3]
 8005b7a:	b92b      	cbnz	r3, 8005b88 <quorem+0x96>
 8005b7c:	9b01      	ldr	r3, [sp, #4]
 8005b7e:	3b04      	subs	r3, #4
 8005b80:	429d      	cmp	r5, r3
 8005b82:	461a      	mov	r2, r3
 8005b84:	d32f      	bcc.n	8005be6 <quorem+0xf4>
 8005b86:	613c      	str	r4, [r7, #16]
 8005b88:	4638      	mov	r0, r7
 8005b8a:	f001 f8c5 	bl	8006d18 <__mcmp>
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	db25      	blt.n	8005bde <quorem+0xec>
 8005b92:	4629      	mov	r1, r5
 8005b94:	2000      	movs	r0, #0
 8005b96:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b9a:	f8d1 c000 	ldr.w	ip, [r1]
 8005b9e:	fa1f fe82 	uxth.w	lr, r2
 8005ba2:	fa1f f38c 	uxth.w	r3, ip
 8005ba6:	eba3 030e 	sub.w	r3, r3, lr
 8005baa:	4403      	add	r3, r0
 8005bac:	0c12      	lsrs	r2, r2, #16
 8005bae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bb2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bbc:	45c1      	cmp	r9, r8
 8005bbe:	f841 3b04 	str.w	r3, [r1], #4
 8005bc2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005bc6:	d2e6      	bcs.n	8005b96 <quorem+0xa4>
 8005bc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bcc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bd0:	b922      	cbnz	r2, 8005bdc <quorem+0xea>
 8005bd2:	3b04      	subs	r3, #4
 8005bd4:	429d      	cmp	r5, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	d30b      	bcc.n	8005bf2 <quorem+0x100>
 8005bda:	613c      	str	r4, [r7, #16]
 8005bdc:	3601      	adds	r6, #1
 8005bde:	4630      	mov	r0, r6
 8005be0:	b003      	add	sp, #12
 8005be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be6:	6812      	ldr	r2, [r2, #0]
 8005be8:	3b04      	subs	r3, #4
 8005bea:	2a00      	cmp	r2, #0
 8005bec:	d1cb      	bne.n	8005b86 <quorem+0x94>
 8005bee:	3c01      	subs	r4, #1
 8005bf0:	e7c6      	b.n	8005b80 <quorem+0x8e>
 8005bf2:	6812      	ldr	r2, [r2, #0]
 8005bf4:	3b04      	subs	r3, #4
 8005bf6:	2a00      	cmp	r2, #0
 8005bf8:	d1ef      	bne.n	8005bda <quorem+0xe8>
 8005bfa:	3c01      	subs	r4, #1
 8005bfc:	e7ea      	b.n	8005bd4 <quorem+0xe2>
 8005bfe:	2000      	movs	r0, #0
 8005c00:	e7ee      	b.n	8005be0 <quorem+0xee>
 8005c02:	0000      	movs	r0, r0
 8005c04:	0000      	movs	r0, r0
	...

08005c08 <_dtoa_r>:
 8005c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c0c:	69c7      	ldr	r7, [r0, #28]
 8005c0e:	b099      	sub	sp, #100	@ 0x64
 8005c10:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005c14:	ec55 4b10 	vmov	r4, r5, d0
 8005c18:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005c1a:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c1c:	4683      	mov	fp, r0
 8005c1e:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c20:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c22:	b97f      	cbnz	r7, 8005c44 <_dtoa_r+0x3c>
 8005c24:	2010      	movs	r0, #16
 8005c26:	f7ff f84d 	bl	8004cc4 <malloc>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c30:	b920      	cbnz	r0, 8005c3c <_dtoa_r+0x34>
 8005c32:	4ba7      	ldr	r3, [pc, #668]	@ (8005ed0 <_dtoa_r+0x2c8>)
 8005c34:	21ef      	movs	r1, #239	@ 0xef
 8005c36:	48a7      	ldr	r0, [pc, #668]	@ (8005ed4 <_dtoa_r+0x2cc>)
 8005c38:	f001 fb9c 	bl	8007374 <__assert_func>
 8005c3c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c40:	6007      	str	r7, [r0, #0]
 8005c42:	60c7      	str	r7, [r0, #12]
 8005c44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c48:	6819      	ldr	r1, [r3, #0]
 8005c4a:	b159      	cbz	r1, 8005c64 <_dtoa_r+0x5c>
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	604a      	str	r2, [r1, #4]
 8005c50:	2301      	movs	r3, #1
 8005c52:	4093      	lsls	r3, r2
 8005c54:	608b      	str	r3, [r1, #8]
 8005c56:	4658      	mov	r0, fp
 8005c58:	f000 fe24 	bl	80068a4 <_Bfree>
 8005c5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	1e2b      	subs	r3, r5, #0
 8005c66:	bfb9      	ittee	lt
 8005c68:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c6c:	9303      	strlt	r3, [sp, #12]
 8005c6e:	2300      	movge	r3, #0
 8005c70:	6033      	strge	r3, [r6, #0]
 8005c72:	9f03      	ldr	r7, [sp, #12]
 8005c74:	4b98      	ldr	r3, [pc, #608]	@ (8005ed8 <_dtoa_r+0x2d0>)
 8005c76:	bfbc      	itt	lt
 8005c78:	2201      	movlt	r2, #1
 8005c7a:	6032      	strlt	r2, [r6, #0]
 8005c7c:	43bb      	bics	r3, r7
 8005c7e:	d112      	bne.n	8005ca6 <_dtoa_r+0x9e>
 8005c80:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005c82:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c8c:	4323      	orrs	r3, r4
 8005c8e:	f000 854d 	beq.w	800672c <_dtoa_r+0xb24>
 8005c92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c94:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005eec <_dtoa_r+0x2e4>
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 854f 	beq.w	800673c <_dtoa_r+0xb34>
 8005c9e:	f10a 0303 	add.w	r3, sl, #3
 8005ca2:	f000 bd49 	b.w	8006738 <_dtoa_r+0xb30>
 8005ca6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005caa:	2200      	movs	r2, #0
 8005cac:	ec51 0b17 	vmov	r0, r1, d7
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005cb6:	f7fa ff07 	bl	8000ac8 <__aeabi_dcmpeq>
 8005cba:	4680      	mov	r8, r0
 8005cbc:	b158      	cbz	r0, 8005cd6 <_dtoa_r+0xce>
 8005cbe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cc6:	b113      	cbz	r3, 8005cce <_dtoa_r+0xc6>
 8005cc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005cca:	4b84      	ldr	r3, [pc, #528]	@ (8005edc <_dtoa_r+0x2d4>)
 8005ccc:	6013      	str	r3, [r2, #0]
 8005cce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005ef0 <_dtoa_r+0x2e8>
 8005cd2:	f000 bd33 	b.w	800673c <_dtoa_r+0xb34>
 8005cd6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005cda:	aa16      	add	r2, sp, #88	@ 0x58
 8005cdc:	a917      	add	r1, sp, #92	@ 0x5c
 8005cde:	4658      	mov	r0, fp
 8005ce0:	f001 f8ca 	bl	8006e78 <__d2b>
 8005ce4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005ce8:	4681      	mov	r9, r0
 8005cea:	2e00      	cmp	r6, #0
 8005cec:	d077      	beq.n	8005dde <_dtoa_r+0x1d6>
 8005cee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cf0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cfc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d00:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d04:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d08:	4619      	mov	r1, r3
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	4b74      	ldr	r3, [pc, #464]	@ (8005ee0 <_dtoa_r+0x2d8>)
 8005d0e:	f7fa fabb 	bl	8000288 <__aeabi_dsub>
 8005d12:	a369      	add	r3, pc, #420	@ (adr r3, 8005eb8 <_dtoa_r+0x2b0>)
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f7fa fc6e 	bl	80005f8 <__aeabi_dmul>
 8005d1c:	a368      	add	r3, pc, #416	@ (adr r3, 8005ec0 <_dtoa_r+0x2b8>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	f7fa fab3 	bl	800028c <__adddf3>
 8005d26:	4604      	mov	r4, r0
 8005d28:	4630      	mov	r0, r6
 8005d2a:	460d      	mov	r5, r1
 8005d2c:	f7fa fbfa 	bl	8000524 <__aeabi_i2d>
 8005d30:	a365      	add	r3, pc, #404	@ (adr r3, 8005ec8 <_dtoa_r+0x2c0>)
 8005d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d36:	f7fa fc5f 	bl	80005f8 <__aeabi_dmul>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4620      	mov	r0, r4
 8005d40:	4629      	mov	r1, r5
 8005d42:	f7fa faa3 	bl	800028c <__adddf3>
 8005d46:	4604      	mov	r4, r0
 8005d48:	460d      	mov	r5, r1
 8005d4a:	f7fa ff05 	bl	8000b58 <__aeabi_d2iz>
 8005d4e:	2200      	movs	r2, #0
 8005d50:	4607      	mov	r7, r0
 8005d52:	2300      	movs	r3, #0
 8005d54:	4620      	mov	r0, r4
 8005d56:	4629      	mov	r1, r5
 8005d58:	f7fa fec0 	bl	8000adc <__aeabi_dcmplt>
 8005d5c:	b140      	cbz	r0, 8005d70 <_dtoa_r+0x168>
 8005d5e:	4638      	mov	r0, r7
 8005d60:	f7fa fbe0 	bl	8000524 <__aeabi_i2d>
 8005d64:	4622      	mov	r2, r4
 8005d66:	462b      	mov	r3, r5
 8005d68:	f7fa feae 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d6c:	b900      	cbnz	r0, 8005d70 <_dtoa_r+0x168>
 8005d6e:	3f01      	subs	r7, #1
 8005d70:	2f16      	cmp	r7, #22
 8005d72:	d851      	bhi.n	8005e18 <_dtoa_r+0x210>
 8005d74:	4b5b      	ldr	r3, [pc, #364]	@ (8005ee4 <_dtoa_r+0x2dc>)
 8005d76:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d82:	f7fa feab 	bl	8000adc <__aeabi_dcmplt>
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d048      	beq.n	8005e1c <_dtoa_r+0x214>
 8005d8a:	3f01      	subs	r7, #1
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005d90:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005d92:	1b9b      	subs	r3, r3, r6
 8005d94:	1e5a      	subs	r2, r3, #1
 8005d96:	bf44      	itt	mi
 8005d98:	f1c3 0801 	rsbmi	r8, r3, #1
 8005d9c:	2300      	movmi	r3, #0
 8005d9e:	9208      	str	r2, [sp, #32]
 8005da0:	bf54      	ite	pl
 8005da2:	f04f 0800 	movpl.w	r8, #0
 8005da6:	9308      	strmi	r3, [sp, #32]
 8005da8:	2f00      	cmp	r7, #0
 8005daa:	db39      	blt.n	8005e20 <_dtoa_r+0x218>
 8005dac:	9b08      	ldr	r3, [sp, #32]
 8005dae:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005db0:	443b      	add	r3, r7
 8005db2:	9308      	str	r3, [sp, #32]
 8005db4:	2300      	movs	r3, #0
 8005db6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dba:	2b09      	cmp	r3, #9
 8005dbc:	d864      	bhi.n	8005e88 <_dtoa_r+0x280>
 8005dbe:	2b05      	cmp	r3, #5
 8005dc0:	bfc4      	itt	gt
 8005dc2:	3b04      	subgt	r3, #4
 8005dc4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc8:	f1a3 0302 	sub.w	r3, r3, #2
 8005dcc:	bfcc      	ite	gt
 8005dce:	2400      	movgt	r4, #0
 8005dd0:	2401      	movle	r4, #1
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d863      	bhi.n	8005e9e <_dtoa_r+0x296>
 8005dd6:	e8df f003 	tbb	[pc, r3]
 8005dda:	372a      	.short	0x372a
 8005ddc:	5535      	.short	0x5535
 8005dde:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005de2:	441e      	add	r6, r3
 8005de4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005de8:	2b20      	cmp	r3, #32
 8005dea:	bfc1      	itttt	gt
 8005dec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005df0:	409f      	lslgt	r7, r3
 8005df2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005df6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005dfa:	bfd6      	itet	le
 8005dfc:	f1c3 0320 	rsble	r3, r3, #32
 8005e00:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e04:	fa04 f003 	lslle.w	r0, r4, r3
 8005e08:	f7fa fb7c 	bl	8000504 <__aeabi_ui2d>
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e12:	3e01      	subs	r6, #1
 8005e14:	9214      	str	r2, [sp, #80]	@ 0x50
 8005e16:	e777      	b.n	8005d08 <_dtoa_r+0x100>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e7b8      	b.n	8005d8e <_dtoa_r+0x186>
 8005e1c:	9012      	str	r0, [sp, #72]	@ 0x48
 8005e1e:	e7b7      	b.n	8005d90 <_dtoa_r+0x188>
 8005e20:	427b      	negs	r3, r7
 8005e22:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e24:	2300      	movs	r3, #0
 8005e26:	eba8 0807 	sub.w	r8, r8, r7
 8005e2a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e2c:	e7c4      	b.n	8005db8 <_dtoa_r+0x1b0>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	dc35      	bgt.n	8005ea4 <_dtoa_r+0x29c>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	9307      	str	r3, [sp, #28]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e42:	e00b      	b.n	8005e5c <_dtoa_r+0x254>
 8005e44:	2301      	movs	r3, #1
 8005e46:	e7f3      	b.n	8005e30 <_dtoa_r+0x228>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	3301      	adds	r3, #1
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	9307      	str	r3, [sp, #28]
 8005e58:	bfb8      	it	lt
 8005e5a:	2301      	movlt	r3, #1
 8005e5c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e60:	2100      	movs	r1, #0
 8005e62:	2204      	movs	r2, #4
 8005e64:	f102 0514 	add.w	r5, r2, #20
 8005e68:	429d      	cmp	r5, r3
 8005e6a:	d91f      	bls.n	8005eac <_dtoa_r+0x2a4>
 8005e6c:	6041      	str	r1, [r0, #4]
 8005e6e:	4658      	mov	r0, fp
 8005e70:	f000 fcd8 	bl	8006824 <_Balloc>
 8005e74:	4682      	mov	sl, r0
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d13c      	bne.n	8005ef4 <_dtoa_r+0x2ec>
 8005e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee8 <_dtoa_r+0x2e0>)
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	f240 11af 	movw	r1, #431	@ 0x1af
 8005e82:	e6d8      	b.n	8005c36 <_dtoa_r+0x2e>
 8005e84:	2301      	movs	r3, #1
 8005e86:	e7e0      	b.n	8005e4a <_dtoa_r+0x242>
 8005e88:	2401      	movs	r4, #1
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005e90:	f04f 33ff 	mov.w	r3, #4294967295
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	9307      	str	r3, [sp, #28]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2312      	movs	r3, #18
 8005e9c:	e7d0      	b.n	8005e40 <_dtoa_r+0x238>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ea2:	e7f5      	b.n	8005e90 <_dtoa_r+0x288>
 8005ea4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	9307      	str	r3, [sp, #28]
 8005eaa:	e7d7      	b.n	8005e5c <_dtoa_r+0x254>
 8005eac:	3101      	adds	r1, #1
 8005eae:	0052      	lsls	r2, r2, #1
 8005eb0:	e7d8      	b.n	8005e64 <_dtoa_r+0x25c>
 8005eb2:	bf00      	nop
 8005eb4:	f3af 8000 	nop.w
 8005eb8:	636f4361 	.word	0x636f4361
 8005ebc:	3fd287a7 	.word	0x3fd287a7
 8005ec0:	8b60c8b3 	.word	0x8b60c8b3
 8005ec4:	3fc68a28 	.word	0x3fc68a28
 8005ec8:	509f79fb 	.word	0x509f79fb
 8005ecc:	3fd34413 	.word	0x3fd34413
 8005ed0:	08007fb1 	.word	0x08007fb1
 8005ed4:	08007fc8 	.word	0x08007fc8
 8005ed8:	7ff00000 	.word	0x7ff00000
 8005edc:	08007f81 	.word	0x08007f81
 8005ee0:	3ff80000 	.word	0x3ff80000
 8005ee4:	080080c0 	.word	0x080080c0
 8005ee8:	08008020 	.word	0x08008020
 8005eec:	08007fad 	.word	0x08007fad
 8005ef0:	08007f80 	.word	0x08007f80
 8005ef4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ef8:	6018      	str	r0, [r3, #0]
 8005efa:	9b07      	ldr	r3, [sp, #28]
 8005efc:	2b0e      	cmp	r3, #14
 8005efe:	f200 80a4 	bhi.w	800604a <_dtoa_r+0x442>
 8005f02:	2c00      	cmp	r4, #0
 8005f04:	f000 80a1 	beq.w	800604a <_dtoa_r+0x442>
 8005f08:	2f00      	cmp	r7, #0
 8005f0a:	dd33      	ble.n	8005f74 <_dtoa_r+0x36c>
 8005f0c:	4bad      	ldr	r3, [pc, #692]	@ (80061c4 <_dtoa_r+0x5bc>)
 8005f0e:	f007 020f 	and.w	r2, r7, #15
 8005f12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f16:	ed93 7b00 	vldr	d7, [r3]
 8005f1a:	05f8      	lsls	r0, r7, #23
 8005f1c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005f20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f24:	d516      	bpl.n	8005f54 <_dtoa_r+0x34c>
 8005f26:	4ba8      	ldr	r3, [pc, #672]	@ (80061c8 <_dtoa_r+0x5c0>)
 8005f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f30:	f7fa fc8c 	bl	800084c <__aeabi_ddiv>
 8005f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f38:	f004 040f 	and.w	r4, r4, #15
 8005f3c:	2603      	movs	r6, #3
 8005f3e:	4da2      	ldr	r5, [pc, #648]	@ (80061c8 <_dtoa_r+0x5c0>)
 8005f40:	b954      	cbnz	r4, 8005f58 <_dtoa_r+0x350>
 8005f42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f4a:	f7fa fc7f 	bl	800084c <__aeabi_ddiv>
 8005f4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f52:	e028      	b.n	8005fa6 <_dtoa_r+0x39e>
 8005f54:	2602      	movs	r6, #2
 8005f56:	e7f2      	b.n	8005f3e <_dtoa_r+0x336>
 8005f58:	07e1      	lsls	r1, r4, #31
 8005f5a:	d508      	bpl.n	8005f6e <_dtoa_r+0x366>
 8005f5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f64:	f7fa fb48 	bl	80005f8 <__aeabi_dmul>
 8005f68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f6c:	3601      	adds	r6, #1
 8005f6e:	1064      	asrs	r4, r4, #1
 8005f70:	3508      	adds	r5, #8
 8005f72:	e7e5      	b.n	8005f40 <_dtoa_r+0x338>
 8005f74:	f000 80d2 	beq.w	800611c <_dtoa_r+0x514>
 8005f78:	427c      	negs	r4, r7
 8005f7a:	4b92      	ldr	r3, [pc, #584]	@ (80061c4 <_dtoa_r+0x5bc>)
 8005f7c:	4d92      	ldr	r5, [pc, #584]	@ (80061c8 <_dtoa_r+0x5c0>)
 8005f7e:	f004 020f 	and.w	r2, r4, #15
 8005f82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f8e:	f7fa fb33 	bl	80005f8 <__aeabi_dmul>
 8005f92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f96:	1124      	asrs	r4, r4, #4
 8005f98:	2300      	movs	r3, #0
 8005f9a:	2602      	movs	r6, #2
 8005f9c:	2c00      	cmp	r4, #0
 8005f9e:	f040 80b2 	bne.w	8006106 <_dtoa_r+0x4fe>
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1d3      	bne.n	8005f4e <_dtoa_r+0x346>
 8005fa6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005fa8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80b7 	beq.w	8006120 <_dtoa_r+0x518>
 8005fb2:	4b86      	ldr	r3, [pc, #536]	@ (80061cc <_dtoa_r+0x5c4>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	4629      	mov	r1, r5
 8005fba:	f7fa fd8f 	bl	8000adc <__aeabi_dcmplt>
 8005fbe:	2800      	cmp	r0, #0
 8005fc0:	f000 80ae 	beq.w	8006120 <_dtoa_r+0x518>
 8005fc4:	9b07      	ldr	r3, [sp, #28]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 80aa 	beq.w	8006120 <_dtoa_r+0x518>
 8005fcc:	9b00      	ldr	r3, [sp, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	dd37      	ble.n	8006042 <_dtoa_r+0x43a>
 8005fd2:	1e7b      	subs	r3, r7, #1
 8005fd4:	9304      	str	r3, [sp, #16]
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	4b7d      	ldr	r3, [pc, #500]	@ (80061d0 <_dtoa_r+0x5c8>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	4629      	mov	r1, r5
 8005fde:	f7fa fb0b 	bl	80005f8 <__aeabi_dmul>
 8005fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fe6:	9c00      	ldr	r4, [sp, #0]
 8005fe8:	3601      	adds	r6, #1
 8005fea:	4630      	mov	r0, r6
 8005fec:	f7fa fa9a 	bl	8000524 <__aeabi_i2d>
 8005ff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ff4:	f7fa fb00 	bl	80005f8 <__aeabi_dmul>
 8005ff8:	4b76      	ldr	r3, [pc, #472]	@ (80061d4 <_dtoa_r+0x5cc>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f7fa f946 	bl	800028c <__adddf3>
 8006000:	4605      	mov	r5, r0
 8006002:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006006:	2c00      	cmp	r4, #0
 8006008:	f040 808d 	bne.w	8006126 <_dtoa_r+0x51e>
 800600c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006010:	4b71      	ldr	r3, [pc, #452]	@ (80061d8 <_dtoa_r+0x5d0>)
 8006012:	2200      	movs	r2, #0
 8006014:	f7fa f938 	bl	8000288 <__aeabi_dsub>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006020:	462a      	mov	r2, r5
 8006022:	4633      	mov	r3, r6
 8006024:	f7fa fd78 	bl	8000b18 <__aeabi_dcmpgt>
 8006028:	2800      	cmp	r0, #0
 800602a:	f040 828b 	bne.w	8006544 <_dtoa_r+0x93c>
 800602e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006032:	462a      	mov	r2, r5
 8006034:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006038:	f7fa fd50 	bl	8000adc <__aeabi_dcmplt>
 800603c:	2800      	cmp	r0, #0
 800603e:	f040 8128 	bne.w	8006292 <_dtoa_r+0x68a>
 8006042:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006046:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800604a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800604c:	2b00      	cmp	r3, #0
 800604e:	f2c0 815a 	blt.w	8006306 <_dtoa_r+0x6fe>
 8006052:	2f0e      	cmp	r7, #14
 8006054:	f300 8157 	bgt.w	8006306 <_dtoa_r+0x6fe>
 8006058:	4b5a      	ldr	r3, [pc, #360]	@ (80061c4 <_dtoa_r+0x5bc>)
 800605a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800605e:	ed93 7b00 	vldr	d7, [r3]
 8006062:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006064:	2b00      	cmp	r3, #0
 8006066:	ed8d 7b00 	vstr	d7, [sp]
 800606a:	da03      	bge.n	8006074 <_dtoa_r+0x46c>
 800606c:	9b07      	ldr	r3, [sp, #28]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f340 8101 	ble.w	8006276 <_dtoa_r+0x66e>
 8006074:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006078:	4656      	mov	r6, sl
 800607a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800607e:	4620      	mov	r0, r4
 8006080:	4629      	mov	r1, r5
 8006082:	f7fa fbe3 	bl	800084c <__aeabi_ddiv>
 8006086:	f7fa fd67 	bl	8000b58 <__aeabi_d2iz>
 800608a:	4680      	mov	r8, r0
 800608c:	f7fa fa4a 	bl	8000524 <__aeabi_i2d>
 8006090:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006094:	f7fa fab0 	bl	80005f8 <__aeabi_dmul>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4620      	mov	r0, r4
 800609e:	4629      	mov	r1, r5
 80060a0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80060a4:	f7fa f8f0 	bl	8000288 <__aeabi_dsub>
 80060a8:	f806 4b01 	strb.w	r4, [r6], #1
 80060ac:	9d07      	ldr	r5, [sp, #28]
 80060ae:	eba6 040a 	sub.w	r4, r6, sl
 80060b2:	42a5      	cmp	r5, r4
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	f040 8117 	bne.w	80062ea <_dtoa_r+0x6e2>
 80060bc:	f7fa f8e6 	bl	800028c <__adddf3>
 80060c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060c4:	4604      	mov	r4, r0
 80060c6:	460d      	mov	r5, r1
 80060c8:	f7fa fd26 	bl	8000b18 <__aeabi_dcmpgt>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	f040 80f9 	bne.w	80062c4 <_dtoa_r+0x6bc>
 80060d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060d6:	4620      	mov	r0, r4
 80060d8:	4629      	mov	r1, r5
 80060da:	f7fa fcf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80060de:	b118      	cbz	r0, 80060e8 <_dtoa_r+0x4e0>
 80060e0:	f018 0f01 	tst.w	r8, #1
 80060e4:	f040 80ee 	bne.w	80062c4 <_dtoa_r+0x6bc>
 80060e8:	4649      	mov	r1, r9
 80060ea:	4658      	mov	r0, fp
 80060ec:	f000 fbda 	bl	80068a4 <_Bfree>
 80060f0:	2300      	movs	r3, #0
 80060f2:	7033      	strb	r3, [r6, #0]
 80060f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80060f6:	3701      	adds	r7, #1
 80060f8:	601f      	str	r7, [r3, #0]
 80060fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 831d 	beq.w	800673c <_dtoa_r+0xb34>
 8006102:	601e      	str	r6, [r3, #0]
 8006104:	e31a      	b.n	800673c <_dtoa_r+0xb34>
 8006106:	07e2      	lsls	r2, r4, #31
 8006108:	d505      	bpl.n	8006116 <_dtoa_r+0x50e>
 800610a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800610e:	f7fa fa73 	bl	80005f8 <__aeabi_dmul>
 8006112:	3601      	adds	r6, #1
 8006114:	2301      	movs	r3, #1
 8006116:	1064      	asrs	r4, r4, #1
 8006118:	3508      	adds	r5, #8
 800611a:	e73f      	b.n	8005f9c <_dtoa_r+0x394>
 800611c:	2602      	movs	r6, #2
 800611e:	e742      	b.n	8005fa6 <_dtoa_r+0x39e>
 8006120:	9c07      	ldr	r4, [sp, #28]
 8006122:	9704      	str	r7, [sp, #16]
 8006124:	e761      	b.n	8005fea <_dtoa_r+0x3e2>
 8006126:	4b27      	ldr	r3, [pc, #156]	@ (80061c4 <_dtoa_r+0x5bc>)
 8006128:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800612a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800612e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006132:	4454      	add	r4, sl
 8006134:	2900      	cmp	r1, #0
 8006136:	d053      	beq.n	80061e0 <_dtoa_r+0x5d8>
 8006138:	4928      	ldr	r1, [pc, #160]	@ (80061dc <_dtoa_r+0x5d4>)
 800613a:	2000      	movs	r0, #0
 800613c:	f7fa fb86 	bl	800084c <__aeabi_ddiv>
 8006140:	4633      	mov	r3, r6
 8006142:	462a      	mov	r2, r5
 8006144:	f7fa f8a0 	bl	8000288 <__aeabi_dsub>
 8006148:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800614c:	4656      	mov	r6, sl
 800614e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006152:	f7fa fd01 	bl	8000b58 <__aeabi_d2iz>
 8006156:	4605      	mov	r5, r0
 8006158:	f7fa f9e4 	bl	8000524 <__aeabi_i2d>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006164:	f7fa f890 	bl	8000288 <__aeabi_dsub>
 8006168:	3530      	adds	r5, #48	@ 0x30
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006172:	f806 5b01 	strb.w	r5, [r6], #1
 8006176:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800617a:	f7fa fcaf 	bl	8000adc <__aeabi_dcmplt>
 800617e:	2800      	cmp	r0, #0
 8006180:	d171      	bne.n	8006266 <_dtoa_r+0x65e>
 8006182:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006186:	4911      	ldr	r1, [pc, #68]	@ (80061cc <_dtoa_r+0x5c4>)
 8006188:	2000      	movs	r0, #0
 800618a:	f7fa f87d 	bl	8000288 <__aeabi_dsub>
 800618e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006192:	f7fa fca3 	bl	8000adc <__aeabi_dcmplt>
 8006196:	2800      	cmp	r0, #0
 8006198:	f040 8095 	bne.w	80062c6 <_dtoa_r+0x6be>
 800619c:	42a6      	cmp	r6, r4
 800619e:	f43f af50 	beq.w	8006042 <_dtoa_r+0x43a>
 80061a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061a6:	4b0a      	ldr	r3, [pc, #40]	@ (80061d0 <_dtoa_r+0x5c8>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	f7fa fa25 	bl	80005f8 <__aeabi_dmul>
 80061ae:	4b08      	ldr	r3, [pc, #32]	@ (80061d0 <_dtoa_r+0x5c8>)
 80061b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061b4:	2200      	movs	r2, #0
 80061b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ba:	f7fa fa1d 	bl	80005f8 <__aeabi_dmul>
 80061be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061c2:	e7c4      	b.n	800614e <_dtoa_r+0x546>
 80061c4:	080080c0 	.word	0x080080c0
 80061c8:	08008098 	.word	0x08008098
 80061cc:	3ff00000 	.word	0x3ff00000
 80061d0:	40240000 	.word	0x40240000
 80061d4:	401c0000 	.word	0x401c0000
 80061d8:	40140000 	.word	0x40140000
 80061dc:	3fe00000 	.word	0x3fe00000
 80061e0:	4631      	mov	r1, r6
 80061e2:	4628      	mov	r0, r5
 80061e4:	f7fa fa08 	bl	80005f8 <__aeabi_dmul>
 80061e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061ec:	9415      	str	r4, [sp, #84]	@ 0x54
 80061ee:	4656      	mov	r6, sl
 80061f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061f4:	f7fa fcb0 	bl	8000b58 <__aeabi_d2iz>
 80061f8:	4605      	mov	r5, r0
 80061fa:	f7fa f993 	bl	8000524 <__aeabi_i2d>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006206:	f7fa f83f 	bl	8000288 <__aeabi_dsub>
 800620a:	3530      	adds	r5, #48	@ 0x30
 800620c:	f806 5b01 	strb.w	r5, [r6], #1
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	42a6      	cmp	r6, r4
 8006216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	d124      	bne.n	800626a <_dtoa_r+0x662>
 8006220:	4bac      	ldr	r3, [pc, #688]	@ (80064d4 <_dtoa_r+0x8cc>)
 8006222:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006226:	f7fa f831 	bl	800028c <__adddf3>
 800622a:	4602      	mov	r2, r0
 800622c:	460b      	mov	r3, r1
 800622e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006232:	f7fa fc71 	bl	8000b18 <__aeabi_dcmpgt>
 8006236:	2800      	cmp	r0, #0
 8006238:	d145      	bne.n	80062c6 <_dtoa_r+0x6be>
 800623a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800623e:	49a5      	ldr	r1, [pc, #660]	@ (80064d4 <_dtoa_r+0x8cc>)
 8006240:	2000      	movs	r0, #0
 8006242:	f7fa f821 	bl	8000288 <__aeabi_dsub>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800624e:	f7fa fc45 	bl	8000adc <__aeabi_dcmplt>
 8006252:	2800      	cmp	r0, #0
 8006254:	f43f aef5 	beq.w	8006042 <_dtoa_r+0x43a>
 8006258:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800625a:	1e73      	subs	r3, r6, #1
 800625c:	9315      	str	r3, [sp, #84]	@ 0x54
 800625e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006262:	2b30      	cmp	r3, #48	@ 0x30
 8006264:	d0f8      	beq.n	8006258 <_dtoa_r+0x650>
 8006266:	9f04      	ldr	r7, [sp, #16]
 8006268:	e73e      	b.n	80060e8 <_dtoa_r+0x4e0>
 800626a:	4b9b      	ldr	r3, [pc, #620]	@ (80064d8 <_dtoa_r+0x8d0>)
 800626c:	f7fa f9c4 	bl	80005f8 <__aeabi_dmul>
 8006270:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006274:	e7bc      	b.n	80061f0 <_dtoa_r+0x5e8>
 8006276:	d10c      	bne.n	8006292 <_dtoa_r+0x68a>
 8006278:	4b98      	ldr	r3, [pc, #608]	@ (80064dc <_dtoa_r+0x8d4>)
 800627a:	2200      	movs	r2, #0
 800627c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006280:	f7fa f9ba 	bl	80005f8 <__aeabi_dmul>
 8006284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006288:	f7fa fc3c 	bl	8000b04 <__aeabi_dcmpge>
 800628c:	2800      	cmp	r0, #0
 800628e:	f000 8157 	beq.w	8006540 <_dtoa_r+0x938>
 8006292:	2400      	movs	r4, #0
 8006294:	4625      	mov	r5, r4
 8006296:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006298:	43db      	mvns	r3, r3
 800629a:	9304      	str	r3, [sp, #16]
 800629c:	4656      	mov	r6, sl
 800629e:	2700      	movs	r7, #0
 80062a0:	4621      	mov	r1, r4
 80062a2:	4658      	mov	r0, fp
 80062a4:	f000 fafe 	bl	80068a4 <_Bfree>
 80062a8:	2d00      	cmp	r5, #0
 80062aa:	d0dc      	beq.n	8006266 <_dtoa_r+0x65e>
 80062ac:	b12f      	cbz	r7, 80062ba <_dtoa_r+0x6b2>
 80062ae:	42af      	cmp	r7, r5
 80062b0:	d003      	beq.n	80062ba <_dtoa_r+0x6b2>
 80062b2:	4639      	mov	r1, r7
 80062b4:	4658      	mov	r0, fp
 80062b6:	f000 faf5 	bl	80068a4 <_Bfree>
 80062ba:	4629      	mov	r1, r5
 80062bc:	4658      	mov	r0, fp
 80062be:	f000 faf1 	bl	80068a4 <_Bfree>
 80062c2:	e7d0      	b.n	8006266 <_dtoa_r+0x65e>
 80062c4:	9704      	str	r7, [sp, #16]
 80062c6:	4633      	mov	r3, r6
 80062c8:	461e      	mov	r6, r3
 80062ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062ce:	2a39      	cmp	r2, #57	@ 0x39
 80062d0:	d107      	bne.n	80062e2 <_dtoa_r+0x6da>
 80062d2:	459a      	cmp	sl, r3
 80062d4:	d1f8      	bne.n	80062c8 <_dtoa_r+0x6c0>
 80062d6:	9a04      	ldr	r2, [sp, #16]
 80062d8:	3201      	adds	r2, #1
 80062da:	9204      	str	r2, [sp, #16]
 80062dc:	2230      	movs	r2, #48	@ 0x30
 80062de:	f88a 2000 	strb.w	r2, [sl]
 80062e2:	781a      	ldrb	r2, [r3, #0]
 80062e4:	3201      	adds	r2, #1
 80062e6:	701a      	strb	r2, [r3, #0]
 80062e8:	e7bd      	b.n	8006266 <_dtoa_r+0x65e>
 80062ea:	4b7b      	ldr	r3, [pc, #492]	@ (80064d8 <_dtoa_r+0x8d0>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	f7fa f983 	bl	80005f8 <__aeabi_dmul>
 80062f2:	2200      	movs	r2, #0
 80062f4:	2300      	movs	r3, #0
 80062f6:	4604      	mov	r4, r0
 80062f8:	460d      	mov	r5, r1
 80062fa:	f7fa fbe5 	bl	8000ac8 <__aeabi_dcmpeq>
 80062fe:	2800      	cmp	r0, #0
 8006300:	f43f aebb 	beq.w	800607a <_dtoa_r+0x472>
 8006304:	e6f0      	b.n	80060e8 <_dtoa_r+0x4e0>
 8006306:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006308:	2a00      	cmp	r2, #0
 800630a:	f000 80db 	beq.w	80064c4 <_dtoa_r+0x8bc>
 800630e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006310:	2a01      	cmp	r2, #1
 8006312:	f300 80bf 	bgt.w	8006494 <_dtoa_r+0x88c>
 8006316:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006318:	2a00      	cmp	r2, #0
 800631a:	f000 80b7 	beq.w	800648c <_dtoa_r+0x884>
 800631e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006322:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006324:	4646      	mov	r6, r8
 8006326:	9a08      	ldr	r2, [sp, #32]
 8006328:	2101      	movs	r1, #1
 800632a:	441a      	add	r2, r3
 800632c:	4658      	mov	r0, fp
 800632e:	4498      	add	r8, r3
 8006330:	9208      	str	r2, [sp, #32]
 8006332:	f000 fb6b 	bl	8006a0c <__i2b>
 8006336:	4605      	mov	r5, r0
 8006338:	b15e      	cbz	r6, 8006352 <_dtoa_r+0x74a>
 800633a:	9b08      	ldr	r3, [sp, #32]
 800633c:	2b00      	cmp	r3, #0
 800633e:	dd08      	ble.n	8006352 <_dtoa_r+0x74a>
 8006340:	42b3      	cmp	r3, r6
 8006342:	9a08      	ldr	r2, [sp, #32]
 8006344:	bfa8      	it	ge
 8006346:	4633      	movge	r3, r6
 8006348:	eba8 0803 	sub.w	r8, r8, r3
 800634c:	1af6      	subs	r6, r6, r3
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	9308      	str	r3, [sp, #32]
 8006352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006354:	b1f3      	cbz	r3, 8006394 <_dtoa_r+0x78c>
 8006356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 80b7 	beq.w	80064cc <_dtoa_r+0x8c4>
 800635e:	b18c      	cbz	r4, 8006384 <_dtoa_r+0x77c>
 8006360:	4629      	mov	r1, r5
 8006362:	4622      	mov	r2, r4
 8006364:	4658      	mov	r0, fp
 8006366:	f000 fc11 	bl	8006b8c <__pow5mult>
 800636a:	464a      	mov	r2, r9
 800636c:	4601      	mov	r1, r0
 800636e:	4605      	mov	r5, r0
 8006370:	4658      	mov	r0, fp
 8006372:	f000 fb61 	bl	8006a38 <__multiply>
 8006376:	4649      	mov	r1, r9
 8006378:	9004      	str	r0, [sp, #16]
 800637a:	4658      	mov	r0, fp
 800637c:	f000 fa92 	bl	80068a4 <_Bfree>
 8006380:	9b04      	ldr	r3, [sp, #16]
 8006382:	4699      	mov	r9, r3
 8006384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006386:	1b1a      	subs	r2, r3, r4
 8006388:	d004      	beq.n	8006394 <_dtoa_r+0x78c>
 800638a:	4649      	mov	r1, r9
 800638c:	4658      	mov	r0, fp
 800638e:	f000 fbfd 	bl	8006b8c <__pow5mult>
 8006392:	4681      	mov	r9, r0
 8006394:	2101      	movs	r1, #1
 8006396:	4658      	mov	r0, fp
 8006398:	f000 fb38 	bl	8006a0c <__i2b>
 800639c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800639e:	4604      	mov	r4, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 81cf 	beq.w	8006744 <_dtoa_r+0xb3c>
 80063a6:	461a      	mov	r2, r3
 80063a8:	4601      	mov	r1, r0
 80063aa:	4658      	mov	r0, fp
 80063ac:	f000 fbee 	bl	8006b8c <__pow5mult>
 80063b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	4604      	mov	r4, r0
 80063b6:	f300 8095 	bgt.w	80064e4 <_dtoa_r+0x8dc>
 80063ba:	9b02      	ldr	r3, [sp, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f040 8087 	bne.w	80064d0 <_dtoa_r+0x8c8>
 80063c2:	9b03      	ldr	r3, [sp, #12]
 80063c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f040 8089 	bne.w	80064e0 <_dtoa_r+0x8d8>
 80063ce:	9b03      	ldr	r3, [sp, #12]
 80063d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063d4:	0d1b      	lsrs	r3, r3, #20
 80063d6:	051b      	lsls	r3, r3, #20
 80063d8:	b12b      	cbz	r3, 80063e6 <_dtoa_r+0x7de>
 80063da:	9b08      	ldr	r3, [sp, #32]
 80063dc:	3301      	adds	r3, #1
 80063de:	9308      	str	r3, [sp, #32]
 80063e0:	f108 0801 	add.w	r8, r8, #1
 80063e4:	2301      	movs	r3, #1
 80063e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80063e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 81b0 	beq.w	8006750 <_dtoa_r+0xb48>
 80063f0:	6923      	ldr	r3, [r4, #16]
 80063f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80063f6:	6918      	ldr	r0, [r3, #16]
 80063f8:	f000 fabc 	bl	8006974 <__hi0bits>
 80063fc:	f1c0 0020 	rsb	r0, r0, #32
 8006400:	9b08      	ldr	r3, [sp, #32]
 8006402:	4418      	add	r0, r3
 8006404:	f010 001f 	ands.w	r0, r0, #31
 8006408:	d077      	beq.n	80064fa <_dtoa_r+0x8f2>
 800640a:	f1c0 0320 	rsb	r3, r0, #32
 800640e:	2b04      	cmp	r3, #4
 8006410:	dd6b      	ble.n	80064ea <_dtoa_r+0x8e2>
 8006412:	9b08      	ldr	r3, [sp, #32]
 8006414:	f1c0 001c 	rsb	r0, r0, #28
 8006418:	4403      	add	r3, r0
 800641a:	4480      	add	r8, r0
 800641c:	4406      	add	r6, r0
 800641e:	9308      	str	r3, [sp, #32]
 8006420:	f1b8 0f00 	cmp.w	r8, #0
 8006424:	dd05      	ble.n	8006432 <_dtoa_r+0x82a>
 8006426:	4649      	mov	r1, r9
 8006428:	4642      	mov	r2, r8
 800642a:	4658      	mov	r0, fp
 800642c:	f000 fc08 	bl	8006c40 <__lshift>
 8006430:	4681      	mov	r9, r0
 8006432:	9b08      	ldr	r3, [sp, #32]
 8006434:	2b00      	cmp	r3, #0
 8006436:	dd05      	ble.n	8006444 <_dtoa_r+0x83c>
 8006438:	4621      	mov	r1, r4
 800643a:	461a      	mov	r2, r3
 800643c:	4658      	mov	r0, fp
 800643e:	f000 fbff 	bl	8006c40 <__lshift>
 8006442:	4604      	mov	r4, r0
 8006444:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006446:	2b00      	cmp	r3, #0
 8006448:	d059      	beq.n	80064fe <_dtoa_r+0x8f6>
 800644a:	4621      	mov	r1, r4
 800644c:	4648      	mov	r0, r9
 800644e:	f000 fc63 	bl	8006d18 <__mcmp>
 8006452:	2800      	cmp	r0, #0
 8006454:	da53      	bge.n	80064fe <_dtoa_r+0x8f6>
 8006456:	1e7b      	subs	r3, r7, #1
 8006458:	9304      	str	r3, [sp, #16]
 800645a:	4649      	mov	r1, r9
 800645c:	2300      	movs	r3, #0
 800645e:	220a      	movs	r2, #10
 8006460:	4658      	mov	r0, fp
 8006462:	f000 fa41 	bl	80068e8 <__multadd>
 8006466:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006468:	4681      	mov	r9, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 8172 	beq.w	8006754 <_dtoa_r+0xb4c>
 8006470:	2300      	movs	r3, #0
 8006472:	4629      	mov	r1, r5
 8006474:	220a      	movs	r2, #10
 8006476:	4658      	mov	r0, fp
 8006478:	f000 fa36 	bl	80068e8 <__multadd>
 800647c:	9b00      	ldr	r3, [sp, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	4605      	mov	r5, r0
 8006482:	dc67      	bgt.n	8006554 <_dtoa_r+0x94c>
 8006484:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006486:	2b02      	cmp	r3, #2
 8006488:	dc41      	bgt.n	800650e <_dtoa_r+0x906>
 800648a:	e063      	b.n	8006554 <_dtoa_r+0x94c>
 800648c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800648e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006492:	e746      	b.n	8006322 <_dtoa_r+0x71a>
 8006494:	9b07      	ldr	r3, [sp, #28]
 8006496:	1e5c      	subs	r4, r3, #1
 8006498:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800649a:	42a3      	cmp	r3, r4
 800649c:	bfbf      	itttt	lt
 800649e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80064a0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80064a2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80064a4:	1ae3      	sublt	r3, r4, r3
 80064a6:	bfb4      	ite	lt
 80064a8:	18d2      	addlt	r2, r2, r3
 80064aa:	1b1c      	subge	r4, r3, r4
 80064ac:	9b07      	ldr	r3, [sp, #28]
 80064ae:	bfbc      	itt	lt
 80064b0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80064b2:	2400      	movlt	r4, #0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	bfb5      	itete	lt
 80064b8:	eba8 0603 	sublt.w	r6, r8, r3
 80064bc:	9b07      	ldrge	r3, [sp, #28]
 80064be:	2300      	movlt	r3, #0
 80064c0:	4646      	movge	r6, r8
 80064c2:	e730      	b.n	8006326 <_dtoa_r+0x71e>
 80064c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064c6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80064c8:	4646      	mov	r6, r8
 80064ca:	e735      	b.n	8006338 <_dtoa_r+0x730>
 80064cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064ce:	e75c      	b.n	800638a <_dtoa_r+0x782>
 80064d0:	2300      	movs	r3, #0
 80064d2:	e788      	b.n	80063e6 <_dtoa_r+0x7de>
 80064d4:	3fe00000 	.word	0x3fe00000
 80064d8:	40240000 	.word	0x40240000
 80064dc:	40140000 	.word	0x40140000
 80064e0:	9b02      	ldr	r3, [sp, #8]
 80064e2:	e780      	b.n	80063e6 <_dtoa_r+0x7de>
 80064e4:	2300      	movs	r3, #0
 80064e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80064e8:	e782      	b.n	80063f0 <_dtoa_r+0x7e8>
 80064ea:	d099      	beq.n	8006420 <_dtoa_r+0x818>
 80064ec:	9a08      	ldr	r2, [sp, #32]
 80064ee:	331c      	adds	r3, #28
 80064f0:	441a      	add	r2, r3
 80064f2:	4498      	add	r8, r3
 80064f4:	441e      	add	r6, r3
 80064f6:	9208      	str	r2, [sp, #32]
 80064f8:	e792      	b.n	8006420 <_dtoa_r+0x818>
 80064fa:	4603      	mov	r3, r0
 80064fc:	e7f6      	b.n	80064ec <_dtoa_r+0x8e4>
 80064fe:	9b07      	ldr	r3, [sp, #28]
 8006500:	9704      	str	r7, [sp, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	dc20      	bgt.n	8006548 <_dtoa_r+0x940>
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800650a:	2b02      	cmp	r3, #2
 800650c:	dd1e      	ble.n	800654c <_dtoa_r+0x944>
 800650e:	9b00      	ldr	r3, [sp, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	f47f aec0 	bne.w	8006296 <_dtoa_r+0x68e>
 8006516:	4621      	mov	r1, r4
 8006518:	2205      	movs	r2, #5
 800651a:	4658      	mov	r0, fp
 800651c:	f000 f9e4 	bl	80068e8 <__multadd>
 8006520:	4601      	mov	r1, r0
 8006522:	4604      	mov	r4, r0
 8006524:	4648      	mov	r0, r9
 8006526:	f000 fbf7 	bl	8006d18 <__mcmp>
 800652a:	2800      	cmp	r0, #0
 800652c:	f77f aeb3 	ble.w	8006296 <_dtoa_r+0x68e>
 8006530:	4656      	mov	r6, sl
 8006532:	2331      	movs	r3, #49	@ 0x31
 8006534:	f806 3b01 	strb.w	r3, [r6], #1
 8006538:	9b04      	ldr	r3, [sp, #16]
 800653a:	3301      	adds	r3, #1
 800653c:	9304      	str	r3, [sp, #16]
 800653e:	e6ae      	b.n	800629e <_dtoa_r+0x696>
 8006540:	9c07      	ldr	r4, [sp, #28]
 8006542:	9704      	str	r7, [sp, #16]
 8006544:	4625      	mov	r5, r4
 8006546:	e7f3      	b.n	8006530 <_dtoa_r+0x928>
 8006548:	9b07      	ldr	r3, [sp, #28]
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 8104 	beq.w	800675c <_dtoa_r+0xb54>
 8006554:	2e00      	cmp	r6, #0
 8006556:	dd05      	ble.n	8006564 <_dtoa_r+0x95c>
 8006558:	4629      	mov	r1, r5
 800655a:	4632      	mov	r2, r6
 800655c:	4658      	mov	r0, fp
 800655e:	f000 fb6f 	bl	8006c40 <__lshift>
 8006562:	4605      	mov	r5, r0
 8006564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006566:	2b00      	cmp	r3, #0
 8006568:	d05a      	beq.n	8006620 <_dtoa_r+0xa18>
 800656a:	6869      	ldr	r1, [r5, #4]
 800656c:	4658      	mov	r0, fp
 800656e:	f000 f959 	bl	8006824 <_Balloc>
 8006572:	4606      	mov	r6, r0
 8006574:	b928      	cbnz	r0, 8006582 <_dtoa_r+0x97a>
 8006576:	4b84      	ldr	r3, [pc, #528]	@ (8006788 <_dtoa_r+0xb80>)
 8006578:	4602      	mov	r2, r0
 800657a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800657e:	f7ff bb5a 	b.w	8005c36 <_dtoa_r+0x2e>
 8006582:	692a      	ldr	r2, [r5, #16]
 8006584:	3202      	adds	r2, #2
 8006586:	0092      	lsls	r2, r2, #2
 8006588:	f105 010c 	add.w	r1, r5, #12
 800658c:	300c      	adds	r0, #12
 800658e:	f7ff faa2 	bl	8005ad6 <memcpy>
 8006592:	2201      	movs	r2, #1
 8006594:	4631      	mov	r1, r6
 8006596:	4658      	mov	r0, fp
 8006598:	f000 fb52 	bl	8006c40 <__lshift>
 800659c:	f10a 0301 	add.w	r3, sl, #1
 80065a0:	9307      	str	r3, [sp, #28]
 80065a2:	9b00      	ldr	r3, [sp, #0]
 80065a4:	4453      	add	r3, sl
 80065a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065a8:	9b02      	ldr	r3, [sp, #8]
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	462f      	mov	r7, r5
 80065b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80065b2:	4605      	mov	r5, r0
 80065b4:	9b07      	ldr	r3, [sp, #28]
 80065b6:	4621      	mov	r1, r4
 80065b8:	3b01      	subs	r3, #1
 80065ba:	4648      	mov	r0, r9
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	f7ff fa98 	bl	8005af2 <quorem>
 80065c2:	4639      	mov	r1, r7
 80065c4:	9002      	str	r0, [sp, #8]
 80065c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065ca:	4648      	mov	r0, r9
 80065cc:	f000 fba4 	bl	8006d18 <__mcmp>
 80065d0:	462a      	mov	r2, r5
 80065d2:	9008      	str	r0, [sp, #32]
 80065d4:	4621      	mov	r1, r4
 80065d6:	4658      	mov	r0, fp
 80065d8:	f000 fbba 	bl	8006d50 <__mdiff>
 80065dc:	68c2      	ldr	r2, [r0, #12]
 80065de:	4606      	mov	r6, r0
 80065e0:	bb02      	cbnz	r2, 8006624 <_dtoa_r+0xa1c>
 80065e2:	4601      	mov	r1, r0
 80065e4:	4648      	mov	r0, r9
 80065e6:	f000 fb97 	bl	8006d18 <__mcmp>
 80065ea:	4602      	mov	r2, r0
 80065ec:	4631      	mov	r1, r6
 80065ee:	4658      	mov	r0, fp
 80065f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80065f2:	f000 f957 	bl	80068a4 <_Bfree>
 80065f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065fa:	9e07      	ldr	r6, [sp, #28]
 80065fc:	ea43 0102 	orr.w	r1, r3, r2
 8006600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006602:	4319      	orrs	r1, r3
 8006604:	d110      	bne.n	8006628 <_dtoa_r+0xa20>
 8006606:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800660a:	d029      	beq.n	8006660 <_dtoa_r+0xa58>
 800660c:	9b08      	ldr	r3, [sp, #32]
 800660e:	2b00      	cmp	r3, #0
 8006610:	dd02      	ble.n	8006618 <_dtoa_r+0xa10>
 8006612:	9b02      	ldr	r3, [sp, #8]
 8006614:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006618:	9b00      	ldr	r3, [sp, #0]
 800661a:	f883 8000 	strb.w	r8, [r3]
 800661e:	e63f      	b.n	80062a0 <_dtoa_r+0x698>
 8006620:	4628      	mov	r0, r5
 8006622:	e7bb      	b.n	800659c <_dtoa_r+0x994>
 8006624:	2201      	movs	r2, #1
 8006626:	e7e1      	b.n	80065ec <_dtoa_r+0x9e4>
 8006628:	9b08      	ldr	r3, [sp, #32]
 800662a:	2b00      	cmp	r3, #0
 800662c:	db04      	blt.n	8006638 <_dtoa_r+0xa30>
 800662e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006630:	430b      	orrs	r3, r1
 8006632:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006634:	430b      	orrs	r3, r1
 8006636:	d120      	bne.n	800667a <_dtoa_r+0xa72>
 8006638:	2a00      	cmp	r2, #0
 800663a:	dded      	ble.n	8006618 <_dtoa_r+0xa10>
 800663c:	4649      	mov	r1, r9
 800663e:	2201      	movs	r2, #1
 8006640:	4658      	mov	r0, fp
 8006642:	f000 fafd 	bl	8006c40 <__lshift>
 8006646:	4621      	mov	r1, r4
 8006648:	4681      	mov	r9, r0
 800664a:	f000 fb65 	bl	8006d18 <__mcmp>
 800664e:	2800      	cmp	r0, #0
 8006650:	dc03      	bgt.n	800665a <_dtoa_r+0xa52>
 8006652:	d1e1      	bne.n	8006618 <_dtoa_r+0xa10>
 8006654:	f018 0f01 	tst.w	r8, #1
 8006658:	d0de      	beq.n	8006618 <_dtoa_r+0xa10>
 800665a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800665e:	d1d8      	bne.n	8006612 <_dtoa_r+0xa0a>
 8006660:	9a00      	ldr	r2, [sp, #0]
 8006662:	2339      	movs	r3, #57	@ 0x39
 8006664:	7013      	strb	r3, [r2, #0]
 8006666:	4633      	mov	r3, r6
 8006668:	461e      	mov	r6, r3
 800666a:	3b01      	subs	r3, #1
 800666c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006670:	2a39      	cmp	r2, #57	@ 0x39
 8006672:	d052      	beq.n	800671a <_dtoa_r+0xb12>
 8006674:	3201      	adds	r2, #1
 8006676:	701a      	strb	r2, [r3, #0]
 8006678:	e612      	b.n	80062a0 <_dtoa_r+0x698>
 800667a:	2a00      	cmp	r2, #0
 800667c:	dd07      	ble.n	800668e <_dtoa_r+0xa86>
 800667e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006682:	d0ed      	beq.n	8006660 <_dtoa_r+0xa58>
 8006684:	9a00      	ldr	r2, [sp, #0]
 8006686:	f108 0301 	add.w	r3, r8, #1
 800668a:	7013      	strb	r3, [r2, #0]
 800668c:	e608      	b.n	80062a0 <_dtoa_r+0x698>
 800668e:	9b07      	ldr	r3, [sp, #28]
 8006690:	9a07      	ldr	r2, [sp, #28]
 8006692:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006696:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006698:	4293      	cmp	r3, r2
 800669a:	d028      	beq.n	80066ee <_dtoa_r+0xae6>
 800669c:	4649      	mov	r1, r9
 800669e:	2300      	movs	r3, #0
 80066a0:	220a      	movs	r2, #10
 80066a2:	4658      	mov	r0, fp
 80066a4:	f000 f920 	bl	80068e8 <__multadd>
 80066a8:	42af      	cmp	r7, r5
 80066aa:	4681      	mov	r9, r0
 80066ac:	f04f 0300 	mov.w	r3, #0
 80066b0:	f04f 020a 	mov.w	r2, #10
 80066b4:	4639      	mov	r1, r7
 80066b6:	4658      	mov	r0, fp
 80066b8:	d107      	bne.n	80066ca <_dtoa_r+0xac2>
 80066ba:	f000 f915 	bl	80068e8 <__multadd>
 80066be:	4607      	mov	r7, r0
 80066c0:	4605      	mov	r5, r0
 80066c2:	9b07      	ldr	r3, [sp, #28]
 80066c4:	3301      	adds	r3, #1
 80066c6:	9307      	str	r3, [sp, #28]
 80066c8:	e774      	b.n	80065b4 <_dtoa_r+0x9ac>
 80066ca:	f000 f90d 	bl	80068e8 <__multadd>
 80066ce:	4629      	mov	r1, r5
 80066d0:	4607      	mov	r7, r0
 80066d2:	2300      	movs	r3, #0
 80066d4:	220a      	movs	r2, #10
 80066d6:	4658      	mov	r0, fp
 80066d8:	f000 f906 	bl	80068e8 <__multadd>
 80066dc:	4605      	mov	r5, r0
 80066de:	e7f0      	b.n	80066c2 <_dtoa_r+0xaba>
 80066e0:	9b00      	ldr	r3, [sp, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	bfcc      	ite	gt
 80066e6:	461e      	movgt	r6, r3
 80066e8:	2601      	movle	r6, #1
 80066ea:	4456      	add	r6, sl
 80066ec:	2700      	movs	r7, #0
 80066ee:	4649      	mov	r1, r9
 80066f0:	2201      	movs	r2, #1
 80066f2:	4658      	mov	r0, fp
 80066f4:	f000 faa4 	bl	8006c40 <__lshift>
 80066f8:	4621      	mov	r1, r4
 80066fa:	4681      	mov	r9, r0
 80066fc:	f000 fb0c 	bl	8006d18 <__mcmp>
 8006700:	2800      	cmp	r0, #0
 8006702:	dcb0      	bgt.n	8006666 <_dtoa_r+0xa5e>
 8006704:	d102      	bne.n	800670c <_dtoa_r+0xb04>
 8006706:	f018 0f01 	tst.w	r8, #1
 800670a:	d1ac      	bne.n	8006666 <_dtoa_r+0xa5e>
 800670c:	4633      	mov	r3, r6
 800670e:	461e      	mov	r6, r3
 8006710:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006714:	2a30      	cmp	r2, #48	@ 0x30
 8006716:	d0fa      	beq.n	800670e <_dtoa_r+0xb06>
 8006718:	e5c2      	b.n	80062a0 <_dtoa_r+0x698>
 800671a:	459a      	cmp	sl, r3
 800671c:	d1a4      	bne.n	8006668 <_dtoa_r+0xa60>
 800671e:	9b04      	ldr	r3, [sp, #16]
 8006720:	3301      	adds	r3, #1
 8006722:	9304      	str	r3, [sp, #16]
 8006724:	2331      	movs	r3, #49	@ 0x31
 8006726:	f88a 3000 	strb.w	r3, [sl]
 800672a:	e5b9      	b.n	80062a0 <_dtoa_r+0x698>
 800672c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800672e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800678c <_dtoa_r+0xb84>
 8006732:	b11b      	cbz	r3, 800673c <_dtoa_r+0xb34>
 8006734:	f10a 0308 	add.w	r3, sl, #8
 8006738:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	4650      	mov	r0, sl
 800673e:	b019      	add	sp, #100	@ 0x64
 8006740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006746:	2b01      	cmp	r3, #1
 8006748:	f77f ae37 	ble.w	80063ba <_dtoa_r+0x7b2>
 800674c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800674e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006750:	2001      	movs	r0, #1
 8006752:	e655      	b.n	8006400 <_dtoa_r+0x7f8>
 8006754:	9b00      	ldr	r3, [sp, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f77f aed6 	ble.w	8006508 <_dtoa_r+0x900>
 800675c:	4656      	mov	r6, sl
 800675e:	4621      	mov	r1, r4
 8006760:	4648      	mov	r0, r9
 8006762:	f7ff f9c6 	bl	8005af2 <quorem>
 8006766:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800676a:	f806 8b01 	strb.w	r8, [r6], #1
 800676e:	9b00      	ldr	r3, [sp, #0]
 8006770:	eba6 020a 	sub.w	r2, r6, sl
 8006774:	4293      	cmp	r3, r2
 8006776:	ddb3      	ble.n	80066e0 <_dtoa_r+0xad8>
 8006778:	4649      	mov	r1, r9
 800677a:	2300      	movs	r3, #0
 800677c:	220a      	movs	r2, #10
 800677e:	4658      	mov	r0, fp
 8006780:	f000 f8b2 	bl	80068e8 <__multadd>
 8006784:	4681      	mov	r9, r0
 8006786:	e7ea      	b.n	800675e <_dtoa_r+0xb56>
 8006788:	08008020 	.word	0x08008020
 800678c:	08007fa4 	.word	0x08007fa4

08006790 <_free_r>:
 8006790:	b538      	push	{r3, r4, r5, lr}
 8006792:	4605      	mov	r5, r0
 8006794:	2900      	cmp	r1, #0
 8006796:	d041      	beq.n	800681c <_free_r+0x8c>
 8006798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800679c:	1f0c      	subs	r4, r1, #4
 800679e:	2b00      	cmp	r3, #0
 80067a0:	bfb8      	it	lt
 80067a2:	18e4      	addlt	r4, r4, r3
 80067a4:	f7fe fb38 	bl	8004e18 <__malloc_lock>
 80067a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006820 <_free_r+0x90>)
 80067aa:	6813      	ldr	r3, [r2, #0]
 80067ac:	b933      	cbnz	r3, 80067bc <_free_r+0x2c>
 80067ae:	6063      	str	r3, [r4, #4]
 80067b0:	6014      	str	r4, [r2, #0]
 80067b2:	4628      	mov	r0, r5
 80067b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067b8:	f7fe bb34 	b.w	8004e24 <__malloc_unlock>
 80067bc:	42a3      	cmp	r3, r4
 80067be:	d908      	bls.n	80067d2 <_free_r+0x42>
 80067c0:	6820      	ldr	r0, [r4, #0]
 80067c2:	1821      	adds	r1, r4, r0
 80067c4:	428b      	cmp	r3, r1
 80067c6:	bf01      	itttt	eq
 80067c8:	6819      	ldreq	r1, [r3, #0]
 80067ca:	685b      	ldreq	r3, [r3, #4]
 80067cc:	1809      	addeq	r1, r1, r0
 80067ce:	6021      	streq	r1, [r4, #0]
 80067d0:	e7ed      	b.n	80067ae <_free_r+0x1e>
 80067d2:	461a      	mov	r2, r3
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	b10b      	cbz	r3, 80067dc <_free_r+0x4c>
 80067d8:	42a3      	cmp	r3, r4
 80067da:	d9fa      	bls.n	80067d2 <_free_r+0x42>
 80067dc:	6811      	ldr	r1, [r2, #0]
 80067de:	1850      	adds	r0, r2, r1
 80067e0:	42a0      	cmp	r0, r4
 80067e2:	d10b      	bne.n	80067fc <_free_r+0x6c>
 80067e4:	6820      	ldr	r0, [r4, #0]
 80067e6:	4401      	add	r1, r0
 80067e8:	1850      	adds	r0, r2, r1
 80067ea:	4283      	cmp	r3, r0
 80067ec:	6011      	str	r1, [r2, #0]
 80067ee:	d1e0      	bne.n	80067b2 <_free_r+0x22>
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	6053      	str	r3, [r2, #4]
 80067f6:	4408      	add	r0, r1
 80067f8:	6010      	str	r0, [r2, #0]
 80067fa:	e7da      	b.n	80067b2 <_free_r+0x22>
 80067fc:	d902      	bls.n	8006804 <_free_r+0x74>
 80067fe:	230c      	movs	r3, #12
 8006800:	602b      	str	r3, [r5, #0]
 8006802:	e7d6      	b.n	80067b2 <_free_r+0x22>
 8006804:	6820      	ldr	r0, [r4, #0]
 8006806:	1821      	adds	r1, r4, r0
 8006808:	428b      	cmp	r3, r1
 800680a:	bf04      	itt	eq
 800680c:	6819      	ldreq	r1, [r3, #0]
 800680e:	685b      	ldreq	r3, [r3, #4]
 8006810:	6063      	str	r3, [r4, #4]
 8006812:	bf04      	itt	eq
 8006814:	1809      	addeq	r1, r1, r0
 8006816:	6021      	streq	r1, [r4, #0]
 8006818:	6054      	str	r4, [r2, #4]
 800681a:	e7ca      	b.n	80067b2 <_free_r+0x22>
 800681c:	bd38      	pop	{r3, r4, r5, pc}
 800681e:	bf00      	nop
 8006820:	20001314 	.word	0x20001314

08006824 <_Balloc>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	69c6      	ldr	r6, [r0, #28]
 8006828:	4604      	mov	r4, r0
 800682a:	460d      	mov	r5, r1
 800682c:	b976      	cbnz	r6, 800684c <_Balloc+0x28>
 800682e:	2010      	movs	r0, #16
 8006830:	f7fe fa48 	bl	8004cc4 <malloc>
 8006834:	4602      	mov	r2, r0
 8006836:	61e0      	str	r0, [r4, #28]
 8006838:	b920      	cbnz	r0, 8006844 <_Balloc+0x20>
 800683a:	4b18      	ldr	r3, [pc, #96]	@ (800689c <_Balloc+0x78>)
 800683c:	4818      	ldr	r0, [pc, #96]	@ (80068a0 <_Balloc+0x7c>)
 800683e:	216b      	movs	r1, #107	@ 0x6b
 8006840:	f000 fd98 	bl	8007374 <__assert_func>
 8006844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006848:	6006      	str	r6, [r0, #0]
 800684a:	60c6      	str	r6, [r0, #12]
 800684c:	69e6      	ldr	r6, [r4, #28]
 800684e:	68f3      	ldr	r3, [r6, #12]
 8006850:	b183      	cbz	r3, 8006874 <_Balloc+0x50>
 8006852:	69e3      	ldr	r3, [r4, #28]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800685a:	b9b8      	cbnz	r0, 800688c <_Balloc+0x68>
 800685c:	2101      	movs	r1, #1
 800685e:	fa01 f605 	lsl.w	r6, r1, r5
 8006862:	1d72      	adds	r2, r6, #5
 8006864:	0092      	lsls	r2, r2, #2
 8006866:	4620      	mov	r0, r4
 8006868:	f000 fda2 	bl	80073b0 <_calloc_r>
 800686c:	b160      	cbz	r0, 8006888 <_Balloc+0x64>
 800686e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006872:	e00e      	b.n	8006892 <_Balloc+0x6e>
 8006874:	2221      	movs	r2, #33	@ 0x21
 8006876:	2104      	movs	r1, #4
 8006878:	4620      	mov	r0, r4
 800687a:	f000 fd99 	bl	80073b0 <_calloc_r>
 800687e:	69e3      	ldr	r3, [r4, #28]
 8006880:	60f0      	str	r0, [r6, #12]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d1e4      	bne.n	8006852 <_Balloc+0x2e>
 8006888:	2000      	movs	r0, #0
 800688a:	bd70      	pop	{r4, r5, r6, pc}
 800688c:	6802      	ldr	r2, [r0, #0]
 800688e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006892:	2300      	movs	r3, #0
 8006894:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006898:	e7f7      	b.n	800688a <_Balloc+0x66>
 800689a:	bf00      	nop
 800689c:	08007fb1 	.word	0x08007fb1
 80068a0:	08008031 	.word	0x08008031

080068a4 <_Bfree>:
 80068a4:	b570      	push	{r4, r5, r6, lr}
 80068a6:	69c6      	ldr	r6, [r0, #28]
 80068a8:	4605      	mov	r5, r0
 80068aa:	460c      	mov	r4, r1
 80068ac:	b976      	cbnz	r6, 80068cc <_Bfree+0x28>
 80068ae:	2010      	movs	r0, #16
 80068b0:	f7fe fa08 	bl	8004cc4 <malloc>
 80068b4:	4602      	mov	r2, r0
 80068b6:	61e8      	str	r0, [r5, #28]
 80068b8:	b920      	cbnz	r0, 80068c4 <_Bfree+0x20>
 80068ba:	4b09      	ldr	r3, [pc, #36]	@ (80068e0 <_Bfree+0x3c>)
 80068bc:	4809      	ldr	r0, [pc, #36]	@ (80068e4 <_Bfree+0x40>)
 80068be:	218f      	movs	r1, #143	@ 0x8f
 80068c0:	f000 fd58 	bl	8007374 <__assert_func>
 80068c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068c8:	6006      	str	r6, [r0, #0]
 80068ca:	60c6      	str	r6, [r0, #12]
 80068cc:	b13c      	cbz	r4, 80068de <_Bfree+0x3a>
 80068ce:	69eb      	ldr	r3, [r5, #28]
 80068d0:	6862      	ldr	r2, [r4, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068d8:	6021      	str	r1, [r4, #0]
 80068da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068de:	bd70      	pop	{r4, r5, r6, pc}
 80068e0:	08007fb1 	.word	0x08007fb1
 80068e4:	08008031 	.word	0x08008031

080068e8 <__multadd>:
 80068e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068ec:	690d      	ldr	r5, [r1, #16]
 80068ee:	4607      	mov	r7, r0
 80068f0:	460c      	mov	r4, r1
 80068f2:	461e      	mov	r6, r3
 80068f4:	f101 0c14 	add.w	ip, r1, #20
 80068f8:	2000      	movs	r0, #0
 80068fa:	f8dc 3000 	ldr.w	r3, [ip]
 80068fe:	b299      	uxth	r1, r3
 8006900:	fb02 6101 	mla	r1, r2, r1, r6
 8006904:	0c1e      	lsrs	r6, r3, #16
 8006906:	0c0b      	lsrs	r3, r1, #16
 8006908:	fb02 3306 	mla	r3, r2, r6, r3
 800690c:	b289      	uxth	r1, r1
 800690e:	3001      	adds	r0, #1
 8006910:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006914:	4285      	cmp	r5, r0
 8006916:	f84c 1b04 	str.w	r1, [ip], #4
 800691a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800691e:	dcec      	bgt.n	80068fa <__multadd+0x12>
 8006920:	b30e      	cbz	r6, 8006966 <__multadd+0x7e>
 8006922:	68a3      	ldr	r3, [r4, #8]
 8006924:	42ab      	cmp	r3, r5
 8006926:	dc19      	bgt.n	800695c <__multadd+0x74>
 8006928:	6861      	ldr	r1, [r4, #4]
 800692a:	4638      	mov	r0, r7
 800692c:	3101      	adds	r1, #1
 800692e:	f7ff ff79 	bl	8006824 <_Balloc>
 8006932:	4680      	mov	r8, r0
 8006934:	b928      	cbnz	r0, 8006942 <__multadd+0x5a>
 8006936:	4602      	mov	r2, r0
 8006938:	4b0c      	ldr	r3, [pc, #48]	@ (800696c <__multadd+0x84>)
 800693a:	480d      	ldr	r0, [pc, #52]	@ (8006970 <__multadd+0x88>)
 800693c:	21ba      	movs	r1, #186	@ 0xba
 800693e:	f000 fd19 	bl	8007374 <__assert_func>
 8006942:	6922      	ldr	r2, [r4, #16]
 8006944:	3202      	adds	r2, #2
 8006946:	f104 010c 	add.w	r1, r4, #12
 800694a:	0092      	lsls	r2, r2, #2
 800694c:	300c      	adds	r0, #12
 800694e:	f7ff f8c2 	bl	8005ad6 <memcpy>
 8006952:	4621      	mov	r1, r4
 8006954:	4638      	mov	r0, r7
 8006956:	f7ff ffa5 	bl	80068a4 <_Bfree>
 800695a:	4644      	mov	r4, r8
 800695c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006960:	3501      	adds	r5, #1
 8006962:	615e      	str	r6, [r3, #20]
 8006964:	6125      	str	r5, [r4, #16]
 8006966:	4620      	mov	r0, r4
 8006968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800696c:	08008020 	.word	0x08008020
 8006970:	08008031 	.word	0x08008031

08006974 <__hi0bits>:
 8006974:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006978:	4603      	mov	r3, r0
 800697a:	bf36      	itet	cc
 800697c:	0403      	lslcc	r3, r0, #16
 800697e:	2000      	movcs	r0, #0
 8006980:	2010      	movcc	r0, #16
 8006982:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006986:	bf3c      	itt	cc
 8006988:	021b      	lslcc	r3, r3, #8
 800698a:	3008      	addcc	r0, #8
 800698c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006990:	bf3c      	itt	cc
 8006992:	011b      	lslcc	r3, r3, #4
 8006994:	3004      	addcc	r0, #4
 8006996:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800699a:	bf3c      	itt	cc
 800699c:	009b      	lslcc	r3, r3, #2
 800699e:	3002      	addcc	r0, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	db05      	blt.n	80069b0 <__hi0bits+0x3c>
 80069a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80069a8:	f100 0001 	add.w	r0, r0, #1
 80069ac:	bf08      	it	eq
 80069ae:	2020      	moveq	r0, #32
 80069b0:	4770      	bx	lr

080069b2 <__lo0bits>:
 80069b2:	6803      	ldr	r3, [r0, #0]
 80069b4:	4602      	mov	r2, r0
 80069b6:	f013 0007 	ands.w	r0, r3, #7
 80069ba:	d00b      	beq.n	80069d4 <__lo0bits+0x22>
 80069bc:	07d9      	lsls	r1, r3, #31
 80069be:	d421      	bmi.n	8006a04 <__lo0bits+0x52>
 80069c0:	0798      	lsls	r0, r3, #30
 80069c2:	bf49      	itett	mi
 80069c4:	085b      	lsrmi	r3, r3, #1
 80069c6:	089b      	lsrpl	r3, r3, #2
 80069c8:	2001      	movmi	r0, #1
 80069ca:	6013      	strmi	r3, [r2, #0]
 80069cc:	bf5c      	itt	pl
 80069ce:	6013      	strpl	r3, [r2, #0]
 80069d0:	2002      	movpl	r0, #2
 80069d2:	4770      	bx	lr
 80069d4:	b299      	uxth	r1, r3
 80069d6:	b909      	cbnz	r1, 80069dc <__lo0bits+0x2a>
 80069d8:	0c1b      	lsrs	r3, r3, #16
 80069da:	2010      	movs	r0, #16
 80069dc:	b2d9      	uxtb	r1, r3
 80069de:	b909      	cbnz	r1, 80069e4 <__lo0bits+0x32>
 80069e0:	3008      	adds	r0, #8
 80069e2:	0a1b      	lsrs	r3, r3, #8
 80069e4:	0719      	lsls	r1, r3, #28
 80069e6:	bf04      	itt	eq
 80069e8:	091b      	lsreq	r3, r3, #4
 80069ea:	3004      	addeq	r0, #4
 80069ec:	0799      	lsls	r1, r3, #30
 80069ee:	bf04      	itt	eq
 80069f0:	089b      	lsreq	r3, r3, #2
 80069f2:	3002      	addeq	r0, #2
 80069f4:	07d9      	lsls	r1, r3, #31
 80069f6:	d403      	bmi.n	8006a00 <__lo0bits+0x4e>
 80069f8:	085b      	lsrs	r3, r3, #1
 80069fa:	f100 0001 	add.w	r0, r0, #1
 80069fe:	d003      	beq.n	8006a08 <__lo0bits+0x56>
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	4770      	bx	lr
 8006a04:	2000      	movs	r0, #0
 8006a06:	4770      	bx	lr
 8006a08:	2020      	movs	r0, #32
 8006a0a:	4770      	bx	lr

08006a0c <__i2b>:
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	460c      	mov	r4, r1
 8006a10:	2101      	movs	r1, #1
 8006a12:	f7ff ff07 	bl	8006824 <_Balloc>
 8006a16:	4602      	mov	r2, r0
 8006a18:	b928      	cbnz	r0, 8006a26 <__i2b+0x1a>
 8006a1a:	4b05      	ldr	r3, [pc, #20]	@ (8006a30 <__i2b+0x24>)
 8006a1c:	4805      	ldr	r0, [pc, #20]	@ (8006a34 <__i2b+0x28>)
 8006a1e:	f240 1145 	movw	r1, #325	@ 0x145
 8006a22:	f000 fca7 	bl	8007374 <__assert_func>
 8006a26:	2301      	movs	r3, #1
 8006a28:	6144      	str	r4, [r0, #20]
 8006a2a:	6103      	str	r3, [r0, #16]
 8006a2c:	bd10      	pop	{r4, pc}
 8006a2e:	bf00      	nop
 8006a30:	08008020 	.word	0x08008020
 8006a34:	08008031 	.word	0x08008031

08006a38 <__multiply>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	4614      	mov	r4, r2
 8006a3e:	690a      	ldr	r2, [r1, #16]
 8006a40:	6923      	ldr	r3, [r4, #16]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	bfa8      	it	ge
 8006a46:	4623      	movge	r3, r4
 8006a48:	460f      	mov	r7, r1
 8006a4a:	bfa4      	itt	ge
 8006a4c:	460c      	movge	r4, r1
 8006a4e:	461f      	movge	r7, r3
 8006a50:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006a54:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006a58:	68a3      	ldr	r3, [r4, #8]
 8006a5a:	6861      	ldr	r1, [r4, #4]
 8006a5c:	eb0a 0609 	add.w	r6, sl, r9
 8006a60:	42b3      	cmp	r3, r6
 8006a62:	b085      	sub	sp, #20
 8006a64:	bfb8      	it	lt
 8006a66:	3101      	addlt	r1, #1
 8006a68:	f7ff fedc 	bl	8006824 <_Balloc>
 8006a6c:	b930      	cbnz	r0, 8006a7c <__multiply+0x44>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	4b44      	ldr	r3, [pc, #272]	@ (8006b84 <__multiply+0x14c>)
 8006a72:	4845      	ldr	r0, [pc, #276]	@ (8006b88 <__multiply+0x150>)
 8006a74:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006a78:	f000 fc7c 	bl	8007374 <__assert_func>
 8006a7c:	f100 0514 	add.w	r5, r0, #20
 8006a80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a84:	462b      	mov	r3, r5
 8006a86:	2200      	movs	r2, #0
 8006a88:	4543      	cmp	r3, r8
 8006a8a:	d321      	bcc.n	8006ad0 <__multiply+0x98>
 8006a8c:	f107 0114 	add.w	r1, r7, #20
 8006a90:	f104 0214 	add.w	r2, r4, #20
 8006a94:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006a98:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006a9c:	9302      	str	r3, [sp, #8]
 8006a9e:	1b13      	subs	r3, r2, r4
 8006aa0:	3b15      	subs	r3, #21
 8006aa2:	f023 0303 	bic.w	r3, r3, #3
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	f104 0715 	add.w	r7, r4, #21
 8006aac:	42ba      	cmp	r2, r7
 8006aae:	bf38      	it	cc
 8006ab0:	2304      	movcc	r3, #4
 8006ab2:	9301      	str	r3, [sp, #4]
 8006ab4:	9b02      	ldr	r3, [sp, #8]
 8006ab6:	9103      	str	r1, [sp, #12]
 8006ab8:	428b      	cmp	r3, r1
 8006aba:	d80c      	bhi.n	8006ad6 <__multiply+0x9e>
 8006abc:	2e00      	cmp	r6, #0
 8006abe:	dd03      	ble.n	8006ac8 <__multiply+0x90>
 8006ac0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d05b      	beq.n	8006b80 <__multiply+0x148>
 8006ac8:	6106      	str	r6, [r0, #16]
 8006aca:	b005      	add	sp, #20
 8006acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ad0:	f843 2b04 	str.w	r2, [r3], #4
 8006ad4:	e7d8      	b.n	8006a88 <__multiply+0x50>
 8006ad6:	f8b1 a000 	ldrh.w	sl, [r1]
 8006ada:	f1ba 0f00 	cmp.w	sl, #0
 8006ade:	d024      	beq.n	8006b2a <__multiply+0xf2>
 8006ae0:	f104 0e14 	add.w	lr, r4, #20
 8006ae4:	46a9      	mov	r9, r5
 8006ae6:	f04f 0c00 	mov.w	ip, #0
 8006aea:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006aee:	f8d9 3000 	ldr.w	r3, [r9]
 8006af2:	fa1f fb87 	uxth.w	fp, r7
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	fb0a 330b 	mla	r3, sl, fp, r3
 8006afc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006b00:	f8d9 7000 	ldr.w	r7, [r9]
 8006b04:	4463      	add	r3, ip
 8006b06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006b0a:	fb0a c70b 	mla	r7, sl, fp, ip
 8006b0e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b18:	4572      	cmp	r2, lr
 8006b1a:	f849 3b04 	str.w	r3, [r9], #4
 8006b1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006b22:	d8e2      	bhi.n	8006aea <__multiply+0xb2>
 8006b24:	9b01      	ldr	r3, [sp, #4]
 8006b26:	f845 c003 	str.w	ip, [r5, r3]
 8006b2a:	9b03      	ldr	r3, [sp, #12]
 8006b2c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006b30:	3104      	adds	r1, #4
 8006b32:	f1b9 0f00 	cmp.w	r9, #0
 8006b36:	d021      	beq.n	8006b7c <__multiply+0x144>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	f104 0c14 	add.w	ip, r4, #20
 8006b3e:	46ae      	mov	lr, r5
 8006b40:	f04f 0a00 	mov.w	sl, #0
 8006b44:	f8bc b000 	ldrh.w	fp, [ip]
 8006b48:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006b4c:	fb09 770b 	mla	r7, r9, fp, r7
 8006b50:	4457      	add	r7, sl
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b58:	f84e 3b04 	str.w	r3, [lr], #4
 8006b5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b64:	f8be 3000 	ldrh.w	r3, [lr]
 8006b68:	fb09 330a 	mla	r3, r9, sl, r3
 8006b6c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006b70:	4562      	cmp	r2, ip
 8006b72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b76:	d8e5      	bhi.n	8006b44 <__multiply+0x10c>
 8006b78:	9f01      	ldr	r7, [sp, #4]
 8006b7a:	51eb      	str	r3, [r5, r7]
 8006b7c:	3504      	adds	r5, #4
 8006b7e:	e799      	b.n	8006ab4 <__multiply+0x7c>
 8006b80:	3e01      	subs	r6, #1
 8006b82:	e79b      	b.n	8006abc <__multiply+0x84>
 8006b84:	08008020 	.word	0x08008020
 8006b88:	08008031 	.word	0x08008031

08006b8c <__pow5mult>:
 8006b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b90:	4615      	mov	r5, r2
 8006b92:	f012 0203 	ands.w	r2, r2, #3
 8006b96:	4607      	mov	r7, r0
 8006b98:	460e      	mov	r6, r1
 8006b9a:	d007      	beq.n	8006bac <__pow5mult+0x20>
 8006b9c:	4c25      	ldr	r4, [pc, #148]	@ (8006c34 <__pow5mult+0xa8>)
 8006b9e:	3a01      	subs	r2, #1
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ba6:	f7ff fe9f 	bl	80068e8 <__multadd>
 8006baa:	4606      	mov	r6, r0
 8006bac:	10ad      	asrs	r5, r5, #2
 8006bae:	d03d      	beq.n	8006c2c <__pow5mult+0xa0>
 8006bb0:	69fc      	ldr	r4, [r7, #28]
 8006bb2:	b97c      	cbnz	r4, 8006bd4 <__pow5mult+0x48>
 8006bb4:	2010      	movs	r0, #16
 8006bb6:	f7fe f885 	bl	8004cc4 <malloc>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	61f8      	str	r0, [r7, #28]
 8006bbe:	b928      	cbnz	r0, 8006bcc <__pow5mult+0x40>
 8006bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c38 <__pow5mult+0xac>)
 8006bc2:	481e      	ldr	r0, [pc, #120]	@ (8006c3c <__pow5mult+0xb0>)
 8006bc4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006bc8:	f000 fbd4 	bl	8007374 <__assert_func>
 8006bcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bd0:	6004      	str	r4, [r0, #0]
 8006bd2:	60c4      	str	r4, [r0, #12]
 8006bd4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006bd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006bdc:	b94c      	cbnz	r4, 8006bf2 <__pow5mult+0x66>
 8006bde:	f240 2171 	movw	r1, #625	@ 0x271
 8006be2:	4638      	mov	r0, r7
 8006be4:	f7ff ff12 	bl	8006a0c <__i2b>
 8006be8:	2300      	movs	r3, #0
 8006bea:	f8c8 0008 	str.w	r0, [r8, #8]
 8006bee:	4604      	mov	r4, r0
 8006bf0:	6003      	str	r3, [r0, #0]
 8006bf2:	f04f 0900 	mov.w	r9, #0
 8006bf6:	07eb      	lsls	r3, r5, #31
 8006bf8:	d50a      	bpl.n	8006c10 <__pow5mult+0x84>
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	4622      	mov	r2, r4
 8006bfe:	4638      	mov	r0, r7
 8006c00:	f7ff ff1a 	bl	8006a38 <__multiply>
 8006c04:	4631      	mov	r1, r6
 8006c06:	4680      	mov	r8, r0
 8006c08:	4638      	mov	r0, r7
 8006c0a:	f7ff fe4b 	bl	80068a4 <_Bfree>
 8006c0e:	4646      	mov	r6, r8
 8006c10:	106d      	asrs	r5, r5, #1
 8006c12:	d00b      	beq.n	8006c2c <__pow5mult+0xa0>
 8006c14:	6820      	ldr	r0, [r4, #0]
 8006c16:	b938      	cbnz	r0, 8006c28 <__pow5mult+0x9c>
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	4638      	mov	r0, r7
 8006c1e:	f7ff ff0b 	bl	8006a38 <__multiply>
 8006c22:	6020      	str	r0, [r4, #0]
 8006c24:	f8c0 9000 	str.w	r9, [r0]
 8006c28:	4604      	mov	r4, r0
 8006c2a:	e7e4      	b.n	8006bf6 <__pow5mult+0x6a>
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c32:	bf00      	nop
 8006c34:	0800808c 	.word	0x0800808c
 8006c38:	08007fb1 	.word	0x08007fb1
 8006c3c:	08008031 	.word	0x08008031

08006c40 <__lshift>:
 8006c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c44:	460c      	mov	r4, r1
 8006c46:	6849      	ldr	r1, [r1, #4]
 8006c48:	6923      	ldr	r3, [r4, #16]
 8006c4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c4e:	68a3      	ldr	r3, [r4, #8]
 8006c50:	4607      	mov	r7, r0
 8006c52:	4691      	mov	r9, r2
 8006c54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c58:	f108 0601 	add.w	r6, r8, #1
 8006c5c:	42b3      	cmp	r3, r6
 8006c5e:	db0b      	blt.n	8006c78 <__lshift+0x38>
 8006c60:	4638      	mov	r0, r7
 8006c62:	f7ff fddf 	bl	8006824 <_Balloc>
 8006c66:	4605      	mov	r5, r0
 8006c68:	b948      	cbnz	r0, 8006c7e <__lshift+0x3e>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	4b28      	ldr	r3, [pc, #160]	@ (8006d10 <__lshift+0xd0>)
 8006c6e:	4829      	ldr	r0, [pc, #164]	@ (8006d14 <__lshift+0xd4>)
 8006c70:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006c74:	f000 fb7e 	bl	8007374 <__assert_func>
 8006c78:	3101      	adds	r1, #1
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	e7ee      	b.n	8006c5c <__lshift+0x1c>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f100 0114 	add.w	r1, r0, #20
 8006c84:	f100 0210 	add.w	r2, r0, #16
 8006c88:	4618      	mov	r0, r3
 8006c8a:	4553      	cmp	r3, sl
 8006c8c:	db33      	blt.n	8006cf6 <__lshift+0xb6>
 8006c8e:	6920      	ldr	r0, [r4, #16]
 8006c90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c94:	f104 0314 	add.w	r3, r4, #20
 8006c98:	f019 091f 	ands.w	r9, r9, #31
 8006c9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ca0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ca4:	d02b      	beq.n	8006cfe <__lshift+0xbe>
 8006ca6:	f1c9 0e20 	rsb	lr, r9, #32
 8006caa:	468a      	mov	sl, r1
 8006cac:	2200      	movs	r2, #0
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	fa00 f009 	lsl.w	r0, r0, r9
 8006cb4:	4310      	orrs	r0, r2
 8006cb6:	f84a 0b04 	str.w	r0, [sl], #4
 8006cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cbe:	459c      	cmp	ip, r3
 8006cc0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006cc4:	d8f3      	bhi.n	8006cae <__lshift+0x6e>
 8006cc6:	ebac 0304 	sub.w	r3, ip, r4
 8006cca:	3b15      	subs	r3, #21
 8006ccc:	f023 0303 	bic.w	r3, r3, #3
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	f104 0015 	add.w	r0, r4, #21
 8006cd6:	4584      	cmp	ip, r0
 8006cd8:	bf38      	it	cc
 8006cda:	2304      	movcc	r3, #4
 8006cdc:	50ca      	str	r2, [r1, r3]
 8006cde:	b10a      	cbz	r2, 8006ce4 <__lshift+0xa4>
 8006ce0:	f108 0602 	add.w	r6, r8, #2
 8006ce4:	3e01      	subs	r6, #1
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	612e      	str	r6, [r5, #16]
 8006cea:	4621      	mov	r1, r4
 8006cec:	f7ff fdda 	bl	80068a4 <_Bfree>
 8006cf0:	4628      	mov	r0, r5
 8006cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	e7c5      	b.n	8006c8a <__lshift+0x4a>
 8006cfe:	3904      	subs	r1, #4
 8006d00:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d04:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d08:	459c      	cmp	ip, r3
 8006d0a:	d8f9      	bhi.n	8006d00 <__lshift+0xc0>
 8006d0c:	e7ea      	b.n	8006ce4 <__lshift+0xa4>
 8006d0e:	bf00      	nop
 8006d10:	08008020 	.word	0x08008020
 8006d14:	08008031 	.word	0x08008031

08006d18 <__mcmp>:
 8006d18:	690a      	ldr	r2, [r1, #16]
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	6900      	ldr	r0, [r0, #16]
 8006d1e:	1a80      	subs	r0, r0, r2
 8006d20:	b530      	push	{r4, r5, lr}
 8006d22:	d10e      	bne.n	8006d42 <__mcmp+0x2a>
 8006d24:	3314      	adds	r3, #20
 8006d26:	3114      	adds	r1, #20
 8006d28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006d34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006d38:	4295      	cmp	r5, r2
 8006d3a:	d003      	beq.n	8006d44 <__mcmp+0x2c>
 8006d3c:	d205      	bcs.n	8006d4a <__mcmp+0x32>
 8006d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d42:	bd30      	pop	{r4, r5, pc}
 8006d44:	42a3      	cmp	r3, r4
 8006d46:	d3f3      	bcc.n	8006d30 <__mcmp+0x18>
 8006d48:	e7fb      	b.n	8006d42 <__mcmp+0x2a>
 8006d4a:	2001      	movs	r0, #1
 8006d4c:	e7f9      	b.n	8006d42 <__mcmp+0x2a>
	...

08006d50 <__mdiff>:
 8006d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d54:	4689      	mov	r9, r1
 8006d56:	4606      	mov	r6, r0
 8006d58:	4611      	mov	r1, r2
 8006d5a:	4648      	mov	r0, r9
 8006d5c:	4614      	mov	r4, r2
 8006d5e:	f7ff ffdb 	bl	8006d18 <__mcmp>
 8006d62:	1e05      	subs	r5, r0, #0
 8006d64:	d112      	bne.n	8006d8c <__mdiff+0x3c>
 8006d66:	4629      	mov	r1, r5
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f7ff fd5b 	bl	8006824 <_Balloc>
 8006d6e:	4602      	mov	r2, r0
 8006d70:	b928      	cbnz	r0, 8006d7e <__mdiff+0x2e>
 8006d72:	4b3f      	ldr	r3, [pc, #252]	@ (8006e70 <__mdiff+0x120>)
 8006d74:	f240 2137 	movw	r1, #567	@ 0x237
 8006d78:	483e      	ldr	r0, [pc, #248]	@ (8006e74 <__mdiff+0x124>)
 8006d7a:	f000 fafb 	bl	8007374 <__assert_func>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d84:	4610      	mov	r0, r2
 8006d86:	b003      	add	sp, #12
 8006d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8c:	bfbc      	itt	lt
 8006d8e:	464b      	movlt	r3, r9
 8006d90:	46a1      	movlt	r9, r4
 8006d92:	4630      	mov	r0, r6
 8006d94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006d98:	bfba      	itte	lt
 8006d9a:	461c      	movlt	r4, r3
 8006d9c:	2501      	movlt	r5, #1
 8006d9e:	2500      	movge	r5, #0
 8006da0:	f7ff fd40 	bl	8006824 <_Balloc>
 8006da4:	4602      	mov	r2, r0
 8006da6:	b918      	cbnz	r0, 8006db0 <__mdiff+0x60>
 8006da8:	4b31      	ldr	r3, [pc, #196]	@ (8006e70 <__mdiff+0x120>)
 8006daa:	f240 2145 	movw	r1, #581	@ 0x245
 8006dae:	e7e3      	b.n	8006d78 <__mdiff+0x28>
 8006db0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006db4:	6926      	ldr	r6, [r4, #16]
 8006db6:	60c5      	str	r5, [r0, #12]
 8006db8:	f109 0310 	add.w	r3, r9, #16
 8006dbc:	f109 0514 	add.w	r5, r9, #20
 8006dc0:	f104 0e14 	add.w	lr, r4, #20
 8006dc4:	f100 0b14 	add.w	fp, r0, #20
 8006dc8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006dcc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	46d9      	mov	r9, fp
 8006dd4:	f04f 0c00 	mov.w	ip, #0
 8006dd8:	9b01      	ldr	r3, [sp, #4]
 8006dda:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006dde:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006de2:	9301      	str	r3, [sp, #4]
 8006de4:	fa1f f38a 	uxth.w	r3, sl
 8006de8:	4619      	mov	r1, r3
 8006dea:	b283      	uxth	r3, r0
 8006dec:	1acb      	subs	r3, r1, r3
 8006dee:	0c00      	lsrs	r0, r0, #16
 8006df0:	4463      	add	r3, ip
 8006df2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006df6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e00:	4576      	cmp	r6, lr
 8006e02:	f849 3b04 	str.w	r3, [r9], #4
 8006e06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e0a:	d8e5      	bhi.n	8006dd8 <__mdiff+0x88>
 8006e0c:	1b33      	subs	r3, r6, r4
 8006e0e:	3b15      	subs	r3, #21
 8006e10:	f023 0303 	bic.w	r3, r3, #3
 8006e14:	3415      	adds	r4, #21
 8006e16:	3304      	adds	r3, #4
 8006e18:	42a6      	cmp	r6, r4
 8006e1a:	bf38      	it	cc
 8006e1c:	2304      	movcc	r3, #4
 8006e1e:	441d      	add	r5, r3
 8006e20:	445b      	add	r3, fp
 8006e22:	461e      	mov	r6, r3
 8006e24:	462c      	mov	r4, r5
 8006e26:	4544      	cmp	r4, r8
 8006e28:	d30e      	bcc.n	8006e48 <__mdiff+0xf8>
 8006e2a:	f108 0103 	add.w	r1, r8, #3
 8006e2e:	1b49      	subs	r1, r1, r5
 8006e30:	f021 0103 	bic.w	r1, r1, #3
 8006e34:	3d03      	subs	r5, #3
 8006e36:	45a8      	cmp	r8, r5
 8006e38:	bf38      	it	cc
 8006e3a:	2100      	movcc	r1, #0
 8006e3c:	440b      	add	r3, r1
 8006e3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e42:	b191      	cbz	r1, 8006e6a <__mdiff+0x11a>
 8006e44:	6117      	str	r7, [r2, #16]
 8006e46:	e79d      	b.n	8006d84 <__mdiff+0x34>
 8006e48:	f854 1b04 	ldr.w	r1, [r4], #4
 8006e4c:	46e6      	mov	lr, ip
 8006e4e:	0c08      	lsrs	r0, r1, #16
 8006e50:	fa1c fc81 	uxtah	ip, ip, r1
 8006e54:	4471      	add	r1, lr
 8006e56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006e5a:	b289      	uxth	r1, r1
 8006e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006e60:	f846 1b04 	str.w	r1, [r6], #4
 8006e64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e68:	e7dd      	b.n	8006e26 <__mdiff+0xd6>
 8006e6a:	3f01      	subs	r7, #1
 8006e6c:	e7e7      	b.n	8006e3e <__mdiff+0xee>
 8006e6e:	bf00      	nop
 8006e70:	08008020 	.word	0x08008020
 8006e74:	08008031 	.word	0x08008031

08006e78 <__d2b>:
 8006e78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e7c:	460f      	mov	r7, r1
 8006e7e:	2101      	movs	r1, #1
 8006e80:	ec59 8b10 	vmov	r8, r9, d0
 8006e84:	4616      	mov	r6, r2
 8006e86:	f7ff fccd 	bl	8006824 <_Balloc>
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	b930      	cbnz	r0, 8006e9c <__d2b+0x24>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	4b23      	ldr	r3, [pc, #140]	@ (8006f20 <__d2b+0xa8>)
 8006e92:	4824      	ldr	r0, [pc, #144]	@ (8006f24 <__d2b+0xac>)
 8006e94:	f240 310f 	movw	r1, #783	@ 0x30f
 8006e98:	f000 fa6c 	bl	8007374 <__assert_func>
 8006e9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ea0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ea4:	b10d      	cbz	r5, 8006eaa <__d2b+0x32>
 8006ea6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006eaa:	9301      	str	r3, [sp, #4]
 8006eac:	f1b8 0300 	subs.w	r3, r8, #0
 8006eb0:	d023      	beq.n	8006efa <__d2b+0x82>
 8006eb2:	4668      	mov	r0, sp
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	f7ff fd7c 	bl	80069b2 <__lo0bits>
 8006eba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ebe:	b1d0      	cbz	r0, 8006ef6 <__d2b+0x7e>
 8006ec0:	f1c0 0320 	rsb	r3, r0, #32
 8006ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec8:	430b      	orrs	r3, r1
 8006eca:	40c2      	lsrs	r2, r0
 8006ecc:	6163      	str	r3, [r4, #20]
 8006ece:	9201      	str	r2, [sp, #4]
 8006ed0:	9b01      	ldr	r3, [sp, #4]
 8006ed2:	61a3      	str	r3, [r4, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bf0c      	ite	eq
 8006ed8:	2201      	moveq	r2, #1
 8006eda:	2202      	movne	r2, #2
 8006edc:	6122      	str	r2, [r4, #16]
 8006ede:	b1a5      	cbz	r5, 8006f0a <__d2b+0x92>
 8006ee0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ee4:	4405      	add	r5, r0
 8006ee6:	603d      	str	r5, [r7, #0]
 8006ee8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006eec:	6030      	str	r0, [r6, #0]
 8006eee:	4620      	mov	r0, r4
 8006ef0:	b003      	add	sp, #12
 8006ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ef6:	6161      	str	r1, [r4, #20]
 8006ef8:	e7ea      	b.n	8006ed0 <__d2b+0x58>
 8006efa:	a801      	add	r0, sp, #4
 8006efc:	f7ff fd59 	bl	80069b2 <__lo0bits>
 8006f00:	9b01      	ldr	r3, [sp, #4]
 8006f02:	6163      	str	r3, [r4, #20]
 8006f04:	3020      	adds	r0, #32
 8006f06:	2201      	movs	r2, #1
 8006f08:	e7e8      	b.n	8006edc <__d2b+0x64>
 8006f0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006f12:	6038      	str	r0, [r7, #0]
 8006f14:	6918      	ldr	r0, [r3, #16]
 8006f16:	f7ff fd2d 	bl	8006974 <__hi0bits>
 8006f1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f1e:	e7e5      	b.n	8006eec <__d2b+0x74>
 8006f20:	08008020 	.word	0x08008020
 8006f24:	08008031 	.word	0x08008031

08006f28 <_malloc_usable_size_r>:
 8006f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f2c:	1f18      	subs	r0, r3, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bfbc      	itt	lt
 8006f32:	580b      	ldrlt	r3, [r1, r0]
 8006f34:	18c0      	addlt	r0, r0, r3
 8006f36:	4770      	bx	lr

08006f38 <__ssputs_r>:
 8006f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f3c:	688e      	ldr	r6, [r1, #8]
 8006f3e:	461f      	mov	r7, r3
 8006f40:	42be      	cmp	r6, r7
 8006f42:	680b      	ldr	r3, [r1, #0]
 8006f44:	4682      	mov	sl, r0
 8006f46:	460c      	mov	r4, r1
 8006f48:	4690      	mov	r8, r2
 8006f4a:	d82d      	bhi.n	8006fa8 <__ssputs_r+0x70>
 8006f4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f54:	d026      	beq.n	8006fa4 <__ssputs_r+0x6c>
 8006f56:	6965      	ldr	r5, [r4, #20]
 8006f58:	6909      	ldr	r1, [r1, #16]
 8006f5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f5e:	eba3 0901 	sub.w	r9, r3, r1
 8006f62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f66:	1c7b      	adds	r3, r7, #1
 8006f68:	444b      	add	r3, r9
 8006f6a:	106d      	asrs	r5, r5, #1
 8006f6c:	429d      	cmp	r5, r3
 8006f6e:	bf38      	it	cc
 8006f70:	461d      	movcc	r5, r3
 8006f72:	0553      	lsls	r3, r2, #21
 8006f74:	d527      	bpl.n	8006fc6 <__ssputs_r+0x8e>
 8006f76:	4629      	mov	r1, r5
 8006f78:	f7fd fece 	bl	8004d18 <_malloc_r>
 8006f7c:	4606      	mov	r6, r0
 8006f7e:	b360      	cbz	r0, 8006fda <__ssputs_r+0xa2>
 8006f80:	6921      	ldr	r1, [r4, #16]
 8006f82:	464a      	mov	r2, r9
 8006f84:	f7fe fda7 	bl	8005ad6 <memcpy>
 8006f88:	89a3      	ldrh	r3, [r4, #12]
 8006f8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f92:	81a3      	strh	r3, [r4, #12]
 8006f94:	6126      	str	r6, [r4, #16]
 8006f96:	6165      	str	r5, [r4, #20]
 8006f98:	444e      	add	r6, r9
 8006f9a:	eba5 0509 	sub.w	r5, r5, r9
 8006f9e:	6026      	str	r6, [r4, #0]
 8006fa0:	60a5      	str	r5, [r4, #8]
 8006fa2:	463e      	mov	r6, r7
 8006fa4:	42be      	cmp	r6, r7
 8006fa6:	d900      	bls.n	8006faa <__ssputs_r+0x72>
 8006fa8:	463e      	mov	r6, r7
 8006faa:	6820      	ldr	r0, [r4, #0]
 8006fac:	4632      	mov	r2, r6
 8006fae:	4641      	mov	r1, r8
 8006fb0:	f000 f9c6 	bl	8007340 <memmove>
 8006fb4:	68a3      	ldr	r3, [r4, #8]
 8006fb6:	1b9b      	subs	r3, r3, r6
 8006fb8:	60a3      	str	r3, [r4, #8]
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	4433      	add	r3, r6
 8006fbe:	6023      	str	r3, [r4, #0]
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc6:	462a      	mov	r2, r5
 8006fc8:	f7fd ff32 	bl	8004e30 <_realloc_r>
 8006fcc:	4606      	mov	r6, r0
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	d1e0      	bne.n	8006f94 <__ssputs_r+0x5c>
 8006fd2:	6921      	ldr	r1, [r4, #16]
 8006fd4:	4650      	mov	r0, sl
 8006fd6:	f7ff fbdb 	bl	8006790 <_free_r>
 8006fda:	230c      	movs	r3, #12
 8006fdc:	f8ca 3000 	str.w	r3, [sl]
 8006fe0:	89a3      	ldrh	r3, [r4, #12]
 8006fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fe6:	81a3      	strh	r3, [r4, #12]
 8006fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fec:	e7e9      	b.n	8006fc2 <__ssputs_r+0x8a>
	...

08006ff0 <_svfiprintf_r>:
 8006ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff4:	4698      	mov	r8, r3
 8006ff6:	898b      	ldrh	r3, [r1, #12]
 8006ff8:	061b      	lsls	r3, r3, #24
 8006ffa:	b09d      	sub	sp, #116	@ 0x74
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	460d      	mov	r5, r1
 8007000:	4614      	mov	r4, r2
 8007002:	d510      	bpl.n	8007026 <_svfiprintf_r+0x36>
 8007004:	690b      	ldr	r3, [r1, #16]
 8007006:	b973      	cbnz	r3, 8007026 <_svfiprintf_r+0x36>
 8007008:	2140      	movs	r1, #64	@ 0x40
 800700a:	f7fd fe85 	bl	8004d18 <_malloc_r>
 800700e:	6028      	str	r0, [r5, #0]
 8007010:	6128      	str	r0, [r5, #16]
 8007012:	b930      	cbnz	r0, 8007022 <_svfiprintf_r+0x32>
 8007014:	230c      	movs	r3, #12
 8007016:	603b      	str	r3, [r7, #0]
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
 800701c:	b01d      	add	sp, #116	@ 0x74
 800701e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007022:	2340      	movs	r3, #64	@ 0x40
 8007024:	616b      	str	r3, [r5, #20]
 8007026:	2300      	movs	r3, #0
 8007028:	9309      	str	r3, [sp, #36]	@ 0x24
 800702a:	2320      	movs	r3, #32
 800702c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007030:	f8cd 800c 	str.w	r8, [sp, #12]
 8007034:	2330      	movs	r3, #48	@ 0x30
 8007036:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80071d4 <_svfiprintf_r+0x1e4>
 800703a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800703e:	f04f 0901 	mov.w	r9, #1
 8007042:	4623      	mov	r3, r4
 8007044:	469a      	mov	sl, r3
 8007046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800704a:	b10a      	cbz	r2, 8007050 <_svfiprintf_r+0x60>
 800704c:	2a25      	cmp	r2, #37	@ 0x25
 800704e:	d1f9      	bne.n	8007044 <_svfiprintf_r+0x54>
 8007050:	ebba 0b04 	subs.w	fp, sl, r4
 8007054:	d00b      	beq.n	800706e <_svfiprintf_r+0x7e>
 8007056:	465b      	mov	r3, fp
 8007058:	4622      	mov	r2, r4
 800705a:	4629      	mov	r1, r5
 800705c:	4638      	mov	r0, r7
 800705e:	f7ff ff6b 	bl	8006f38 <__ssputs_r>
 8007062:	3001      	adds	r0, #1
 8007064:	f000 80a7 	beq.w	80071b6 <_svfiprintf_r+0x1c6>
 8007068:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800706a:	445a      	add	r2, fp
 800706c:	9209      	str	r2, [sp, #36]	@ 0x24
 800706e:	f89a 3000 	ldrb.w	r3, [sl]
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 809f 	beq.w	80071b6 <_svfiprintf_r+0x1c6>
 8007078:	2300      	movs	r3, #0
 800707a:	f04f 32ff 	mov.w	r2, #4294967295
 800707e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007082:	f10a 0a01 	add.w	sl, sl, #1
 8007086:	9304      	str	r3, [sp, #16]
 8007088:	9307      	str	r3, [sp, #28]
 800708a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800708e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007090:	4654      	mov	r4, sl
 8007092:	2205      	movs	r2, #5
 8007094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007098:	484e      	ldr	r0, [pc, #312]	@ (80071d4 <_svfiprintf_r+0x1e4>)
 800709a:	f7f9 f899 	bl	80001d0 <memchr>
 800709e:	9a04      	ldr	r2, [sp, #16]
 80070a0:	b9d8      	cbnz	r0, 80070da <_svfiprintf_r+0xea>
 80070a2:	06d0      	lsls	r0, r2, #27
 80070a4:	bf44      	itt	mi
 80070a6:	2320      	movmi	r3, #32
 80070a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070ac:	0711      	lsls	r1, r2, #28
 80070ae:	bf44      	itt	mi
 80070b0:	232b      	movmi	r3, #43	@ 0x2b
 80070b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070b6:	f89a 3000 	ldrb.w	r3, [sl]
 80070ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80070bc:	d015      	beq.n	80070ea <_svfiprintf_r+0xfa>
 80070be:	9a07      	ldr	r2, [sp, #28]
 80070c0:	4654      	mov	r4, sl
 80070c2:	2000      	movs	r0, #0
 80070c4:	f04f 0c0a 	mov.w	ip, #10
 80070c8:	4621      	mov	r1, r4
 80070ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ce:	3b30      	subs	r3, #48	@ 0x30
 80070d0:	2b09      	cmp	r3, #9
 80070d2:	d94b      	bls.n	800716c <_svfiprintf_r+0x17c>
 80070d4:	b1b0      	cbz	r0, 8007104 <_svfiprintf_r+0x114>
 80070d6:	9207      	str	r2, [sp, #28]
 80070d8:	e014      	b.n	8007104 <_svfiprintf_r+0x114>
 80070da:	eba0 0308 	sub.w	r3, r0, r8
 80070de:	fa09 f303 	lsl.w	r3, r9, r3
 80070e2:	4313      	orrs	r3, r2
 80070e4:	9304      	str	r3, [sp, #16]
 80070e6:	46a2      	mov	sl, r4
 80070e8:	e7d2      	b.n	8007090 <_svfiprintf_r+0xa0>
 80070ea:	9b03      	ldr	r3, [sp, #12]
 80070ec:	1d19      	adds	r1, r3, #4
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	9103      	str	r1, [sp, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	bfbb      	ittet	lt
 80070f6:	425b      	neglt	r3, r3
 80070f8:	f042 0202 	orrlt.w	r2, r2, #2
 80070fc:	9307      	strge	r3, [sp, #28]
 80070fe:	9307      	strlt	r3, [sp, #28]
 8007100:	bfb8      	it	lt
 8007102:	9204      	strlt	r2, [sp, #16]
 8007104:	7823      	ldrb	r3, [r4, #0]
 8007106:	2b2e      	cmp	r3, #46	@ 0x2e
 8007108:	d10a      	bne.n	8007120 <_svfiprintf_r+0x130>
 800710a:	7863      	ldrb	r3, [r4, #1]
 800710c:	2b2a      	cmp	r3, #42	@ 0x2a
 800710e:	d132      	bne.n	8007176 <_svfiprintf_r+0x186>
 8007110:	9b03      	ldr	r3, [sp, #12]
 8007112:	1d1a      	adds	r2, r3, #4
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	9203      	str	r2, [sp, #12]
 8007118:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800711c:	3402      	adds	r4, #2
 800711e:	9305      	str	r3, [sp, #20]
 8007120:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80071e4 <_svfiprintf_r+0x1f4>
 8007124:	7821      	ldrb	r1, [r4, #0]
 8007126:	2203      	movs	r2, #3
 8007128:	4650      	mov	r0, sl
 800712a:	f7f9 f851 	bl	80001d0 <memchr>
 800712e:	b138      	cbz	r0, 8007140 <_svfiprintf_r+0x150>
 8007130:	9b04      	ldr	r3, [sp, #16]
 8007132:	eba0 000a 	sub.w	r0, r0, sl
 8007136:	2240      	movs	r2, #64	@ 0x40
 8007138:	4082      	lsls	r2, r0
 800713a:	4313      	orrs	r3, r2
 800713c:	3401      	adds	r4, #1
 800713e:	9304      	str	r3, [sp, #16]
 8007140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007144:	4824      	ldr	r0, [pc, #144]	@ (80071d8 <_svfiprintf_r+0x1e8>)
 8007146:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800714a:	2206      	movs	r2, #6
 800714c:	f7f9 f840 	bl	80001d0 <memchr>
 8007150:	2800      	cmp	r0, #0
 8007152:	d036      	beq.n	80071c2 <_svfiprintf_r+0x1d2>
 8007154:	4b21      	ldr	r3, [pc, #132]	@ (80071dc <_svfiprintf_r+0x1ec>)
 8007156:	bb1b      	cbnz	r3, 80071a0 <_svfiprintf_r+0x1b0>
 8007158:	9b03      	ldr	r3, [sp, #12]
 800715a:	3307      	adds	r3, #7
 800715c:	f023 0307 	bic.w	r3, r3, #7
 8007160:	3308      	adds	r3, #8
 8007162:	9303      	str	r3, [sp, #12]
 8007164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007166:	4433      	add	r3, r6
 8007168:	9309      	str	r3, [sp, #36]	@ 0x24
 800716a:	e76a      	b.n	8007042 <_svfiprintf_r+0x52>
 800716c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007170:	460c      	mov	r4, r1
 8007172:	2001      	movs	r0, #1
 8007174:	e7a8      	b.n	80070c8 <_svfiprintf_r+0xd8>
 8007176:	2300      	movs	r3, #0
 8007178:	3401      	adds	r4, #1
 800717a:	9305      	str	r3, [sp, #20]
 800717c:	4619      	mov	r1, r3
 800717e:	f04f 0c0a 	mov.w	ip, #10
 8007182:	4620      	mov	r0, r4
 8007184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007188:	3a30      	subs	r2, #48	@ 0x30
 800718a:	2a09      	cmp	r2, #9
 800718c:	d903      	bls.n	8007196 <_svfiprintf_r+0x1a6>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0c6      	beq.n	8007120 <_svfiprintf_r+0x130>
 8007192:	9105      	str	r1, [sp, #20]
 8007194:	e7c4      	b.n	8007120 <_svfiprintf_r+0x130>
 8007196:	fb0c 2101 	mla	r1, ip, r1, r2
 800719a:	4604      	mov	r4, r0
 800719c:	2301      	movs	r3, #1
 800719e:	e7f0      	b.n	8007182 <_svfiprintf_r+0x192>
 80071a0:	ab03      	add	r3, sp, #12
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	462a      	mov	r2, r5
 80071a6:	4b0e      	ldr	r3, [pc, #56]	@ (80071e0 <_svfiprintf_r+0x1f0>)
 80071a8:	a904      	add	r1, sp, #16
 80071aa:	4638      	mov	r0, r7
 80071ac:	f7fd ff0e 	bl	8004fcc <_printf_float>
 80071b0:	1c42      	adds	r2, r0, #1
 80071b2:	4606      	mov	r6, r0
 80071b4:	d1d6      	bne.n	8007164 <_svfiprintf_r+0x174>
 80071b6:	89ab      	ldrh	r3, [r5, #12]
 80071b8:	065b      	lsls	r3, r3, #25
 80071ba:	f53f af2d 	bmi.w	8007018 <_svfiprintf_r+0x28>
 80071be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071c0:	e72c      	b.n	800701c <_svfiprintf_r+0x2c>
 80071c2:	ab03      	add	r3, sp, #12
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	462a      	mov	r2, r5
 80071c8:	4b05      	ldr	r3, [pc, #20]	@ (80071e0 <_svfiprintf_r+0x1f0>)
 80071ca:	a904      	add	r1, sp, #16
 80071cc:	4638      	mov	r0, r7
 80071ce:	f7fe f995 	bl	80054fc <_printf_i>
 80071d2:	e7ed      	b.n	80071b0 <_svfiprintf_r+0x1c0>
 80071d4:	08008188 	.word	0x08008188
 80071d8:	08008192 	.word	0x08008192
 80071dc:	08004fcd 	.word	0x08004fcd
 80071e0:	08006f39 	.word	0x08006f39
 80071e4:	0800818e 	.word	0x0800818e

080071e8 <__sflush_r>:
 80071e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f0:	0716      	lsls	r6, r2, #28
 80071f2:	4605      	mov	r5, r0
 80071f4:	460c      	mov	r4, r1
 80071f6:	d454      	bmi.n	80072a2 <__sflush_r+0xba>
 80071f8:	684b      	ldr	r3, [r1, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	dc02      	bgt.n	8007204 <__sflush_r+0x1c>
 80071fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	dd48      	ble.n	8007296 <__sflush_r+0xae>
 8007204:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007206:	2e00      	cmp	r6, #0
 8007208:	d045      	beq.n	8007296 <__sflush_r+0xae>
 800720a:	2300      	movs	r3, #0
 800720c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007210:	682f      	ldr	r7, [r5, #0]
 8007212:	6a21      	ldr	r1, [r4, #32]
 8007214:	602b      	str	r3, [r5, #0]
 8007216:	d030      	beq.n	800727a <__sflush_r+0x92>
 8007218:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800721a:	89a3      	ldrh	r3, [r4, #12]
 800721c:	0759      	lsls	r1, r3, #29
 800721e:	d505      	bpl.n	800722c <__sflush_r+0x44>
 8007220:	6863      	ldr	r3, [r4, #4]
 8007222:	1ad2      	subs	r2, r2, r3
 8007224:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007226:	b10b      	cbz	r3, 800722c <__sflush_r+0x44>
 8007228:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800722a:	1ad2      	subs	r2, r2, r3
 800722c:	2300      	movs	r3, #0
 800722e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007230:	6a21      	ldr	r1, [r4, #32]
 8007232:	4628      	mov	r0, r5
 8007234:	47b0      	blx	r6
 8007236:	1c43      	adds	r3, r0, #1
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	d106      	bne.n	800724a <__sflush_r+0x62>
 800723c:	6829      	ldr	r1, [r5, #0]
 800723e:	291d      	cmp	r1, #29
 8007240:	d82b      	bhi.n	800729a <__sflush_r+0xb2>
 8007242:	4a2a      	ldr	r2, [pc, #168]	@ (80072ec <__sflush_r+0x104>)
 8007244:	410a      	asrs	r2, r1
 8007246:	07d6      	lsls	r6, r2, #31
 8007248:	d427      	bmi.n	800729a <__sflush_r+0xb2>
 800724a:	2200      	movs	r2, #0
 800724c:	6062      	str	r2, [r4, #4]
 800724e:	04d9      	lsls	r1, r3, #19
 8007250:	6922      	ldr	r2, [r4, #16]
 8007252:	6022      	str	r2, [r4, #0]
 8007254:	d504      	bpl.n	8007260 <__sflush_r+0x78>
 8007256:	1c42      	adds	r2, r0, #1
 8007258:	d101      	bne.n	800725e <__sflush_r+0x76>
 800725a:	682b      	ldr	r3, [r5, #0]
 800725c:	b903      	cbnz	r3, 8007260 <__sflush_r+0x78>
 800725e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007260:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007262:	602f      	str	r7, [r5, #0]
 8007264:	b1b9      	cbz	r1, 8007296 <__sflush_r+0xae>
 8007266:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800726a:	4299      	cmp	r1, r3
 800726c:	d002      	beq.n	8007274 <__sflush_r+0x8c>
 800726e:	4628      	mov	r0, r5
 8007270:	f7ff fa8e 	bl	8006790 <_free_r>
 8007274:	2300      	movs	r3, #0
 8007276:	6363      	str	r3, [r4, #52]	@ 0x34
 8007278:	e00d      	b.n	8007296 <__sflush_r+0xae>
 800727a:	2301      	movs	r3, #1
 800727c:	4628      	mov	r0, r5
 800727e:	47b0      	blx	r6
 8007280:	4602      	mov	r2, r0
 8007282:	1c50      	adds	r0, r2, #1
 8007284:	d1c9      	bne.n	800721a <__sflush_r+0x32>
 8007286:	682b      	ldr	r3, [r5, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0c6      	beq.n	800721a <__sflush_r+0x32>
 800728c:	2b1d      	cmp	r3, #29
 800728e:	d001      	beq.n	8007294 <__sflush_r+0xac>
 8007290:	2b16      	cmp	r3, #22
 8007292:	d11e      	bne.n	80072d2 <__sflush_r+0xea>
 8007294:	602f      	str	r7, [r5, #0]
 8007296:	2000      	movs	r0, #0
 8007298:	e022      	b.n	80072e0 <__sflush_r+0xf8>
 800729a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800729e:	b21b      	sxth	r3, r3
 80072a0:	e01b      	b.n	80072da <__sflush_r+0xf2>
 80072a2:	690f      	ldr	r7, [r1, #16]
 80072a4:	2f00      	cmp	r7, #0
 80072a6:	d0f6      	beq.n	8007296 <__sflush_r+0xae>
 80072a8:	0793      	lsls	r3, r2, #30
 80072aa:	680e      	ldr	r6, [r1, #0]
 80072ac:	bf08      	it	eq
 80072ae:	694b      	ldreq	r3, [r1, #20]
 80072b0:	600f      	str	r7, [r1, #0]
 80072b2:	bf18      	it	ne
 80072b4:	2300      	movne	r3, #0
 80072b6:	eba6 0807 	sub.w	r8, r6, r7
 80072ba:	608b      	str	r3, [r1, #8]
 80072bc:	f1b8 0f00 	cmp.w	r8, #0
 80072c0:	dde9      	ble.n	8007296 <__sflush_r+0xae>
 80072c2:	6a21      	ldr	r1, [r4, #32]
 80072c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80072c6:	4643      	mov	r3, r8
 80072c8:	463a      	mov	r2, r7
 80072ca:	4628      	mov	r0, r5
 80072cc:	47b0      	blx	r6
 80072ce:	2800      	cmp	r0, #0
 80072d0:	dc08      	bgt.n	80072e4 <__sflush_r+0xfc>
 80072d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072da:	81a3      	strh	r3, [r4, #12]
 80072dc:	f04f 30ff 	mov.w	r0, #4294967295
 80072e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e4:	4407      	add	r7, r0
 80072e6:	eba8 0800 	sub.w	r8, r8, r0
 80072ea:	e7e7      	b.n	80072bc <__sflush_r+0xd4>
 80072ec:	dfbffffe 	.word	0xdfbffffe

080072f0 <_fflush_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	690b      	ldr	r3, [r1, #16]
 80072f4:	4605      	mov	r5, r0
 80072f6:	460c      	mov	r4, r1
 80072f8:	b913      	cbnz	r3, 8007300 <_fflush_r+0x10>
 80072fa:	2500      	movs	r5, #0
 80072fc:	4628      	mov	r0, r5
 80072fe:	bd38      	pop	{r3, r4, r5, pc}
 8007300:	b118      	cbz	r0, 800730a <_fflush_r+0x1a>
 8007302:	6a03      	ldr	r3, [r0, #32]
 8007304:	b90b      	cbnz	r3, 800730a <_fflush_r+0x1a>
 8007306:	f7fe faa5 	bl	8005854 <__sinit>
 800730a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0f3      	beq.n	80072fa <_fflush_r+0xa>
 8007312:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007314:	07d0      	lsls	r0, r2, #31
 8007316:	d404      	bmi.n	8007322 <_fflush_r+0x32>
 8007318:	0599      	lsls	r1, r3, #22
 800731a:	d402      	bmi.n	8007322 <_fflush_r+0x32>
 800731c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800731e:	f7fe fbd8 	bl	8005ad2 <__retarget_lock_acquire_recursive>
 8007322:	4628      	mov	r0, r5
 8007324:	4621      	mov	r1, r4
 8007326:	f7ff ff5f 	bl	80071e8 <__sflush_r>
 800732a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800732c:	07da      	lsls	r2, r3, #31
 800732e:	4605      	mov	r5, r0
 8007330:	d4e4      	bmi.n	80072fc <_fflush_r+0xc>
 8007332:	89a3      	ldrh	r3, [r4, #12]
 8007334:	059b      	lsls	r3, r3, #22
 8007336:	d4e1      	bmi.n	80072fc <_fflush_r+0xc>
 8007338:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800733a:	f7fe fbcb 	bl	8005ad4 <__retarget_lock_release_recursive>
 800733e:	e7dd      	b.n	80072fc <_fflush_r+0xc>

08007340 <memmove>:
 8007340:	4288      	cmp	r0, r1
 8007342:	b510      	push	{r4, lr}
 8007344:	eb01 0402 	add.w	r4, r1, r2
 8007348:	d902      	bls.n	8007350 <memmove+0x10>
 800734a:	4284      	cmp	r4, r0
 800734c:	4623      	mov	r3, r4
 800734e:	d807      	bhi.n	8007360 <memmove+0x20>
 8007350:	1e43      	subs	r3, r0, #1
 8007352:	42a1      	cmp	r1, r4
 8007354:	d008      	beq.n	8007368 <memmove+0x28>
 8007356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800735a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800735e:	e7f8      	b.n	8007352 <memmove+0x12>
 8007360:	4402      	add	r2, r0
 8007362:	4601      	mov	r1, r0
 8007364:	428a      	cmp	r2, r1
 8007366:	d100      	bne.n	800736a <memmove+0x2a>
 8007368:	bd10      	pop	{r4, pc}
 800736a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800736e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007372:	e7f7      	b.n	8007364 <memmove+0x24>

08007374 <__assert_func>:
 8007374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007376:	4614      	mov	r4, r2
 8007378:	461a      	mov	r2, r3
 800737a:	4b09      	ldr	r3, [pc, #36]	@ (80073a0 <__assert_func+0x2c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4605      	mov	r5, r0
 8007380:	68d8      	ldr	r0, [r3, #12]
 8007382:	b954      	cbnz	r4, 800739a <__assert_func+0x26>
 8007384:	4b07      	ldr	r3, [pc, #28]	@ (80073a4 <__assert_func+0x30>)
 8007386:	461c      	mov	r4, r3
 8007388:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800738c:	9100      	str	r1, [sp, #0]
 800738e:	462b      	mov	r3, r5
 8007390:	4905      	ldr	r1, [pc, #20]	@ (80073a8 <__assert_func+0x34>)
 8007392:	f000 f841 	bl	8007418 <fiprintf>
 8007396:	f000 f851 	bl	800743c <abort>
 800739a:	4b04      	ldr	r3, [pc, #16]	@ (80073ac <__assert_func+0x38>)
 800739c:	e7f4      	b.n	8007388 <__assert_func+0x14>
 800739e:	bf00      	nop
 80073a0:	20000018 	.word	0x20000018
 80073a4:	080081de 	.word	0x080081de
 80073a8:	080081b0 	.word	0x080081b0
 80073ac:	080081a3 	.word	0x080081a3

080073b0 <_calloc_r>:
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	fba1 5402 	umull	r5, r4, r1, r2
 80073b6:	b93c      	cbnz	r4, 80073c8 <_calloc_r+0x18>
 80073b8:	4629      	mov	r1, r5
 80073ba:	f7fd fcad 	bl	8004d18 <_malloc_r>
 80073be:	4606      	mov	r6, r0
 80073c0:	b928      	cbnz	r0, 80073ce <_calloc_r+0x1e>
 80073c2:	2600      	movs	r6, #0
 80073c4:	4630      	mov	r0, r6
 80073c6:	bd70      	pop	{r4, r5, r6, pc}
 80073c8:	220c      	movs	r2, #12
 80073ca:	6002      	str	r2, [r0, #0]
 80073cc:	e7f9      	b.n	80073c2 <_calloc_r+0x12>
 80073ce:	462a      	mov	r2, r5
 80073d0:	4621      	mov	r1, r4
 80073d2:	f7fe faf1 	bl	80059b8 <memset>
 80073d6:	e7f5      	b.n	80073c4 <_calloc_r+0x14>

080073d8 <__ascii_mbtowc>:
 80073d8:	b082      	sub	sp, #8
 80073da:	b901      	cbnz	r1, 80073de <__ascii_mbtowc+0x6>
 80073dc:	a901      	add	r1, sp, #4
 80073de:	b142      	cbz	r2, 80073f2 <__ascii_mbtowc+0x1a>
 80073e0:	b14b      	cbz	r3, 80073f6 <__ascii_mbtowc+0x1e>
 80073e2:	7813      	ldrb	r3, [r2, #0]
 80073e4:	600b      	str	r3, [r1, #0]
 80073e6:	7812      	ldrb	r2, [r2, #0]
 80073e8:	1e10      	subs	r0, r2, #0
 80073ea:	bf18      	it	ne
 80073ec:	2001      	movne	r0, #1
 80073ee:	b002      	add	sp, #8
 80073f0:	4770      	bx	lr
 80073f2:	4610      	mov	r0, r2
 80073f4:	e7fb      	b.n	80073ee <__ascii_mbtowc+0x16>
 80073f6:	f06f 0001 	mvn.w	r0, #1
 80073fa:	e7f8      	b.n	80073ee <__ascii_mbtowc+0x16>

080073fc <__ascii_wctomb>:
 80073fc:	4603      	mov	r3, r0
 80073fe:	4608      	mov	r0, r1
 8007400:	b141      	cbz	r1, 8007414 <__ascii_wctomb+0x18>
 8007402:	2aff      	cmp	r2, #255	@ 0xff
 8007404:	d904      	bls.n	8007410 <__ascii_wctomb+0x14>
 8007406:	228a      	movs	r2, #138	@ 0x8a
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	f04f 30ff 	mov.w	r0, #4294967295
 800740e:	4770      	bx	lr
 8007410:	700a      	strb	r2, [r1, #0]
 8007412:	2001      	movs	r0, #1
 8007414:	4770      	bx	lr
	...

08007418 <fiprintf>:
 8007418:	b40e      	push	{r1, r2, r3}
 800741a:	b503      	push	{r0, r1, lr}
 800741c:	4601      	mov	r1, r0
 800741e:	ab03      	add	r3, sp, #12
 8007420:	4805      	ldr	r0, [pc, #20]	@ (8007438 <fiprintf+0x20>)
 8007422:	f853 2b04 	ldr.w	r2, [r3], #4
 8007426:	6800      	ldr	r0, [r0, #0]
 8007428:	9301      	str	r3, [sp, #4]
 800742a:	f000 f837 	bl	800749c <_vfiprintf_r>
 800742e:	b002      	add	sp, #8
 8007430:	f85d eb04 	ldr.w	lr, [sp], #4
 8007434:	b003      	add	sp, #12
 8007436:	4770      	bx	lr
 8007438:	20000018 	.word	0x20000018

0800743c <abort>:
 800743c:	b508      	push	{r3, lr}
 800743e:	2006      	movs	r0, #6
 8007440:	f000 fa00 	bl	8007844 <raise>
 8007444:	2001      	movs	r0, #1
 8007446:	f7fa fac3 	bl	80019d0 <_exit>

0800744a <__sfputc_r>:
 800744a:	6893      	ldr	r3, [r2, #8]
 800744c:	3b01      	subs	r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	b410      	push	{r4}
 8007452:	6093      	str	r3, [r2, #8]
 8007454:	da08      	bge.n	8007468 <__sfputc_r+0x1e>
 8007456:	6994      	ldr	r4, [r2, #24]
 8007458:	42a3      	cmp	r3, r4
 800745a:	db01      	blt.n	8007460 <__sfputc_r+0x16>
 800745c:	290a      	cmp	r1, #10
 800745e:	d103      	bne.n	8007468 <__sfputc_r+0x1e>
 8007460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007464:	f000 b932 	b.w	80076cc <__swbuf_r>
 8007468:	6813      	ldr	r3, [r2, #0]
 800746a:	1c58      	adds	r0, r3, #1
 800746c:	6010      	str	r0, [r2, #0]
 800746e:	7019      	strb	r1, [r3, #0]
 8007470:	4608      	mov	r0, r1
 8007472:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007476:	4770      	bx	lr

08007478 <__sfputs_r>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	4606      	mov	r6, r0
 800747c:	460f      	mov	r7, r1
 800747e:	4614      	mov	r4, r2
 8007480:	18d5      	adds	r5, r2, r3
 8007482:	42ac      	cmp	r4, r5
 8007484:	d101      	bne.n	800748a <__sfputs_r+0x12>
 8007486:	2000      	movs	r0, #0
 8007488:	e007      	b.n	800749a <__sfputs_r+0x22>
 800748a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800748e:	463a      	mov	r2, r7
 8007490:	4630      	mov	r0, r6
 8007492:	f7ff ffda 	bl	800744a <__sfputc_r>
 8007496:	1c43      	adds	r3, r0, #1
 8007498:	d1f3      	bne.n	8007482 <__sfputs_r+0xa>
 800749a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800749c <_vfiprintf_r>:
 800749c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a0:	460d      	mov	r5, r1
 80074a2:	b09d      	sub	sp, #116	@ 0x74
 80074a4:	4614      	mov	r4, r2
 80074a6:	4698      	mov	r8, r3
 80074a8:	4606      	mov	r6, r0
 80074aa:	b118      	cbz	r0, 80074b4 <_vfiprintf_r+0x18>
 80074ac:	6a03      	ldr	r3, [r0, #32]
 80074ae:	b90b      	cbnz	r3, 80074b4 <_vfiprintf_r+0x18>
 80074b0:	f7fe f9d0 	bl	8005854 <__sinit>
 80074b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074b6:	07d9      	lsls	r1, r3, #31
 80074b8:	d405      	bmi.n	80074c6 <_vfiprintf_r+0x2a>
 80074ba:	89ab      	ldrh	r3, [r5, #12]
 80074bc:	059a      	lsls	r2, r3, #22
 80074be:	d402      	bmi.n	80074c6 <_vfiprintf_r+0x2a>
 80074c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074c2:	f7fe fb06 	bl	8005ad2 <__retarget_lock_acquire_recursive>
 80074c6:	89ab      	ldrh	r3, [r5, #12]
 80074c8:	071b      	lsls	r3, r3, #28
 80074ca:	d501      	bpl.n	80074d0 <_vfiprintf_r+0x34>
 80074cc:	692b      	ldr	r3, [r5, #16]
 80074ce:	b99b      	cbnz	r3, 80074f8 <_vfiprintf_r+0x5c>
 80074d0:	4629      	mov	r1, r5
 80074d2:	4630      	mov	r0, r6
 80074d4:	f000 f938 	bl	8007748 <__swsetup_r>
 80074d8:	b170      	cbz	r0, 80074f8 <_vfiprintf_r+0x5c>
 80074da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074dc:	07dc      	lsls	r4, r3, #31
 80074de:	d504      	bpl.n	80074ea <_vfiprintf_r+0x4e>
 80074e0:	f04f 30ff 	mov.w	r0, #4294967295
 80074e4:	b01d      	add	sp, #116	@ 0x74
 80074e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ea:	89ab      	ldrh	r3, [r5, #12]
 80074ec:	0598      	lsls	r0, r3, #22
 80074ee:	d4f7      	bmi.n	80074e0 <_vfiprintf_r+0x44>
 80074f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074f2:	f7fe faef 	bl	8005ad4 <__retarget_lock_release_recursive>
 80074f6:	e7f3      	b.n	80074e0 <_vfiprintf_r+0x44>
 80074f8:	2300      	movs	r3, #0
 80074fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80074fc:	2320      	movs	r3, #32
 80074fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007502:	f8cd 800c 	str.w	r8, [sp, #12]
 8007506:	2330      	movs	r3, #48	@ 0x30
 8007508:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80076b8 <_vfiprintf_r+0x21c>
 800750c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007510:	f04f 0901 	mov.w	r9, #1
 8007514:	4623      	mov	r3, r4
 8007516:	469a      	mov	sl, r3
 8007518:	f813 2b01 	ldrb.w	r2, [r3], #1
 800751c:	b10a      	cbz	r2, 8007522 <_vfiprintf_r+0x86>
 800751e:	2a25      	cmp	r2, #37	@ 0x25
 8007520:	d1f9      	bne.n	8007516 <_vfiprintf_r+0x7a>
 8007522:	ebba 0b04 	subs.w	fp, sl, r4
 8007526:	d00b      	beq.n	8007540 <_vfiprintf_r+0xa4>
 8007528:	465b      	mov	r3, fp
 800752a:	4622      	mov	r2, r4
 800752c:	4629      	mov	r1, r5
 800752e:	4630      	mov	r0, r6
 8007530:	f7ff ffa2 	bl	8007478 <__sfputs_r>
 8007534:	3001      	adds	r0, #1
 8007536:	f000 80a7 	beq.w	8007688 <_vfiprintf_r+0x1ec>
 800753a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800753c:	445a      	add	r2, fp
 800753e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007540:	f89a 3000 	ldrb.w	r3, [sl]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 809f 	beq.w	8007688 <_vfiprintf_r+0x1ec>
 800754a:	2300      	movs	r3, #0
 800754c:	f04f 32ff 	mov.w	r2, #4294967295
 8007550:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007554:	f10a 0a01 	add.w	sl, sl, #1
 8007558:	9304      	str	r3, [sp, #16]
 800755a:	9307      	str	r3, [sp, #28]
 800755c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007560:	931a      	str	r3, [sp, #104]	@ 0x68
 8007562:	4654      	mov	r4, sl
 8007564:	2205      	movs	r2, #5
 8007566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800756a:	4853      	ldr	r0, [pc, #332]	@ (80076b8 <_vfiprintf_r+0x21c>)
 800756c:	f7f8 fe30 	bl	80001d0 <memchr>
 8007570:	9a04      	ldr	r2, [sp, #16]
 8007572:	b9d8      	cbnz	r0, 80075ac <_vfiprintf_r+0x110>
 8007574:	06d1      	lsls	r1, r2, #27
 8007576:	bf44      	itt	mi
 8007578:	2320      	movmi	r3, #32
 800757a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800757e:	0713      	lsls	r3, r2, #28
 8007580:	bf44      	itt	mi
 8007582:	232b      	movmi	r3, #43	@ 0x2b
 8007584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007588:	f89a 3000 	ldrb.w	r3, [sl]
 800758c:	2b2a      	cmp	r3, #42	@ 0x2a
 800758e:	d015      	beq.n	80075bc <_vfiprintf_r+0x120>
 8007590:	9a07      	ldr	r2, [sp, #28]
 8007592:	4654      	mov	r4, sl
 8007594:	2000      	movs	r0, #0
 8007596:	f04f 0c0a 	mov.w	ip, #10
 800759a:	4621      	mov	r1, r4
 800759c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075a0:	3b30      	subs	r3, #48	@ 0x30
 80075a2:	2b09      	cmp	r3, #9
 80075a4:	d94b      	bls.n	800763e <_vfiprintf_r+0x1a2>
 80075a6:	b1b0      	cbz	r0, 80075d6 <_vfiprintf_r+0x13a>
 80075a8:	9207      	str	r2, [sp, #28]
 80075aa:	e014      	b.n	80075d6 <_vfiprintf_r+0x13a>
 80075ac:	eba0 0308 	sub.w	r3, r0, r8
 80075b0:	fa09 f303 	lsl.w	r3, r9, r3
 80075b4:	4313      	orrs	r3, r2
 80075b6:	9304      	str	r3, [sp, #16]
 80075b8:	46a2      	mov	sl, r4
 80075ba:	e7d2      	b.n	8007562 <_vfiprintf_r+0xc6>
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	1d19      	adds	r1, r3, #4
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	9103      	str	r1, [sp, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	bfbb      	ittet	lt
 80075c8:	425b      	neglt	r3, r3
 80075ca:	f042 0202 	orrlt.w	r2, r2, #2
 80075ce:	9307      	strge	r3, [sp, #28]
 80075d0:	9307      	strlt	r3, [sp, #28]
 80075d2:	bfb8      	it	lt
 80075d4:	9204      	strlt	r2, [sp, #16]
 80075d6:	7823      	ldrb	r3, [r4, #0]
 80075d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80075da:	d10a      	bne.n	80075f2 <_vfiprintf_r+0x156>
 80075dc:	7863      	ldrb	r3, [r4, #1]
 80075de:	2b2a      	cmp	r3, #42	@ 0x2a
 80075e0:	d132      	bne.n	8007648 <_vfiprintf_r+0x1ac>
 80075e2:	9b03      	ldr	r3, [sp, #12]
 80075e4:	1d1a      	adds	r2, r3, #4
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	9203      	str	r2, [sp, #12]
 80075ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075ee:	3402      	adds	r4, #2
 80075f0:	9305      	str	r3, [sp, #20]
 80075f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80076c8 <_vfiprintf_r+0x22c>
 80075f6:	7821      	ldrb	r1, [r4, #0]
 80075f8:	2203      	movs	r2, #3
 80075fa:	4650      	mov	r0, sl
 80075fc:	f7f8 fde8 	bl	80001d0 <memchr>
 8007600:	b138      	cbz	r0, 8007612 <_vfiprintf_r+0x176>
 8007602:	9b04      	ldr	r3, [sp, #16]
 8007604:	eba0 000a 	sub.w	r0, r0, sl
 8007608:	2240      	movs	r2, #64	@ 0x40
 800760a:	4082      	lsls	r2, r0
 800760c:	4313      	orrs	r3, r2
 800760e:	3401      	adds	r4, #1
 8007610:	9304      	str	r3, [sp, #16]
 8007612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007616:	4829      	ldr	r0, [pc, #164]	@ (80076bc <_vfiprintf_r+0x220>)
 8007618:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800761c:	2206      	movs	r2, #6
 800761e:	f7f8 fdd7 	bl	80001d0 <memchr>
 8007622:	2800      	cmp	r0, #0
 8007624:	d03f      	beq.n	80076a6 <_vfiprintf_r+0x20a>
 8007626:	4b26      	ldr	r3, [pc, #152]	@ (80076c0 <_vfiprintf_r+0x224>)
 8007628:	bb1b      	cbnz	r3, 8007672 <_vfiprintf_r+0x1d6>
 800762a:	9b03      	ldr	r3, [sp, #12]
 800762c:	3307      	adds	r3, #7
 800762e:	f023 0307 	bic.w	r3, r3, #7
 8007632:	3308      	adds	r3, #8
 8007634:	9303      	str	r3, [sp, #12]
 8007636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007638:	443b      	add	r3, r7
 800763a:	9309      	str	r3, [sp, #36]	@ 0x24
 800763c:	e76a      	b.n	8007514 <_vfiprintf_r+0x78>
 800763e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007642:	460c      	mov	r4, r1
 8007644:	2001      	movs	r0, #1
 8007646:	e7a8      	b.n	800759a <_vfiprintf_r+0xfe>
 8007648:	2300      	movs	r3, #0
 800764a:	3401      	adds	r4, #1
 800764c:	9305      	str	r3, [sp, #20]
 800764e:	4619      	mov	r1, r3
 8007650:	f04f 0c0a 	mov.w	ip, #10
 8007654:	4620      	mov	r0, r4
 8007656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800765a:	3a30      	subs	r2, #48	@ 0x30
 800765c:	2a09      	cmp	r2, #9
 800765e:	d903      	bls.n	8007668 <_vfiprintf_r+0x1cc>
 8007660:	2b00      	cmp	r3, #0
 8007662:	d0c6      	beq.n	80075f2 <_vfiprintf_r+0x156>
 8007664:	9105      	str	r1, [sp, #20]
 8007666:	e7c4      	b.n	80075f2 <_vfiprintf_r+0x156>
 8007668:	fb0c 2101 	mla	r1, ip, r1, r2
 800766c:	4604      	mov	r4, r0
 800766e:	2301      	movs	r3, #1
 8007670:	e7f0      	b.n	8007654 <_vfiprintf_r+0x1b8>
 8007672:	ab03      	add	r3, sp, #12
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	462a      	mov	r2, r5
 8007678:	4b12      	ldr	r3, [pc, #72]	@ (80076c4 <_vfiprintf_r+0x228>)
 800767a:	a904      	add	r1, sp, #16
 800767c:	4630      	mov	r0, r6
 800767e:	f7fd fca5 	bl	8004fcc <_printf_float>
 8007682:	4607      	mov	r7, r0
 8007684:	1c78      	adds	r0, r7, #1
 8007686:	d1d6      	bne.n	8007636 <_vfiprintf_r+0x19a>
 8007688:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800768a:	07d9      	lsls	r1, r3, #31
 800768c:	d405      	bmi.n	800769a <_vfiprintf_r+0x1fe>
 800768e:	89ab      	ldrh	r3, [r5, #12]
 8007690:	059a      	lsls	r2, r3, #22
 8007692:	d402      	bmi.n	800769a <_vfiprintf_r+0x1fe>
 8007694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007696:	f7fe fa1d 	bl	8005ad4 <__retarget_lock_release_recursive>
 800769a:	89ab      	ldrh	r3, [r5, #12]
 800769c:	065b      	lsls	r3, r3, #25
 800769e:	f53f af1f 	bmi.w	80074e0 <_vfiprintf_r+0x44>
 80076a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076a4:	e71e      	b.n	80074e4 <_vfiprintf_r+0x48>
 80076a6:	ab03      	add	r3, sp, #12
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	462a      	mov	r2, r5
 80076ac:	4b05      	ldr	r3, [pc, #20]	@ (80076c4 <_vfiprintf_r+0x228>)
 80076ae:	a904      	add	r1, sp, #16
 80076b0:	4630      	mov	r0, r6
 80076b2:	f7fd ff23 	bl	80054fc <_printf_i>
 80076b6:	e7e4      	b.n	8007682 <_vfiprintf_r+0x1e6>
 80076b8:	08008188 	.word	0x08008188
 80076bc:	08008192 	.word	0x08008192
 80076c0:	08004fcd 	.word	0x08004fcd
 80076c4:	08007479 	.word	0x08007479
 80076c8:	0800818e 	.word	0x0800818e

080076cc <__swbuf_r>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	460e      	mov	r6, r1
 80076d0:	4614      	mov	r4, r2
 80076d2:	4605      	mov	r5, r0
 80076d4:	b118      	cbz	r0, 80076de <__swbuf_r+0x12>
 80076d6:	6a03      	ldr	r3, [r0, #32]
 80076d8:	b90b      	cbnz	r3, 80076de <__swbuf_r+0x12>
 80076da:	f7fe f8bb 	bl	8005854 <__sinit>
 80076de:	69a3      	ldr	r3, [r4, #24]
 80076e0:	60a3      	str	r3, [r4, #8]
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	071a      	lsls	r2, r3, #28
 80076e6:	d501      	bpl.n	80076ec <__swbuf_r+0x20>
 80076e8:	6923      	ldr	r3, [r4, #16]
 80076ea:	b943      	cbnz	r3, 80076fe <__swbuf_r+0x32>
 80076ec:	4621      	mov	r1, r4
 80076ee:	4628      	mov	r0, r5
 80076f0:	f000 f82a 	bl	8007748 <__swsetup_r>
 80076f4:	b118      	cbz	r0, 80076fe <__swbuf_r+0x32>
 80076f6:	f04f 37ff 	mov.w	r7, #4294967295
 80076fa:	4638      	mov	r0, r7
 80076fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	6922      	ldr	r2, [r4, #16]
 8007702:	1a98      	subs	r0, r3, r2
 8007704:	6963      	ldr	r3, [r4, #20]
 8007706:	b2f6      	uxtb	r6, r6
 8007708:	4283      	cmp	r3, r0
 800770a:	4637      	mov	r7, r6
 800770c:	dc05      	bgt.n	800771a <__swbuf_r+0x4e>
 800770e:	4621      	mov	r1, r4
 8007710:	4628      	mov	r0, r5
 8007712:	f7ff fded 	bl	80072f0 <_fflush_r>
 8007716:	2800      	cmp	r0, #0
 8007718:	d1ed      	bne.n	80076f6 <__swbuf_r+0x2a>
 800771a:	68a3      	ldr	r3, [r4, #8]
 800771c:	3b01      	subs	r3, #1
 800771e:	60a3      	str	r3, [r4, #8]
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	6022      	str	r2, [r4, #0]
 8007726:	701e      	strb	r6, [r3, #0]
 8007728:	6962      	ldr	r2, [r4, #20]
 800772a:	1c43      	adds	r3, r0, #1
 800772c:	429a      	cmp	r2, r3
 800772e:	d004      	beq.n	800773a <__swbuf_r+0x6e>
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	07db      	lsls	r3, r3, #31
 8007734:	d5e1      	bpl.n	80076fa <__swbuf_r+0x2e>
 8007736:	2e0a      	cmp	r6, #10
 8007738:	d1df      	bne.n	80076fa <__swbuf_r+0x2e>
 800773a:	4621      	mov	r1, r4
 800773c:	4628      	mov	r0, r5
 800773e:	f7ff fdd7 	bl	80072f0 <_fflush_r>
 8007742:	2800      	cmp	r0, #0
 8007744:	d0d9      	beq.n	80076fa <__swbuf_r+0x2e>
 8007746:	e7d6      	b.n	80076f6 <__swbuf_r+0x2a>

08007748 <__swsetup_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4b29      	ldr	r3, [pc, #164]	@ (80077f0 <__swsetup_r+0xa8>)
 800774c:	4605      	mov	r5, r0
 800774e:	6818      	ldr	r0, [r3, #0]
 8007750:	460c      	mov	r4, r1
 8007752:	b118      	cbz	r0, 800775c <__swsetup_r+0x14>
 8007754:	6a03      	ldr	r3, [r0, #32]
 8007756:	b90b      	cbnz	r3, 800775c <__swsetup_r+0x14>
 8007758:	f7fe f87c 	bl	8005854 <__sinit>
 800775c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007760:	0719      	lsls	r1, r3, #28
 8007762:	d422      	bmi.n	80077aa <__swsetup_r+0x62>
 8007764:	06da      	lsls	r2, r3, #27
 8007766:	d407      	bmi.n	8007778 <__swsetup_r+0x30>
 8007768:	2209      	movs	r2, #9
 800776a:	602a      	str	r2, [r5, #0]
 800776c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007770:	81a3      	strh	r3, [r4, #12]
 8007772:	f04f 30ff 	mov.w	r0, #4294967295
 8007776:	e033      	b.n	80077e0 <__swsetup_r+0x98>
 8007778:	0758      	lsls	r0, r3, #29
 800777a:	d512      	bpl.n	80077a2 <__swsetup_r+0x5a>
 800777c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800777e:	b141      	cbz	r1, 8007792 <__swsetup_r+0x4a>
 8007780:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007784:	4299      	cmp	r1, r3
 8007786:	d002      	beq.n	800778e <__swsetup_r+0x46>
 8007788:	4628      	mov	r0, r5
 800778a:	f7ff f801 	bl	8006790 <_free_r>
 800778e:	2300      	movs	r3, #0
 8007790:	6363      	str	r3, [r4, #52]	@ 0x34
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007798:	81a3      	strh	r3, [r4, #12]
 800779a:	2300      	movs	r3, #0
 800779c:	6063      	str	r3, [r4, #4]
 800779e:	6923      	ldr	r3, [r4, #16]
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	89a3      	ldrh	r3, [r4, #12]
 80077a4:	f043 0308 	orr.w	r3, r3, #8
 80077a8:	81a3      	strh	r3, [r4, #12]
 80077aa:	6923      	ldr	r3, [r4, #16]
 80077ac:	b94b      	cbnz	r3, 80077c2 <__swsetup_r+0x7a>
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80077b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077b8:	d003      	beq.n	80077c2 <__swsetup_r+0x7a>
 80077ba:	4621      	mov	r1, r4
 80077bc:	4628      	mov	r0, r5
 80077be:	f000 f883 	bl	80078c8 <__smakebuf_r>
 80077c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077c6:	f013 0201 	ands.w	r2, r3, #1
 80077ca:	d00a      	beq.n	80077e2 <__swsetup_r+0x9a>
 80077cc:	2200      	movs	r2, #0
 80077ce:	60a2      	str	r2, [r4, #8]
 80077d0:	6962      	ldr	r2, [r4, #20]
 80077d2:	4252      	negs	r2, r2
 80077d4:	61a2      	str	r2, [r4, #24]
 80077d6:	6922      	ldr	r2, [r4, #16]
 80077d8:	b942      	cbnz	r2, 80077ec <__swsetup_r+0xa4>
 80077da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80077de:	d1c5      	bne.n	800776c <__swsetup_r+0x24>
 80077e0:	bd38      	pop	{r3, r4, r5, pc}
 80077e2:	0799      	lsls	r1, r3, #30
 80077e4:	bf58      	it	pl
 80077e6:	6962      	ldrpl	r2, [r4, #20]
 80077e8:	60a2      	str	r2, [r4, #8]
 80077ea:	e7f4      	b.n	80077d6 <__swsetup_r+0x8e>
 80077ec:	2000      	movs	r0, #0
 80077ee:	e7f7      	b.n	80077e0 <__swsetup_r+0x98>
 80077f0:	20000018 	.word	0x20000018

080077f4 <_raise_r>:
 80077f4:	291f      	cmp	r1, #31
 80077f6:	b538      	push	{r3, r4, r5, lr}
 80077f8:	4605      	mov	r5, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	d904      	bls.n	8007808 <_raise_r+0x14>
 80077fe:	2316      	movs	r3, #22
 8007800:	6003      	str	r3, [r0, #0]
 8007802:	f04f 30ff 	mov.w	r0, #4294967295
 8007806:	bd38      	pop	{r3, r4, r5, pc}
 8007808:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800780a:	b112      	cbz	r2, 8007812 <_raise_r+0x1e>
 800780c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007810:	b94b      	cbnz	r3, 8007826 <_raise_r+0x32>
 8007812:	4628      	mov	r0, r5
 8007814:	f000 f830 	bl	8007878 <_getpid_r>
 8007818:	4622      	mov	r2, r4
 800781a:	4601      	mov	r1, r0
 800781c:	4628      	mov	r0, r5
 800781e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007822:	f000 b817 	b.w	8007854 <_kill_r>
 8007826:	2b01      	cmp	r3, #1
 8007828:	d00a      	beq.n	8007840 <_raise_r+0x4c>
 800782a:	1c59      	adds	r1, r3, #1
 800782c:	d103      	bne.n	8007836 <_raise_r+0x42>
 800782e:	2316      	movs	r3, #22
 8007830:	6003      	str	r3, [r0, #0]
 8007832:	2001      	movs	r0, #1
 8007834:	e7e7      	b.n	8007806 <_raise_r+0x12>
 8007836:	2100      	movs	r1, #0
 8007838:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800783c:	4620      	mov	r0, r4
 800783e:	4798      	blx	r3
 8007840:	2000      	movs	r0, #0
 8007842:	e7e0      	b.n	8007806 <_raise_r+0x12>

08007844 <raise>:
 8007844:	4b02      	ldr	r3, [pc, #8]	@ (8007850 <raise+0xc>)
 8007846:	4601      	mov	r1, r0
 8007848:	6818      	ldr	r0, [r3, #0]
 800784a:	f7ff bfd3 	b.w	80077f4 <_raise_r>
 800784e:	bf00      	nop
 8007850:	20000018 	.word	0x20000018

08007854 <_kill_r>:
 8007854:	b538      	push	{r3, r4, r5, lr}
 8007856:	4d07      	ldr	r5, [pc, #28]	@ (8007874 <_kill_r+0x20>)
 8007858:	2300      	movs	r3, #0
 800785a:	4604      	mov	r4, r0
 800785c:	4608      	mov	r0, r1
 800785e:	4611      	mov	r1, r2
 8007860:	602b      	str	r3, [r5, #0]
 8007862:	f7fa f8a5 	bl	80019b0 <_kill>
 8007866:	1c43      	adds	r3, r0, #1
 8007868:	d102      	bne.n	8007870 <_kill_r+0x1c>
 800786a:	682b      	ldr	r3, [r5, #0]
 800786c:	b103      	cbz	r3, 8007870 <_kill_r+0x1c>
 800786e:	6023      	str	r3, [r4, #0]
 8007870:	bd38      	pop	{r3, r4, r5, pc}
 8007872:	bf00      	nop
 8007874:	20001454 	.word	0x20001454

08007878 <_getpid_r>:
 8007878:	f7fa b892 	b.w	80019a0 <_getpid>

0800787c <__swhatbuf_r>:
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	460c      	mov	r4, r1
 8007880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007884:	2900      	cmp	r1, #0
 8007886:	b096      	sub	sp, #88	@ 0x58
 8007888:	4615      	mov	r5, r2
 800788a:	461e      	mov	r6, r3
 800788c:	da0d      	bge.n	80078aa <__swhatbuf_r+0x2e>
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007894:	f04f 0100 	mov.w	r1, #0
 8007898:	bf14      	ite	ne
 800789a:	2340      	movne	r3, #64	@ 0x40
 800789c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80078a0:	2000      	movs	r0, #0
 80078a2:	6031      	str	r1, [r6, #0]
 80078a4:	602b      	str	r3, [r5, #0]
 80078a6:	b016      	add	sp, #88	@ 0x58
 80078a8:	bd70      	pop	{r4, r5, r6, pc}
 80078aa:	466a      	mov	r2, sp
 80078ac:	f000 f848 	bl	8007940 <_fstat_r>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	dbec      	blt.n	800788e <__swhatbuf_r+0x12>
 80078b4:	9901      	ldr	r1, [sp, #4]
 80078b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80078ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80078be:	4259      	negs	r1, r3
 80078c0:	4159      	adcs	r1, r3
 80078c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80078c6:	e7eb      	b.n	80078a0 <__swhatbuf_r+0x24>

080078c8 <__smakebuf_r>:
 80078c8:	898b      	ldrh	r3, [r1, #12]
 80078ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078cc:	079d      	lsls	r5, r3, #30
 80078ce:	4606      	mov	r6, r0
 80078d0:	460c      	mov	r4, r1
 80078d2:	d507      	bpl.n	80078e4 <__smakebuf_r+0x1c>
 80078d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	6123      	str	r3, [r4, #16]
 80078dc:	2301      	movs	r3, #1
 80078de:	6163      	str	r3, [r4, #20]
 80078e0:	b003      	add	sp, #12
 80078e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078e4:	ab01      	add	r3, sp, #4
 80078e6:	466a      	mov	r2, sp
 80078e8:	f7ff ffc8 	bl	800787c <__swhatbuf_r>
 80078ec:	9f00      	ldr	r7, [sp, #0]
 80078ee:	4605      	mov	r5, r0
 80078f0:	4639      	mov	r1, r7
 80078f2:	4630      	mov	r0, r6
 80078f4:	f7fd fa10 	bl	8004d18 <_malloc_r>
 80078f8:	b948      	cbnz	r0, 800790e <__smakebuf_r+0x46>
 80078fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078fe:	059a      	lsls	r2, r3, #22
 8007900:	d4ee      	bmi.n	80078e0 <__smakebuf_r+0x18>
 8007902:	f023 0303 	bic.w	r3, r3, #3
 8007906:	f043 0302 	orr.w	r3, r3, #2
 800790a:	81a3      	strh	r3, [r4, #12]
 800790c:	e7e2      	b.n	80078d4 <__smakebuf_r+0xc>
 800790e:	89a3      	ldrh	r3, [r4, #12]
 8007910:	6020      	str	r0, [r4, #0]
 8007912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007916:	81a3      	strh	r3, [r4, #12]
 8007918:	9b01      	ldr	r3, [sp, #4]
 800791a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800791e:	b15b      	cbz	r3, 8007938 <__smakebuf_r+0x70>
 8007920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007924:	4630      	mov	r0, r6
 8007926:	f000 f81d 	bl	8007964 <_isatty_r>
 800792a:	b128      	cbz	r0, 8007938 <__smakebuf_r+0x70>
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	f023 0303 	bic.w	r3, r3, #3
 8007932:	f043 0301 	orr.w	r3, r3, #1
 8007936:	81a3      	strh	r3, [r4, #12]
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	431d      	orrs	r5, r3
 800793c:	81a5      	strh	r5, [r4, #12]
 800793e:	e7cf      	b.n	80078e0 <__smakebuf_r+0x18>

08007940 <_fstat_r>:
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	4d07      	ldr	r5, [pc, #28]	@ (8007960 <_fstat_r+0x20>)
 8007944:	2300      	movs	r3, #0
 8007946:	4604      	mov	r4, r0
 8007948:	4608      	mov	r0, r1
 800794a:	4611      	mov	r1, r2
 800794c:	602b      	str	r3, [r5, #0]
 800794e:	f7fa f88f 	bl	8001a70 <_fstat>
 8007952:	1c43      	adds	r3, r0, #1
 8007954:	d102      	bne.n	800795c <_fstat_r+0x1c>
 8007956:	682b      	ldr	r3, [r5, #0]
 8007958:	b103      	cbz	r3, 800795c <_fstat_r+0x1c>
 800795a:	6023      	str	r3, [r4, #0]
 800795c:	bd38      	pop	{r3, r4, r5, pc}
 800795e:	bf00      	nop
 8007960:	20001454 	.word	0x20001454

08007964 <_isatty_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4d06      	ldr	r5, [pc, #24]	@ (8007980 <_isatty_r+0x1c>)
 8007968:	2300      	movs	r3, #0
 800796a:	4604      	mov	r4, r0
 800796c:	4608      	mov	r0, r1
 800796e:	602b      	str	r3, [r5, #0]
 8007970:	f7fa f88e 	bl	8001a90 <_isatty>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d102      	bne.n	800797e <_isatty_r+0x1a>
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	b103      	cbz	r3, 800797e <_isatty_r+0x1a>
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	bd38      	pop	{r3, r4, r5, pc}
 8007980:	20001454 	.word	0x20001454

08007984 <_init>:
 8007984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007986:	bf00      	nop
 8007988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798a:	bc08      	pop	{r3}
 800798c:	469e      	mov	lr, r3
 800798e:	4770      	bx	lr

08007990 <_fini>:
 8007990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007992:	bf00      	nop
 8007994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007996:	bc08      	pop	{r3}
 8007998:	469e      	mov	lr, r3
 800799a:	4770      	bx	lr
